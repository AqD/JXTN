// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package org.controlsfx.validation;

/**
 * {@link ValidationSupport}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version controlsfx-8.0.6.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class ValidationSupportBuilder<Z extends ValidationSupport, B extends ValidationSupportBuilder<Z, B>>
        extends jxtn.jfx.builders.AbstractBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasValidationDecorator;
    protected org.controlsfx.validation.decoration.ValidationDecoration valValidationDecorator;
    public void applyTo(ValidationSupport instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasValidationDecorator)
            instance.setValidationDecorator(this.valValidationDecorator);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B validationDecorator(org.controlsfx.validation.decoration.ValidationDecoration value)
    {
        this.hasValidationDecorator = true;
        this.valValidationDecorator = value;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ValidationSupport build()
    {
        ValidationSupport instance = new ValidationSupport();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
