// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package org.controlsfx.dialog;

/**
 * {@link Wizard}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version controlsfx-8.20.8.jar
 * @param <Z> 要建構的物件型態(需繼承{@link Wizard})
 * @param <B> 建構器本身的型態(需繼承{@link WizardBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class WizardBuilder<Z extends Wizard, B extends WizardBuilder<Z, B>>
        extends jxtn.jfx.builders.AbstractBuilder<Z, B>
        implements WizardBuilderExt<Z, B>
{

    private boolean hasFlow;
    private org.controlsfx.dialog.Wizard.Flow valFlow;

    private boolean hasTitle;
    private java.lang.String valTitle;

    private boolean hasUserData;
    private java.lang.Object valUserData;

    private boolean bound1Flow;
    private boolean bound2Flow;
    private javafx.beans.value.ObservableValue<? extends org.controlsfx.dialog.Wizard.Flow> obsrv1Flow;
    private javafx.beans.property.Property<org.controlsfx.dialog.Wizard.Flow> obsrv2Flow;

    private boolean bound1Title;
    private boolean bound2Title;
    private javafx.beans.value.ObservableValue<? extends String> obsrv1Title;
    private javafx.beans.property.Property<String> obsrv2Title;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasFlow)
            instance.setFlow(this.valFlow);
        if (this.hasTitle)
            instance.setTitle(this.valTitle);
        if (this.hasUserData)
            instance.setUserData(this.valUserData);
        if (this.bound1Flow)
            instance.flowProperty().bind(this.obsrv1Flow);
        if (this.bound2Flow)
            instance.flowProperty().bindBidirectional(this.obsrv2Flow);
        if (this.bound1Title)
            instance.titleProperty().bind(this.obsrv1Title);
        if (this.bound2Title)
            instance.titleProperty().bindBidirectional(this.obsrv2Title);
    }

    /**
     * 設定屬性{@link Wizard#setFlow(org.controlsfx.dialog.Wizard.Flow)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B flow(org.controlsfx.dialog.Wizard.Flow value)
    {
        this.hasFlow = true;
        this.valFlow = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Wizard#setTitle(java.lang.String)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B title(java.lang.String value)
    {
        this.hasTitle = true;
        this.valTitle = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Wizard#setUserData(java.lang.Object)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B userData(java.lang.Object value)
    {
        this.hasUserData = true;
        this.valUserData = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Wizard#flowProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindFlow(javafx.beans.value.ObservableValue<? extends org.controlsfx.dialog.Wizard.Flow> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Flow = true;
        this.obsrv1Flow = source;
        this.bound2Flow = false;
        this.obsrv2Flow = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link Wizard#flowProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalFlow(javafx.beans.property.Property<org.controlsfx.dialog.Wizard.Flow> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Flow = false;
        this.obsrv1Flow = null;
        this.bound2Flow = true;
        this.obsrv2Flow = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Wizard#titleProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindTitle(javafx.beans.value.ObservableValue<? extends String> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Title = true;
        this.obsrv1Title = source;
        this.bound2Title = false;
        this.obsrv2Title = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link Wizard#titleProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalTitle(javafx.beans.property.Property<String> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Title = false;
        this.obsrv1Title = null;
        this.bound2Title = true;
        this.obsrv2Title = source;
        return (B) this;
    }

    /**
     * 建構{@link Wizard}物件。
     *
     * @return 新的{@link Wizard}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public Wizard build()
    {
        Wizard instance = new Wizard();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link Wizard}物件。
     *
     * @return 新的{@link Wizard}物件實體
     */
    @SuppressWarnings("unchecked")
    public Wizard build(java.lang.Object arg0)
    {
        Wizard instance = new Wizard(arg0);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link Wizard}物件。
     *
     * @return 新的{@link Wizard}物件實體
     */
    @SuppressWarnings("unchecked")
    public Wizard build(java.lang.Object arg0, java.lang.String arg1)
    {
        Wizard instance = new Wizard(arg0, arg1);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
