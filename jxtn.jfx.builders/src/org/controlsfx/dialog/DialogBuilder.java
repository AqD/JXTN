// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package org.controlsfx.dialog;

/**
 * {@link Dialog}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version controlsfx-8.0.6_20.jar
 * @param <Z> 要建構的物件型態(需繼承{@link Dialog})
 * @param <B> 建構器本身的型態(需繼承{@link DialogBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class DialogBuilder<Z extends Dialog, B extends DialogBuilder<Z, B>>
        extends jxtn.jfx.builders.AbstractBuilder<Z, B>
        implements jxtn.jfx.builders.AbstractBuilderExt<Z, B>
{

    private boolean hasActions;
    private java.util.Collection<org.controlsfx.control.action.Action> valActions;

    private boolean hasBackgroundEffect;
    private javafx.scene.effect.Effect valBackgroundEffect;

    private boolean hasClosable;
    private boolean valClosable;

    private boolean hasContent;
    private javafx.scene.Node valContent;

    private boolean hasContent1;
    private java.lang.String valContent1;

    private boolean hasExpandableContent;
    private javafx.scene.Node valExpandableContent;

    private boolean hasGraphic;
    private javafx.scene.Node valGraphic;

    private boolean hasIconifiable;
    private boolean valIconifiable;

    private boolean hasMasthead;
    private javafx.scene.Node valMasthead;

    private boolean hasMasthead1;
    private java.lang.String valMasthead1;

    private boolean hasResizable;
    private boolean valResizable;

    private boolean hasResult;
    private org.controlsfx.control.action.Action valResult;

    private boolean hasStylesheets;
    private java.util.Collection<java.lang.String> valStylesheets;

    private boolean hasTitle;
    private java.lang.String valTitle;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasActions)
            instance.getActions().addAll(this.valActions);
        if (this.hasBackgroundEffect)
            instance.setBackgroundEffect(this.valBackgroundEffect);
        if (this.hasClosable)
            instance.setClosable(this.valClosable);
        if (this.hasContent)
            instance.setContent(this.valContent);
        if (this.hasContent1)
            instance.setContent(this.valContent1);
        if (this.hasExpandableContent)
            instance.setExpandableContent(this.valExpandableContent);
        if (this.hasGraphic)
            instance.setGraphic(this.valGraphic);
        if (this.hasIconifiable)
            instance.setIconifiable(this.valIconifiable);
        if (this.hasMasthead)
            instance.setMasthead(this.valMasthead);
        if (this.hasMasthead1)
            instance.setMasthead(this.valMasthead1);
        if (this.hasResizable)
            instance.setResizable(this.valResizable);
        if (this.hasResult)
            instance.setResult(this.valResult);
        if (this.hasStylesheets)
            instance.getStylesheets().addAll(this.valStylesheets);
        if (this.hasTitle)
            instance.setTitle(this.valTitle);
    }

    /**
     * 設定集合屬性{@link Dialog#getActions}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B actions(java.util.Collection<org.controlsfx.control.action.Action> value)
    {
        this.hasActions = true;
        this.valActions = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link Dialog#getActions}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B actions(org.controlsfx.control.action.Action... value)
    {
        this.hasActions = true;
        this.valActions = java.util.Arrays.asList(value);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link Dialog#getActions}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B actionsAdd(java.util.Collection<org.controlsfx.control.action.Action> value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasActions = true;
        if (this.valActions == null)
            this.valActions = new java.util.ArrayList<>(value.size());
        this.valActions.addAll(value);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link Dialog#getActions}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B actionsAdd(org.controlsfx.control.action.Action... value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasActions = true;
        if (this.valActions == null)
            this.valActions = new java.util.ArrayList<>(value.length);
        this.valActions.addAll(java.util.Arrays.asList(value));
        return (B) this;
    }

    /**
     * 設定屬性{@link Dialog#setBackgroundEffect(javafx.scene.effect.Effect)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B backgroundEffect(javafx.scene.effect.Effect value)
    {
        this.hasBackgroundEffect = true;
        this.valBackgroundEffect = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Dialog#setClosable(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B closable(boolean value)
    {
        this.hasClosable = true;
        this.valClosable = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Dialog#setContent(javafx.scene.Node)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B content(javafx.scene.Node value)
    {
        this.hasContent = true;
        this.valContent = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Dialog#setContent(java.lang.String)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B content(java.lang.String value)
    {
        this.hasContent1 = true;
        this.valContent1 = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Dialog#setExpandableContent(javafx.scene.Node)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B expandableContent(javafx.scene.Node value)
    {
        this.hasExpandableContent = true;
        this.valExpandableContent = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Dialog#setGraphic(javafx.scene.Node)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B graphic(javafx.scene.Node value)
    {
        this.hasGraphic = true;
        this.valGraphic = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Dialog#setIconifiable(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B iconifiable(boolean value)
    {
        this.hasIconifiable = true;
        this.valIconifiable = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Dialog#setMasthead(javafx.scene.Node)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B masthead(javafx.scene.Node value)
    {
        this.hasMasthead = true;
        this.valMasthead = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Dialog#setMasthead(java.lang.String)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B masthead(java.lang.String value)
    {
        this.hasMasthead1 = true;
        this.valMasthead1 = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Dialog#setResizable(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B resizable(boolean value)
    {
        this.hasResizable = true;
        this.valResizable = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Dialog#setResult(org.controlsfx.control.action.Action)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B result(org.controlsfx.control.action.Action value)
    {
        this.hasResult = true;
        this.valResult = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link Dialog#getStylesheets}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B stylesheets(java.util.Collection<java.lang.String> value)
    {
        this.hasStylesheets = true;
        this.valStylesheets = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link Dialog#getStylesheets}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B stylesheets(java.lang.String... value)
    {
        this.hasStylesheets = true;
        this.valStylesheets = java.util.Arrays.asList(value);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link Dialog#getStylesheets}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B stylesheetsAdd(java.util.Collection<java.lang.String> value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasStylesheets = true;
        if (this.valStylesheets == null)
            this.valStylesheets = new java.util.ArrayList<>(value.size());
        this.valStylesheets.addAll(value);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link Dialog#getStylesheets}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B stylesheetsAdd(java.lang.String... value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasStylesheets = true;
        if (this.valStylesheets == null)
            this.valStylesheets = new java.util.ArrayList<>(value.length);
        this.valStylesheets.addAll(java.util.Arrays.asList(value));
        return (B) this;
    }

    /**
     * 設定屬性{@link Dialog#setTitle(java.lang.String)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B title(java.lang.String value)
    {
        this.hasTitle = true;
        this.valTitle = value;
        return (B) this;
    }

    /**
     * 建構{@link Dialog}物件
     *
     * @return 新的{@link Dialog}物件實體
     */
    @SuppressWarnings("unchecked")
    public Dialog build(java.lang.Object arg0, java.lang.String arg1)
    {
        Dialog instance = new Dialog(arg0, arg1);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
