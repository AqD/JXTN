// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package org.controlsfx.control;

/**
 * {@link HiddenSidesPane}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version controlsfx-8.0.6_20.jar
 * @param <Z> 要建構的物件型態(需繼承{@link HiddenSidesPane})
 * @param <B> 建構器本身的型態(需繼承{@link HiddenSidesPaneBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class HiddenSidesPaneBuilder<Z extends HiddenSidesPane, B extends HiddenSidesPaneBuilder<Z, B>>
        extends javafx.scene.control.ControlBuilder<Z, B>
{

    private boolean hasBottom;
    private javafx.scene.Node valBottom;

    private boolean hasContent;
    private javafx.scene.Node valContent;

    private boolean hasLeft;
    private javafx.scene.Node valLeft;

    private boolean hasPinnedSide;
    private javafx.geometry.Side valPinnedSide;

    private boolean hasRight;
    private javafx.scene.Node valRight;

    private boolean hasTop;
    private javafx.scene.Node valTop;

    private boolean hasTriggerDistance;
    private double valTriggerDistance;

    private boolean boundBottom;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrvBottom;

    private boolean boundContent;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrvContent;

    private boolean boundLeft;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrvLeft;

    private boolean boundPinnedSide;
    private javafx.beans.value.ObservableValue<? extends javafx.geometry.Side> obsrvPinnedSide;

    private boolean boundRight;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrvRight;

    private boolean boundTop;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrvTop;

    private boolean boundTriggerDistance;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvTriggerDistance;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasBottom)
            instance.setBottom(this.valBottom);
        if (this.hasContent)
            instance.setContent(this.valContent);
        if (this.hasLeft)
            instance.setLeft(this.valLeft);
        if (this.hasPinnedSide)
            instance.setPinnedSide(this.valPinnedSide);
        if (this.hasRight)
            instance.setRight(this.valRight);
        if (this.hasTop)
            instance.setTop(this.valTop);
        if (this.hasTriggerDistance)
            instance.setTriggerDistance(this.valTriggerDistance);
        if (this.boundBottom)
            instance.bottomProperty().bind(this.obsrvBottom);
        if (this.boundContent)
            instance.contentProperty().bind(this.obsrvContent);
        if (this.boundLeft)
            instance.leftProperty().bind(this.obsrvLeft);
        if (this.boundPinnedSide)
            instance.pinnedSideProperty().bind(this.obsrvPinnedSide);
        if (this.boundRight)
            instance.rightProperty().bind(this.obsrvRight);
        if (this.boundTop)
            instance.topProperty().bind(this.obsrvTop);
        if (this.boundTriggerDistance)
            instance.triggerDistanceProperty().bind(this.obsrvTriggerDistance);
    }

    /**
     * 設定屬性{@link HiddenSidesPane#setBottom(javafx.scene.Node)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bottom(javafx.scene.Node value)
    {
        this.hasBottom = true;
        this.valBottom = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#setContent(javafx.scene.Node)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B content(javafx.scene.Node value)
    {
        this.hasContent = true;
        this.valContent = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#setLeft(javafx.scene.Node)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B left(javafx.scene.Node value)
    {
        this.hasLeft = true;
        this.valLeft = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#setPinnedSide(javafx.geometry.Side)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B pinnedSide(javafx.geometry.Side value)
    {
        this.hasPinnedSide = true;
        this.valPinnedSide = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#setRight(javafx.scene.Node)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B right(javafx.scene.Node value)
    {
        this.hasRight = true;
        this.valRight = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#setTop(javafx.scene.Node)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B top(javafx.scene.Node value)
    {
        this.hasTop = true;
        this.valTop = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#setTriggerDistance(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B triggerDistance(double value)
    {
        this.hasTriggerDistance = true;
        this.valTriggerDistance = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#bottomProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBottom(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundBottom = true;
        this.obsrvBottom = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#contentProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindContent(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundContent = true;
        this.obsrvContent = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#leftProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindLeft(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundLeft = true;
        this.obsrvLeft = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#pinnedSideProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindPinnedSide(javafx.beans.value.ObservableValue<? extends javafx.geometry.Side> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundPinnedSide = true;
        this.obsrvPinnedSide = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#rightProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindRight(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundRight = true;
        this.obsrvRight = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#topProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindTop(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundTop = true;
        this.obsrvTop = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#triggerDistanceProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindTriggerDistance(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundTriggerDistance = true;
        this.obsrvTriggerDistance = source;
        return (B) this;
    }

    /**
     * 建構{@link HiddenSidesPane}物件
     *
     * @return 新的{@link HiddenSidesPane}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public HiddenSidesPane build()
    {
        HiddenSidesPane instance = new HiddenSidesPane();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
