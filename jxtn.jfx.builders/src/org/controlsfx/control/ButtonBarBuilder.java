// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package org.controlsfx.control;

/**
 * {@link ButtonBar}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version controlsfx-8.0.6.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class ButtonBarBuilder<Z extends ButtonBar, B extends ButtonBarBuilder<Z, B>>
        extends javafx.scene.control.ControlBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasButtonMinWidth;
    protected double valButtonMinWidth;

    protected boolean hasButtonOrder;
    protected java.lang.String valButtonOrder;

    protected boolean hasButtonUniformSize;
    protected boolean valButtonUniformSize;

    protected boolean hasButtons;
    protected java.util.Collection<javafx.scene.control.ButtonBase> valButtons;

    protected boolean boundButtonMinWidth;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvButtonMinWidth;

    protected boolean boundButtonOrder;
    protected javafx.beans.value.ObservableValue<? extends String> obsrvButtonOrder;

    protected boolean boundButtonUniformSize;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvButtonUniformSize;
    public void applyTo(ButtonBar instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasButtonMinWidth)
            instance.setButtonMinWidth(this.valButtonMinWidth);
        if (this.hasButtonOrder)
            instance.setButtonOrder(this.valButtonOrder);
        if (this.hasButtonUniformSize)
            instance.setButtonUniformSize(this.valButtonUniformSize);
        if (this.hasButtons)
            instance.getButtons().setAll(this.valButtons);
        if (this.boundButtonMinWidth)
            instance.buttonMinWidthProperty().bind(this.obsrvButtonMinWidth);
        if (this.boundButtonOrder)
            instance.buttonOrderProperty().bind(this.obsrvButtonOrder);
        if (this.boundButtonUniformSize)
            instance.buttonUniformSizeProperty().bind(this.obsrvButtonUniformSize);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B buttonMinWidth(double value)
    {
        this.hasButtonMinWidth = true;
        this.valButtonMinWidth = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B buttonOrder(java.lang.String value)
    {
        this.hasButtonOrder = true;
        this.valButtonOrder = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B buttonUniformSize(boolean value)
    {
        this.hasButtonUniformSize = true;
        this.valButtonUniformSize = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B buttons(java.util.Collection<javafx.scene.control.ButtonBase> value)
    {
        this.hasButtons = true;
        this.valButtons = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B buttons(javafx.scene.control.ButtonBase... value)
    {
        this.hasButtons = true;
        this.valButtons = java.util.Arrays.asList(value);
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindButtonMinWidth(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundButtonMinWidth = true;
        this.obsrvButtonMinWidth = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindButtonOrder(javafx.beans.value.ObservableValue<? extends String> source)
    {
        assert (source != null);
        this.boundButtonOrder = true;
        this.obsrvButtonOrder = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindButtonUniformSize(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundButtonUniformSize = true;
        this.obsrvButtonUniformSize = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ButtonBar build()
    {
        ButtonBar instance = new ButtonBar();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
