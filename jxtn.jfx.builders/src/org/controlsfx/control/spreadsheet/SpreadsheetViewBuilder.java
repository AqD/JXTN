// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package org.controlsfx.control.spreadsheet;

/**
 * {@link SpreadsheetView}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version controlsfx-8.0.6.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class SpreadsheetViewBuilder<Z extends SpreadsheetView, B extends SpreadsheetViewBuilder<Z, B>>
        extends javafx.scene.control.ControlBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasColumnPickerCallback;
    protected javafx.util.Callback<java.lang.Integer, java.lang.Void> valColumnPickerCallback;

    protected boolean hasColumnPickers;
    protected java.util.Collection<java.lang.Integer> valColumnPickers;

    protected boolean hasColumns;
    protected java.util.Collection<org.controlsfx.control.spreadsheet.SpreadsheetColumn> valColumns;

    protected boolean hasEditable;
    protected boolean valEditable;

    protected boolean hasFixedColumns;
    protected java.util.Collection<org.controlsfx.control.spreadsheet.SpreadsheetColumn> valFixedColumns;

    protected boolean hasFixedRows;
    protected java.util.Collection<java.lang.Integer> valFixedRows;

    protected boolean hasFixingColumnsAllowed;
    protected boolean valFixingColumnsAllowed;

    protected boolean hasFixingRowsAllowed;
    protected boolean valFixingRowsAllowed;

    protected boolean hasGrid;
    protected org.controlsfx.control.spreadsheet.Grid valGrid;

    protected boolean hasRowPickerCallback;
    protected javafx.util.Callback<java.lang.Integer, java.lang.Void> valRowPickerCallback;

    protected boolean hasRowPickers;
    protected java.util.Collection<java.lang.Integer> valRowPickers;

    protected boolean hasShowColumnHeader;
    protected boolean valShowColumnHeader;

    protected boolean hasShowRowHeader;
    protected boolean valShowRowHeader;

    protected boolean boundEditable;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvEditable;

    protected boolean boundShowColumnHeader;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvShowColumnHeader;

    protected boolean boundShowRowHeader;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvShowRowHeader;
    public void applyTo(SpreadsheetView instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasColumnPickerCallback)
            instance.setColumnPickerCallback(this.valColumnPickerCallback);
        if (this.hasColumnPickers)
            instance.getColumnPickers().setAll(this.valColumnPickers);
        if (this.hasColumns)
            instance.getColumns().setAll(this.valColumns);
        if (this.hasEditable)
            instance.setEditable(this.valEditable);
        if (this.hasFixedColumns)
            instance.getFixedColumns().setAll(this.valFixedColumns);
        if (this.hasFixedRows)
            instance.getFixedRows().setAll(this.valFixedRows);
        if (this.hasFixingColumnsAllowed)
            instance.setFixingColumnsAllowed(this.valFixingColumnsAllowed);
        if (this.hasFixingRowsAllowed)
            instance.setFixingRowsAllowed(this.valFixingRowsAllowed);
        if (this.hasGrid)
            instance.setGrid(this.valGrid);
        if (this.hasRowPickerCallback)
            instance.setRowPickerCallback(this.valRowPickerCallback);
        if (this.hasRowPickers)
            instance.getRowPickers().setAll(this.valRowPickers);
        if (this.hasShowColumnHeader)
            instance.setShowColumnHeader(this.valShowColumnHeader);
        if (this.hasShowRowHeader)
            instance.setShowRowHeader(this.valShowRowHeader);
        if (this.boundEditable)
            instance.editableProperty().bind(this.obsrvEditable);
        if (this.boundShowColumnHeader)
            instance.showColumnHeaderProperty().bind(this.obsrvShowColumnHeader);
        if (this.boundShowRowHeader)
            instance.showRowHeaderProperty().bind(this.obsrvShowRowHeader);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B columnPickerCallback(javafx.util.Callback<java.lang.Integer, java.lang.Void> value)
    {
        this.hasColumnPickerCallback = true;
        this.valColumnPickerCallback = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B columnPickers(java.util.Collection<java.lang.Integer> value)
    {
        this.hasColumnPickers = true;
        this.valColumnPickers = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B columnPickers(java.lang.Integer... value)
    {
        this.hasColumnPickers = true;
        this.valColumnPickers = java.util.Arrays.asList(value);
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B columns(java.util.Collection<org.controlsfx.control.spreadsheet.SpreadsheetColumn> value)
    {
        this.hasColumns = true;
        this.valColumns = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B columns(org.controlsfx.control.spreadsheet.SpreadsheetColumn... value)
    {
        this.hasColumns = true;
        this.valColumns = java.util.Arrays.asList(value);
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B editable(boolean value)
    {
        this.hasEditable = true;
        this.valEditable = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B fixedColumns(java.util.Collection<org.controlsfx.control.spreadsheet.SpreadsheetColumn> value)
    {
        this.hasFixedColumns = true;
        this.valFixedColumns = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B fixedColumns(org.controlsfx.control.spreadsheet.SpreadsheetColumn... value)
    {
        this.hasFixedColumns = true;
        this.valFixedColumns = java.util.Arrays.asList(value);
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B fixedRows(java.util.Collection<java.lang.Integer> value)
    {
        this.hasFixedRows = true;
        this.valFixedRows = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B fixedRows(java.lang.Integer... value)
    {
        this.hasFixedRows = true;
        this.valFixedRows = java.util.Arrays.asList(value);
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B fixingColumnsAllowed(boolean value)
    {
        this.hasFixingColumnsAllowed = true;
        this.valFixingColumnsAllowed = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B fixingRowsAllowed(boolean value)
    {
        this.hasFixingRowsAllowed = true;
        this.valFixingRowsAllowed = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B grid(org.controlsfx.control.spreadsheet.Grid value)
    {
        this.hasGrid = true;
        this.valGrid = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B rowPickerCallback(javafx.util.Callback<java.lang.Integer, java.lang.Void> value)
    {
        this.hasRowPickerCallback = true;
        this.valRowPickerCallback = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B rowPickers(java.util.Collection<java.lang.Integer> value)
    {
        this.hasRowPickers = true;
        this.valRowPickers = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B rowPickers(java.lang.Integer... value)
    {
        this.hasRowPickers = true;
        this.valRowPickers = java.util.Arrays.asList(value);
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B showColumnHeader(boolean value)
    {
        this.hasShowColumnHeader = true;
        this.valShowColumnHeader = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B showRowHeader(boolean value)
    {
        this.hasShowRowHeader = true;
        this.valShowRowHeader = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindEditable(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundEditable = true;
        this.obsrvEditable = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindShowColumnHeader(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundShowColumnHeader = true;
        this.obsrvShowColumnHeader = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindShowRowHeader(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundShowRowHeader = true;
        this.obsrvShowRowHeader = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SpreadsheetView build()
    {
        SpreadsheetView instance = new SpreadsheetView();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
