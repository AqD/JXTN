// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package org.controlsfx.control.action;

/**
 * {@link ActionGroup}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version controlsfx-8.0.6.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class ActionGroupBuilder<Z extends ActionGroup, B extends ActionGroupBuilder<Z, B>>
        extends org.controlsfx.control.action.AbstractActionBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasActions;
    protected java.util.Collection<org.controlsfx.control.action.Action> valActions;
    public void applyTo(ActionGroup instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasActions)
            instance.getActions().setAll(this.valActions);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B actions(java.util.Collection<org.controlsfx.control.action.Action> value)
    {
        this.hasActions = true;
        this.valActions = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B actions(org.controlsfx.control.action.Action... value)
    {
        this.hasActions = true;
        this.valActions = java.util.Arrays.asList(value);
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public ActionGroup build(java.lang.String arg0, java.util.Collection<org.controlsfx.control.action.Action> arg1)
    {
        ActionGroup instance = new ActionGroup(arg0, arg1);
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
