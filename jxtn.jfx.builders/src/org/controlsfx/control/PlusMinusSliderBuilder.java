// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package org.controlsfx.control;

/**
 * {@link PlusMinusSlider}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version controlsfx-8.0.6_20.jar
 * @param <Z> 要建構的物件型態(需繼承{@link PlusMinusSlider})
 * @param <B> 建構器本身的型態(需繼承{@link PlusMinusSliderBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class PlusMinusSliderBuilder<Z extends PlusMinusSlider, B extends PlusMinusSliderBuilder<Z, B>>
        extends javafx.scene.control.ControlBuilder<Z, B>
{

    private boolean hasOnValueChanged;
    private javafx.event.EventHandler<org.controlsfx.control.PlusMinusSlider.PlusMinusEvent> valOnValueChanged;

    private boolean hasOrientation;
    private javafx.geometry.Orientation valOrientation;

    private boolean boundOnValueChanged;
    private javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<org.controlsfx.control.PlusMinusSlider.PlusMinusEvent>> obsrvOnValueChanged;

    private boolean boundOrientation;
    private javafx.beans.value.ObservableValue<? extends javafx.geometry.Orientation> obsrvOrientation;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasOnValueChanged)
            instance.setOnValueChanged(this.valOnValueChanged);
        if (this.hasOrientation)
            instance.setOrientation(this.valOrientation);
        if (this.boundOnValueChanged)
            instance.onValueChangedProperty().bind(this.obsrvOnValueChanged);
        if (this.boundOrientation)
            instance.orientationProperty().bind(this.obsrvOrientation);
    }

    /**
     * 設定屬性{@link PlusMinusSlider#setOnValueChanged(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onValueChanged(javafx.event.EventHandler<org.controlsfx.control.PlusMinusSlider.PlusMinusEvent> value)
    {
        this.hasOnValueChanged = true;
        this.valOnValueChanged = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PlusMinusSlider#setOrientation(javafx.geometry.Orientation)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B orientation(javafx.geometry.Orientation value)
    {
        this.hasOrientation = true;
        this.valOrientation = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PlusMinusSlider#onValueChangedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnValueChanged(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<org.controlsfx.control.PlusMinusSlider.PlusMinusEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnValueChanged = true;
        this.obsrvOnValueChanged = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PlusMinusSlider#orientationProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOrientation(javafx.beans.value.ObservableValue<? extends javafx.geometry.Orientation> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOrientation = true;
        this.obsrvOrientation = source;
        return (B) this;
    }

    /**
     * 建構{@link PlusMinusSlider}物件
     *
     * @return 新的{@link PlusMinusSlider}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public PlusMinusSlider build()
    {
        PlusMinusSlider instance = new PlusMinusSlider();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
