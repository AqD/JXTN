// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package org.controlsfx.control;

/**
 * {@link InfoOverlay}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version controlsfx-8.0.6.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class InfoOverlayBuilder<Z extends InfoOverlay, B extends InfoOverlayBuilder<Z, B>>
        extends javafx.scene.control.ControlBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasContent;
    protected javafx.scene.Node valContent;

    protected boolean hasShowOnHover;
    protected boolean valShowOnHover;

    protected boolean hasText;
    protected java.lang.String valText;

    protected boolean boundContent;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrvContent;

    protected boolean boundShowOnHover;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvShowOnHover;

    protected boolean boundText;
    protected javafx.beans.value.ObservableValue<? extends String> obsrvText;
    public void applyTo(InfoOverlay instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasContent)
            instance.setContent(this.valContent);
        if (this.hasShowOnHover)
            instance.setShowOnHover(this.valShowOnHover);
        if (this.hasText)
            instance.setText(this.valText);
        if (this.boundContent)
            instance.contentProperty().bind(this.obsrvContent);
        if (this.boundShowOnHover)
            instance.showOnHoverProperty().bind(this.obsrvShowOnHover);
        if (this.boundText)
            instance.textProperty().bind(this.obsrvText);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B content(javafx.scene.Node value)
    {
        this.hasContent = true;
        this.valContent = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B showOnHover(boolean value)
    {
        this.hasShowOnHover = true;
        this.valShowOnHover = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B text(java.lang.String value)
    {
        this.hasText = true;
        this.valText = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindContent(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        assert (source != null);
        this.boundContent = true;
        this.obsrvContent = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindShowOnHover(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundShowOnHover = true;
        this.obsrvShowOnHover = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindText(javafx.beans.value.ObservableValue<? extends String> source)
    {
        assert (source != null);
        this.boundText = true;
        this.obsrvText = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public InfoOverlay build()
    {
        InfoOverlay instance = new InfoOverlay();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
