// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package org.controlsfx.control;

/**
 * {@link HyperlinkLabel}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version controlsfx-8.0.6_20.jar
 * @param <Z> 要建構的物件型態(需繼承{@link HyperlinkLabel})
 * @param <B> 建構器本身的型態(需繼承{@link HyperlinkLabelBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class HyperlinkLabelBuilder<Z extends HyperlinkLabel, B extends HyperlinkLabelBuilder<Z, B>>
        extends javafx.scene.control.ControlBuilder<Z, B>
{

    private boolean hasOnAction;
    private javafx.event.EventHandler<javafx.event.ActionEvent> valOnAction;

    private boolean hasText;
    private java.lang.String valText;

    private boolean boundOnAction;
    private javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.event.ActionEvent>> obsrvOnAction;

    private boolean boundText;
    private javafx.beans.value.ObservableValue<? extends String> obsrvText;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasOnAction)
            instance.setOnAction(this.valOnAction);
        if (this.hasText)
            instance.setText(this.valText);
        if (this.boundOnAction)
            instance.onActionProperty().bind(this.obsrvOnAction);
        if (this.boundText)
            instance.textProperty().bind(this.obsrvText);
    }

    /**
     * 設定屬性{@link HyperlinkLabel#setOnAction(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onAction(javafx.event.EventHandler<javafx.event.ActionEvent> value)
    {
        this.hasOnAction = true;
        this.valOnAction = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link HyperlinkLabel#setText(java.lang.String)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B text(java.lang.String value)
    {
        this.hasText = true;
        this.valText = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link HyperlinkLabel#onActionProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnAction(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.event.ActionEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnAction = true;
        this.obsrvOnAction = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link HyperlinkLabel#textProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindText(javafx.beans.value.ObservableValue<? extends String> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundText = true;
        this.obsrvText = source;
        return (B) this;
    }

    /**
     * 建構{@link HyperlinkLabel}物件
     *
     * @return 新的{@link HyperlinkLabel}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public HyperlinkLabel build()
    {
        HyperlinkLabel instance = new HyperlinkLabel();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
