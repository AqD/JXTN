// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package org.controlsfx.control;

/**
 * {@link RangeSlider}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version controlsfx-8.0.6_20.jar
 * @param <Z> 要建構的物件型態(需繼承{@link RangeSlider})
 * @param <B> 建構器本身的型態(需繼承{@link RangeSliderBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class RangeSliderBuilder<Z extends RangeSlider, B extends RangeSliderBuilder<Z, B>>
        extends javafx.scene.control.ControlBuilder<Z, B>
{

    private boolean hasBlockIncrement;
    private double valBlockIncrement;

    private boolean hasHighValue;
    private double valHighValue;

    private boolean hasHighValueChanging;
    private boolean valHighValueChanging;

    private boolean hasLowValue;
    private double valLowValue;

    private boolean hasLowValueChanging;
    private boolean valLowValueChanging;

    private boolean hasMajorTickUnit;
    private double valMajorTickUnit;

    private boolean hasMax;
    private double valMax;

    private boolean hasMin;
    private double valMin;

    private boolean hasMinorTickCount;
    private int valMinorTickCount;

    private boolean hasOrientation;
    private javafx.geometry.Orientation valOrientation;

    private boolean hasShowTickLabels;
    private boolean valShowTickLabels;

    private boolean hasShowTickMarks;
    private boolean valShowTickMarks;

    private boolean hasSnapToTicks;
    private boolean valSnapToTicks;

    private boolean boundBlockIncrement;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvBlockIncrement;

    private boolean boundHighValueChanging;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrvHighValueChanging;

    private boolean boundHighValue;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvHighValue;

    private boolean boundLowValueChanging;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrvLowValueChanging;

    private boolean boundLowValue;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvLowValue;

    private boolean boundMajorTickUnit;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvMajorTickUnit;

    private boolean boundMax;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvMax;

    private boolean boundMin;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvMin;

    private boolean boundMinorTickCount;
    private javafx.beans.value.ObservableValue<? extends Integer> obsrvMinorTickCount;

    private boolean boundOrientation;
    private javafx.beans.value.ObservableValue<? extends javafx.geometry.Orientation> obsrvOrientation;

    private boolean boundShowTickLabels;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrvShowTickLabels;

    private boolean boundShowTickMarks;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrvShowTickMarks;

    private boolean boundSnapToTicks;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrvSnapToTicks;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasBlockIncrement)
            instance.setBlockIncrement(this.valBlockIncrement);
        if (this.hasHighValue)
            instance.setHighValue(this.valHighValue);
        if (this.hasHighValueChanging)
            instance.setHighValueChanging(this.valHighValueChanging);
        if (this.hasLowValue)
            instance.setLowValue(this.valLowValue);
        if (this.hasLowValueChanging)
            instance.setLowValueChanging(this.valLowValueChanging);
        if (this.hasMajorTickUnit)
            instance.setMajorTickUnit(this.valMajorTickUnit);
        if (this.hasMax)
            instance.setMax(this.valMax);
        if (this.hasMin)
            instance.setMin(this.valMin);
        if (this.hasMinorTickCount)
            instance.setMinorTickCount(this.valMinorTickCount);
        if (this.hasOrientation)
            instance.setOrientation(this.valOrientation);
        if (this.hasShowTickLabels)
            instance.setShowTickLabels(this.valShowTickLabels);
        if (this.hasShowTickMarks)
            instance.setShowTickMarks(this.valShowTickMarks);
        if (this.hasSnapToTicks)
            instance.setSnapToTicks(this.valSnapToTicks);
        if (this.boundBlockIncrement)
            instance.blockIncrementProperty().bind(this.obsrvBlockIncrement);
        if (this.boundHighValueChanging)
            instance.highValueChangingProperty().bind(this.obsrvHighValueChanging);
        if (this.boundHighValue)
            instance.highValueProperty().bind(this.obsrvHighValue);
        if (this.boundLowValueChanging)
            instance.lowValueChangingProperty().bind(this.obsrvLowValueChanging);
        if (this.boundLowValue)
            instance.lowValueProperty().bind(this.obsrvLowValue);
        if (this.boundMajorTickUnit)
            instance.majorTickUnitProperty().bind(this.obsrvMajorTickUnit);
        if (this.boundMax)
            instance.maxProperty().bind(this.obsrvMax);
        if (this.boundMin)
            instance.minProperty().bind(this.obsrvMin);
        if (this.boundMinorTickCount)
            instance.minorTickCountProperty().bind(this.obsrvMinorTickCount);
        if (this.boundOrientation)
            instance.orientationProperty().bind(this.obsrvOrientation);
        if (this.boundShowTickLabels)
            instance.showTickLabelsProperty().bind(this.obsrvShowTickLabels);
        if (this.boundShowTickMarks)
            instance.showTickMarksProperty().bind(this.obsrvShowTickMarks);
        if (this.boundSnapToTicks)
            instance.snapToTicksProperty().bind(this.obsrvSnapToTicks);
    }

    /**
     * 設定屬性{@link RangeSlider#setBlockIncrement(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B blockIncrement(double value)
    {
        this.hasBlockIncrement = true;
        this.valBlockIncrement = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#setHighValue(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B highValue(double value)
    {
        this.hasHighValue = true;
        this.valHighValue = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#setHighValueChanging(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B highValueChanging(boolean value)
    {
        this.hasHighValueChanging = true;
        this.valHighValueChanging = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#setLowValue(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B lowValue(double value)
    {
        this.hasLowValue = true;
        this.valLowValue = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#setLowValueChanging(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B lowValueChanging(boolean value)
    {
        this.hasLowValueChanging = true;
        this.valLowValueChanging = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#setMajorTickUnit(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B majorTickUnit(double value)
    {
        this.hasMajorTickUnit = true;
        this.valMajorTickUnit = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#setMax(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B max(double value)
    {
        this.hasMax = true;
        this.valMax = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#setMin(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B min(double value)
    {
        this.hasMin = true;
        this.valMin = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#setMinorTickCount(int)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B minorTickCount(int value)
    {
        this.hasMinorTickCount = true;
        this.valMinorTickCount = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#setOrientation(javafx.geometry.Orientation)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B orientation(javafx.geometry.Orientation value)
    {
        this.hasOrientation = true;
        this.valOrientation = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#setShowTickLabels(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B showTickLabels(boolean value)
    {
        this.hasShowTickLabels = true;
        this.valShowTickLabels = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#setShowTickMarks(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B showTickMarks(boolean value)
    {
        this.hasShowTickMarks = true;
        this.valShowTickMarks = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#setSnapToTicks(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B snapToTicks(boolean value)
    {
        this.hasSnapToTicks = true;
        this.valSnapToTicks = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#blockIncrementProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBlockIncrement(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundBlockIncrement = true;
        this.obsrvBlockIncrement = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#highValueChangingProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindHighValueChanging(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundHighValueChanging = true;
        this.obsrvHighValueChanging = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#highValueProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindHighValue(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundHighValue = true;
        this.obsrvHighValue = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#lowValueChangingProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindLowValueChanging(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundLowValueChanging = true;
        this.obsrvLowValueChanging = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#lowValueProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindLowValue(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundLowValue = true;
        this.obsrvLowValue = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#majorTickUnitProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMajorTickUnit(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundMajorTickUnit = true;
        this.obsrvMajorTickUnit = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#maxProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMax(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundMax = true;
        this.obsrvMax = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#minProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMin(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundMin = true;
        this.obsrvMin = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#minorTickCountProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMinorTickCount(javafx.beans.value.ObservableValue<? extends Integer> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundMinorTickCount = true;
        this.obsrvMinorTickCount = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#orientationProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOrientation(javafx.beans.value.ObservableValue<? extends javafx.geometry.Orientation> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOrientation = true;
        this.obsrvOrientation = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#showTickLabelsProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindShowTickLabels(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundShowTickLabels = true;
        this.obsrvShowTickLabels = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#showTickMarksProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindShowTickMarks(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundShowTickMarks = true;
        this.obsrvShowTickMarks = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link RangeSlider#snapToTicksProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindSnapToTicks(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundSnapToTicks = true;
        this.obsrvSnapToTicks = source;
        return (B) this;
    }

    /**
     * 建構{@link RangeSlider}物件
     *
     * @return 新的{@link RangeSlider}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public RangeSlider build()
    {
        RangeSlider instance = new RangeSlider();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
