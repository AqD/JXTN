// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package org.controlsfx.control;

/**
 * {@link CheckTreeView}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version controlsfx-8.0.6.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class CheckTreeViewBuilder<T extends java.lang.Object, Z extends CheckTreeView<T>, B extends CheckTreeViewBuilder<T, Z, B>>
        extends javafx.scene.control.TreeViewBuilder<T, Z, B>
{
    private boolean applied;

    protected boolean hasCheckModel;
    protected javafx.scene.control.MultipleSelectionModel<javafx.scene.control.TreeItem<T>> valCheckModel;

    protected boolean boundCheckModel;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.control.MultipleSelectionModel<javafx.scene.control.TreeItem<T>>> obsrvCheckModel;
    public void applyTo(CheckTreeView<T> instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasCheckModel)
            instance.setCheckModel(this.valCheckModel);
        if (this.boundCheckModel)
            instance.checkModelProperty().bind(this.obsrvCheckModel);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B checkModel(javafx.scene.control.MultipleSelectionModel<javafx.scene.control.TreeItem<T>> value)
    {
        this.hasCheckModel = true;
        this.valCheckModel = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindCheckModel(javafx.beans.value.ObservableValue<? extends javafx.scene.control.MultipleSelectionModel<javafx.scene.control.TreeItem<T>>> source)
    {
        assert (source != null);
        this.boundCheckModel = true;
        this.obsrvCheckModel = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CheckTreeView<T> build()
    {
        CheckTreeView<T> instance = new CheckTreeView<T>();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
