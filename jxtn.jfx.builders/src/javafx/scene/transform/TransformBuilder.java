// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.transform;

/**
 * {@link Transform}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class TransformBuilder<Z extends Transform, B extends TransformBuilder<Z, B>>
        extends jxtn.jfx.builders.AbstractBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasOnTransformChanged;
    protected javafx.event.EventHandler<? super javafx.scene.transform.TransformChangedEvent> valOnTransformChanged;

    protected boolean boundOnTransformChanged;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.transform.TransformChangedEvent>> obsrvOnTransformChanged;
    public void applyTo(Transform instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasOnTransformChanged)
            instance.setOnTransformChanged(this.valOnTransformChanged);
        if (this.boundOnTransformChanged)
            instance.onTransformChangedProperty().bind(this.obsrvOnTransformChanged);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B onTransformChanged(javafx.event.EventHandler<? super javafx.scene.transform.TransformChangedEvent> value)
    {
        this.hasOnTransformChanged = true;
        this.valOnTransformChanged = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindOnTransformChanged(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.transform.TransformChangedEvent>> source)
    {
        assert (source != null);
        this.boundOnTransformChanged = true;
        this.obsrvOnTransformChanged = source;
        return (B) this;
    }
}
