// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene;

/**
 * {@link Scene}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class SceneBuilder<Z extends Scene, B extends SceneBuilder<Z, B>>
        extends jxtn.jfx.builders.AbstractBuilder<Z, B>
{

    protected boolean hasCamera;
    protected javafx.scene.Camera valCamera;

    protected boolean hasCursor;
    protected javafx.scene.Cursor valCursor;

    protected boolean hasEventDispatcher;
    protected javafx.event.EventDispatcher valEventDispatcher;

    protected boolean hasFill;
    protected javafx.scene.paint.Paint valFill;

    protected boolean hasNodeOrientation;
    protected javafx.geometry.NodeOrientation valNodeOrientation;

    protected boolean hasOnContextMenuRequested;
    protected javafx.event.EventHandler<? super javafx.scene.input.ContextMenuEvent> valOnContextMenuRequested;

    protected boolean hasOnDragDetected;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> valOnDragDetected;

    protected boolean hasOnDragDone;
    protected javafx.event.EventHandler<? super javafx.scene.input.DragEvent> valOnDragDone;

    protected boolean hasOnDragDropped;
    protected javafx.event.EventHandler<? super javafx.scene.input.DragEvent> valOnDragDropped;

    protected boolean hasOnDragEntered;
    protected javafx.event.EventHandler<? super javafx.scene.input.DragEvent> valOnDragEntered;

    protected boolean hasOnDragExited;
    protected javafx.event.EventHandler<? super javafx.scene.input.DragEvent> valOnDragExited;

    protected boolean hasOnDragOver;
    protected javafx.event.EventHandler<? super javafx.scene.input.DragEvent> valOnDragOver;

    protected boolean hasOnInputMethodTextChanged;
    protected javafx.event.EventHandler<? super javafx.scene.input.InputMethodEvent> valOnInputMethodTextChanged;

    protected boolean hasOnKeyPressed;
    protected javafx.event.EventHandler<? super javafx.scene.input.KeyEvent> valOnKeyPressed;

    protected boolean hasOnKeyReleased;
    protected javafx.event.EventHandler<? super javafx.scene.input.KeyEvent> valOnKeyReleased;

    protected boolean hasOnKeyTyped;
    protected javafx.event.EventHandler<? super javafx.scene.input.KeyEvent> valOnKeyTyped;

    protected boolean hasOnMouseClicked;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> valOnMouseClicked;

    protected boolean hasOnMouseDragEntered;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent> valOnMouseDragEntered;

    protected boolean hasOnMouseDragExited;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent> valOnMouseDragExited;

    protected boolean hasOnMouseDragOver;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent> valOnMouseDragOver;

    protected boolean hasOnMouseDragReleased;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent> valOnMouseDragReleased;

    protected boolean hasOnMouseDragged;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> valOnMouseDragged;

    protected boolean hasOnMouseEntered;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> valOnMouseEntered;

    protected boolean hasOnMouseExited;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> valOnMouseExited;

    protected boolean hasOnMouseMoved;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> valOnMouseMoved;

    protected boolean hasOnMousePressed;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> valOnMousePressed;

    protected boolean hasOnMouseReleased;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> valOnMouseReleased;

    protected boolean hasOnRotate;
    protected javafx.event.EventHandler<? super javafx.scene.input.RotateEvent> valOnRotate;

    protected boolean hasOnRotationFinished;
    protected javafx.event.EventHandler<? super javafx.scene.input.RotateEvent> valOnRotationFinished;

    protected boolean hasOnRotationStarted;
    protected javafx.event.EventHandler<? super javafx.scene.input.RotateEvent> valOnRotationStarted;

    protected boolean hasOnScroll;
    protected javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent> valOnScroll;

    protected boolean hasOnScrollFinished;
    protected javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent> valOnScrollFinished;

    protected boolean hasOnScrollStarted;
    protected javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent> valOnScrollStarted;

    protected boolean hasOnSwipeDown;
    protected javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent> valOnSwipeDown;

    protected boolean hasOnSwipeLeft;
    protected javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent> valOnSwipeLeft;

    protected boolean hasOnSwipeRight;
    protected javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent> valOnSwipeRight;

    protected boolean hasOnSwipeUp;
    protected javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent> valOnSwipeUp;

    protected boolean hasOnTouchMoved;
    protected javafx.event.EventHandler<? super javafx.scene.input.TouchEvent> valOnTouchMoved;

    protected boolean hasOnTouchPressed;
    protected javafx.event.EventHandler<? super javafx.scene.input.TouchEvent> valOnTouchPressed;

    protected boolean hasOnTouchReleased;
    protected javafx.event.EventHandler<? super javafx.scene.input.TouchEvent> valOnTouchReleased;

    protected boolean hasOnTouchStationary;
    protected javafx.event.EventHandler<? super javafx.scene.input.TouchEvent> valOnTouchStationary;

    protected boolean hasOnZoom;
    protected javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent> valOnZoom;

    protected boolean hasOnZoomFinished;
    protected javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent> valOnZoomFinished;

    protected boolean hasOnZoomStarted;
    protected javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent> valOnZoomStarted;

    protected boolean hasRoot;
    protected javafx.scene.Parent valRoot;

    protected boolean hasStylesheets;
    protected java.util.Collection<java.lang.String> valStylesheets;

    protected boolean hasUserAgentStylesheet;
    protected java.lang.String valUserAgentStylesheet;

    protected boolean boundCamera;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.Camera> obsrvCamera;

    protected boolean boundCursor;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.Cursor> obsrvCursor;

    protected boolean boundEventDispatcher;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventDispatcher> obsrvEventDispatcher;

    protected boolean boundFill;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.paint.Paint> obsrvFill;

    protected boolean boundNodeOrientation;
    protected javafx.beans.value.ObservableValue<? extends javafx.geometry.NodeOrientation> obsrvNodeOrientation;

    protected boolean boundOnContextMenuRequested;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ContextMenuEvent>> obsrvOnContextMenuRequested;

    protected boolean boundOnDragDetected;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> obsrvOnDragDetected;

    protected boolean boundOnDragDone;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.DragEvent>> obsrvOnDragDone;

    protected boolean boundOnDragDropped;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.DragEvent>> obsrvOnDragDropped;

    protected boolean boundOnDragEntered;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.DragEvent>> obsrvOnDragEntered;

    protected boolean boundOnDragExited;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.DragEvent>> obsrvOnDragExited;

    protected boolean boundOnDragOver;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.DragEvent>> obsrvOnDragOver;

    protected boolean boundOnInputMethodTextChanged;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.InputMethodEvent>> obsrvOnInputMethodTextChanged;

    protected boolean boundOnKeyPressed;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.KeyEvent>> obsrvOnKeyPressed;

    protected boolean boundOnKeyReleased;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.KeyEvent>> obsrvOnKeyReleased;

    protected boolean boundOnKeyTyped;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.KeyEvent>> obsrvOnKeyTyped;

    protected boolean boundOnMouseClicked;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> obsrvOnMouseClicked;

    protected boolean boundOnMouseDragEntered;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent>> obsrvOnMouseDragEntered;

    protected boolean boundOnMouseDragExited;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent>> obsrvOnMouseDragExited;

    protected boolean boundOnMouseDragOver;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent>> obsrvOnMouseDragOver;

    protected boolean boundOnMouseDragReleased;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent>> obsrvOnMouseDragReleased;

    protected boolean boundOnMouseDragged;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> obsrvOnMouseDragged;

    protected boolean boundOnMouseEntered;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> obsrvOnMouseEntered;

    protected boolean boundOnMouseExited;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> obsrvOnMouseExited;

    protected boolean boundOnMouseMoved;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> obsrvOnMouseMoved;

    protected boolean boundOnMousePressed;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> obsrvOnMousePressed;

    protected boolean boundOnMouseReleased;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> obsrvOnMouseReleased;

    protected boolean boundOnRotate;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.RotateEvent>> obsrvOnRotate;

    protected boolean boundOnRotationFinished;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.RotateEvent>> obsrvOnRotationFinished;

    protected boolean boundOnRotationStarted;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.RotateEvent>> obsrvOnRotationStarted;

    protected boolean boundOnScrollFinished;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent>> obsrvOnScrollFinished;

    protected boolean boundOnScroll;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent>> obsrvOnScroll;

    protected boolean boundOnScrollStarted;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent>> obsrvOnScrollStarted;

    protected boolean boundOnSwipeDown;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent>> obsrvOnSwipeDown;

    protected boolean boundOnSwipeLeft;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent>> obsrvOnSwipeLeft;

    protected boolean boundOnSwipeRight;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent>> obsrvOnSwipeRight;

    protected boolean boundOnSwipeUp;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent>> obsrvOnSwipeUp;

    protected boolean boundOnTouchMoved;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.TouchEvent>> obsrvOnTouchMoved;

    protected boolean boundOnTouchPressed;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.TouchEvent>> obsrvOnTouchPressed;

    protected boolean boundOnTouchReleased;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.TouchEvent>> obsrvOnTouchReleased;

    protected boolean boundOnTouchStationary;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.TouchEvent>> obsrvOnTouchStationary;

    protected boolean boundOnZoomFinished;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent>> obsrvOnZoomFinished;

    protected boolean boundOnZoom;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent>> obsrvOnZoom;

    protected boolean boundOnZoomStarted;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent>> obsrvOnZoomStarted;

    protected boolean boundRoot;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.Parent> obsrvRoot;

    protected boolean boundUserAgentStylesheet;
    protected javafx.beans.value.ObservableValue<? extends java.lang.String> obsrvUserAgentStylesheet;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasCamera)
            instance.setCamera(this.valCamera);
        if (this.hasCursor)
            instance.setCursor(this.valCursor);
        if (this.hasEventDispatcher)
            instance.setEventDispatcher(this.valEventDispatcher);
        if (this.hasFill)
            instance.setFill(this.valFill);
        if (this.hasNodeOrientation)
            instance.setNodeOrientation(this.valNodeOrientation);
        if (this.hasOnContextMenuRequested)
            instance.setOnContextMenuRequested(this.valOnContextMenuRequested);
        if (this.hasOnDragDetected)
            instance.setOnDragDetected(this.valOnDragDetected);
        if (this.hasOnDragDone)
            instance.setOnDragDone(this.valOnDragDone);
        if (this.hasOnDragDropped)
            instance.setOnDragDropped(this.valOnDragDropped);
        if (this.hasOnDragEntered)
            instance.setOnDragEntered(this.valOnDragEntered);
        if (this.hasOnDragExited)
            instance.setOnDragExited(this.valOnDragExited);
        if (this.hasOnDragOver)
            instance.setOnDragOver(this.valOnDragOver);
        if (this.hasOnInputMethodTextChanged)
            instance.setOnInputMethodTextChanged(this.valOnInputMethodTextChanged);
        if (this.hasOnKeyPressed)
            instance.setOnKeyPressed(this.valOnKeyPressed);
        if (this.hasOnKeyReleased)
            instance.setOnKeyReleased(this.valOnKeyReleased);
        if (this.hasOnKeyTyped)
            instance.setOnKeyTyped(this.valOnKeyTyped);
        if (this.hasOnMouseClicked)
            instance.setOnMouseClicked(this.valOnMouseClicked);
        if (this.hasOnMouseDragEntered)
            instance.setOnMouseDragEntered(this.valOnMouseDragEntered);
        if (this.hasOnMouseDragExited)
            instance.setOnMouseDragExited(this.valOnMouseDragExited);
        if (this.hasOnMouseDragOver)
            instance.setOnMouseDragOver(this.valOnMouseDragOver);
        if (this.hasOnMouseDragReleased)
            instance.setOnMouseDragReleased(this.valOnMouseDragReleased);
        if (this.hasOnMouseDragged)
            instance.setOnMouseDragged(this.valOnMouseDragged);
        if (this.hasOnMouseEntered)
            instance.setOnMouseEntered(this.valOnMouseEntered);
        if (this.hasOnMouseExited)
            instance.setOnMouseExited(this.valOnMouseExited);
        if (this.hasOnMouseMoved)
            instance.setOnMouseMoved(this.valOnMouseMoved);
        if (this.hasOnMousePressed)
            instance.setOnMousePressed(this.valOnMousePressed);
        if (this.hasOnMouseReleased)
            instance.setOnMouseReleased(this.valOnMouseReleased);
        if (this.hasOnRotate)
            instance.setOnRotate(this.valOnRotate);
        if (this.hasOnRotationFinished)
            instance.setOnRotationFinished(this.valOnRotationFinished);
        if (this.hasOnRotationStarted)
            instance.setOnRotationStarted(this.valOnRotationStarted);
        if (this.hasOnScroll)
            instance.setOnScroll(this.valOnScroll);
        if (this.hasOnScrollFinished)
            instance.setOnScrollFinished(this.valOnScrollFinished);
        if (this.hasOnScrollStarted)
            instance.setOnScrollStarted(this.valOnScrollStarted);
        if (this.hasOnSwipeDown)
            instance.setOnSwipeDown(this.valOnSwipeDown);
        if (this.hasOnSwipeLeft)
            instance.setOnSwipeLeft(this.valOnSwipeLeft);
        if (this.hasOnSwipeRight)
            instance.setOnSwipeRight(this.valOnSwipeRight);
        if (this.hasOnSwipeUp)
            instance.setOnSwipeUp(this.valOnSwipeUp);
        if (this.hasOnTouchMoved)
            instance.setOnTouchMoved(this.valOnTouchMoved);
        if (this.hasOnTouchPressed)
            instance.setOnTouchPressed(this.valOnTouchPressed);
        if (this.hasOnTouchReleased)
            instance.setOnTouchReleased(this.valOnTouchReleased);
        if (this.hasOnTouchStationary)
            instance.setOnTouchStationary(this.valOnTouchStationary);
        if (this.hasOnZoom)
            instance.setOnZoom(this.valOnZoom);
        if (this.hasOnZoomFinished)
            instance.setOnZoomFinished(this.valOnZoomFinished);
        if (this.hasOnZoomStarted)
            instance.setOnZoomStarted(this.valOnZoomStarted);
        if (this.hasRoot)
            instance.setRoot(this.valRoot);
        if (this.hasStylesheets)
            instance.getStylesheets().setAll(this.valStylesheets);
        if (this.hasUserAgentStylesheet)
            instance.setUserAgentStylesheet(this.valUserAgentStylesheet);
        if (this.boundCamera)
            instance.cameraProperty().bind(this.obsrvCamera);
        if (this.boundCursor)
            instance.cursorProperty().bind(this.obsrvCursor);
        if (this.boundEventDispatcher)
            instance.eventDispatcherProperty().bind(this.obsrvEventDispatcher);
        if (this.boundFill)
            instance.fillProperty().bind(this.obsrvFill);
        if (this.boundNodeOrientation)
            instance.nodeOrientationProperty().bind(this.obsrvNodeOrientation);
        if (this.boundOnContextMenuRequested)
            instance.onContextMenuRequestedProperty().bind(this.obsrvOnContextMenuRequested);
        if (this.boundOnDragDetected)
            instance.onDragDetectedProperty().bind(this.obsrvOnDragDetected);
        if (this.boundOnDragDone)
            instance.onDragDoneProperty().bind(this.obsrvOnDragDone);
        if (this.boundOnDragDropped)
            instance.onDragDroppedProperty().bind(this.obsrvOnDragDropped);
        if (this.boundOnDragEntered)
            instance.onDragEnteredProperty().bind(this.obsrvOnDragEntered);
        if (this.boundOnDragExited)
            instance.onDragExitedProperty().bind(this.obsrvOnDragExited);
        if (this.boundOnDragOver)
            instance.onDragOverProperty().bind(this.obsrvOnDragOver);
        if (this.boundOnInputMethodTextChanged)
            instance.onInputMethodTextChangedProperty().bind(this.obsrvOnInputMethodTextChanged);
        if (this.boundOnKeyPressed)
            instance.onKeyPressedProperty().bind(this.obsrvOnKeyPressed);
        if (this.boundOnKeyReleased)
            instance.onKeyReleasedProperty().bind(this.obsrvOnKeyReleased);
        if (this.boundOnKeyTyped)
            instance.onKeyTypedProperty().bind(this.obsrvOnKeyTyped);
        if (this.boundOnMouseClicked)
            instance.onMouseClickedProperty().bind(this.obsrvOnMouseClicked);
        if (this.boundOnMouseDragEntered)
            instance.onMouseDragEnteredProperty().bind(this.obsrvOnMouseDragEntered);
        if (this.boundOnMouseDragExited)
            instance.onMouseDragExitedProperty().bind(this.obsrvOnMouseDragExited);
        if (this.boundOnMouseDragOver)
            instance.onMouseDragOverProperty().bind(this.obsrvOnMouseDragOver);
        if (this.boundOnMouseDragReleased)
            instance.onMouseDragReleasedProperty().bind(this.obsrvOnMouseDragReleased);
        if (this.boundOnMouseDragged)
            instance.onMouseDraggedProperty().bind(this.obsrvOnMouseDragged);
        if (this.boundOnMouseEntered)
            instance.onMouseEnteredProperty().bind(this.obsrvOnMouseEntered);
        if (this.boundOnMouseExited)
            instance.onMouseExitedProperty().bind(this.obsrvOnMouseExited);
        if (this.boundOnMouseMoved)
            instance.onMouseMovedProperty().bind(this.obsrvOnMouseMoved);
        if (this.boundOnMousePressed)
            instance.onMousePressedProperty().bind(this.obsrvOnMousePressed);
        if (this.boundOnMouseReleased)
            instance.onMouseReleasedProperty().bind(this.obsrvOnMouseReleased);
        if (this.boundOnRotate)
            instance.onRotateProperty().bind(this.obsrvOnRotate);
        if (this.boundOnRotationFinished)
            instance.onRotationFinishedProperty().bind(this.obsrvOnRotationFinished);
        if (this.boundOnRotationStarted)
            instance.onRotationStartedProperty().bind(this.obsrvOnRotationStarted);
        if (this.boundOnScrollFinished)
            instance.onScrollFinishedProperty().bind(this.obsrvOnScrollFinished);
        if (this.boundOnScroll)
            instance.onScrollProperty().bind(this.obsrvOnScroll);
        if (this.boundOnScrollStarted)
            instance.onScrollStartedProperty().bind(this.obsrvOnScrollStarted);
        if (this.boundOnSwipeDown)
            instance.onSwipeDownProperty().bind(this.obsrvOnSwipeDown);
        if (this.boundOnSwipeLeft)
            instance.onSwipeLeftProperty().bind(this.obsrvOnSwipeLeft);
        if (this.boundOnSwipeRight)
            instance.onSwipeRightProperty().bind(this.obsrvOnSwipeRight);
        if (this.boundOnSwipeUp)
            instance.onSwipeUpProperty().bind(this.obsrvOnSwipeUp);
        if (this.boundOnTouchMoved)
            instance.onTouchMovedProperty().bind(this.obsrvOnTouchMoved);
        if (this.boundOnTouchPressed)
            instance.onTouchPressedProperty().bind(this.obsrvOnTouchPressed);
        if (this.boundOnTouchReleased)
            instance.onTouchReleasedProperty().bind(this.obsrvOnTouchReleased);
        if (this.boundOnTouchStationary)
            instance.onTouchStationaryProperty().bind(this.obsrvOnTouchStationary);
        if (this.boundOnZoomFinished)
            instance.onZoomFinishedProperty().bind(this.obsrvOnZoomFinished);
        if (this.boundOnZoom)
            instance.onZoomProperty().bind(this.obsrvOnZoom);
        if (this.boundOnZoomStarted)
            instance.onZoomStartedProperty().bind(this.obsrvOnZoomStarted);
        if (this.boundRoot)
            instance.rootProperty().bind(this.obsrvRoot);
        if (this.boundUserAgentStylesheet)
            instance.userAgentStylesheetProperty().bind(this.obsrvUserAgentStylesheet);
    }

    /**
     * 設定屬性{@link Scene#setCamera(javafx.scene.Camera)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B camera(javafx.scene.Camera value)
    {
        this.hasCamera = true;
        this.valCamera = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setCursor(javafx.scene.Cursor)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B cursor(javafx.scene.Cursor value)
    {
        this.hasCursor = true;
        this.valCursor = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setEventDispatcher(javafx.event.EventDispatcher)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B eventDispatcher(javafx.event.EventDispatcher value)
    {
        this.hasEventDispatcher = true;
        this.valEventDispatcher = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setFill(javafx.scene.paint.Paint)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B fill(javafx.scene.paint.Paint value)
    {
        this.hasFill = true;
        this.valFill = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setNodeOrientation(javafx.geometry.NodeOrientation)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B nodeOrientation(javafx.geometry.NodeOrientation value)
    {
        this.hasNodeOrientation = true;
        this.valNodeOrientation = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnContextMenuRequested(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onContextMenuRequested(javafx.event.EventHandler<? super javafx.scene.input.ContextMenuEvent> value)
    {
        this.hasOnContextMenuRequested = true;
        this.valOnContextMenuRequested = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnDragDetected(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onDragDetected(javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> value)
    {
        this.hasOnDragDetected = true;
        this.valOnDragDetected = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnDragDone(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onDragDone(javafx.event.EventHandler<? super javafx.scene.input.DragEvent> value)
    {
        this.hasOnDragDone = true;
        this.valOnDragDone = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnDragDropped(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onDragDropped(javafx.event.EventHandler<? super javafx.scene.input.DragEvent> value)
    {
        this.hasOnDragDropped = true;
        this.valOnDragDropped = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnDragEntered(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onDragEntered(javafx.event.EventHandler<? super javafx.scene.input.DragEvent> value)
    {
        this.hasOnDragEntered = true;
        this.valOnDragEntered = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnDragExited(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onDragExited(javafx.event.EventHandler<? super javafx.scene.input.DragEvent> value)
    {
        this.hasOnDragExited = true;
        this.valOnDragExited = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnDragOver(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onDragOver(javafx.event.EventHandler<? super javafx.scene.input.DragEvent> value)
    {
        this.hasOnDragOver = true;
        this.valOnDragOver = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnInputMethodTextChanged(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onInputMethodTextChanged(javafx.event.EventHandler<? super javafx.scene.input.InputMethodEvent> value)
    {
        this.hasOnInputMethodTextChanged = true;
        this.valOnInputMethodTextChanged = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnKeyPressed(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onKeyPressed(javafx.event.EventHandler<? super javafx.scene.input.KeyEvent> value)
    {
        this.hasOnKeyPressed = true;
        this.valOnKeyPressed = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnKeyReleased(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onKeyReleased(javafx.event.EventHandler<? super javafx.scene.input.KeyEvent> value)
    {
        this.hasOnKeyReleased = true;
        this.valOnKeyReleased = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnKeyTyped(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onKeyTyped(javafx.event.EventHandler<? super javafx.scene.input.KeyEvent> value)
    {
        this.hasOnKeyTyped = true;
        this.valOnKeyTyped = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnMouseClicked(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMouseClicked(javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> value)
    {
        this.hasOnMouseClicked = true;
        this.valOnMouseClicked = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnMouseDragEntered(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMouseDragEntered(javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent> value)
    {
        this.hasOnMouseDragEntered = true;
        this.valOnMouseDragEntered = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnMouseDragExited(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMouseDragExited(javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent> value)
    {
        this.hasOnMouseDragExited = true;
        this.valOnMouseDragExited = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnMouseDragOver(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMouseDragOver(javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent> value)
    {
        this.hasOnMouseDragOver = true;
        this.valOnMouseDragOver = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnMouseDragReleased(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMouseDragReleased(javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent> value)
    {
        this.hasOnMouseDragReleased = true;
        this.valOnMouseDragReleased = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnMouseDragged(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMouseDragged(javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> value)
    {
        this.hasOnMouseDragged = true;
        this.valOnMouseDragged = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnMouseEntered(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMouseEntered(javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> value)
    {
        this.hasOnMouseEntered = true;
        this.valOnMouseEntered = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnMouseExited(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMouseExited(javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> value)
    {
        this.hasOnMouseExited = true;
        this.valOnMouseExited = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnMouseMoved(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMouseMoved(javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> value)
    {
        this.hasOnMouseMoved = true;
        this.valOnMouseMoved = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnMousePressed(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMousePressed(javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> value)
    {
        this.hasOnMousePressed = true;
        this.valOnMousePressed = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnMouseReleased(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMouseReleased(javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> value)
    {
        this.hasOnMouseReleased = true;
        this.valOnMouseReleased = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnRotate(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onRotate(javafx.event.EventHandler<? super javafx.scene.input.RotateEvent> value)
    {
        this.hasOnRotate = true;
        this.valOnRotate = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnRotationFinished(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onRotationFinished(javafx.event.EventHandler<? super javafx.scene.input.RotateEvent> value)
    {
        this.hasOnRotationFinished = true;
        this.valOnRotationFinished = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnRotationStarted(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onRotationStarted(javafx.event.EventHandler<? super javafx.scene.input.RotateEvent> value)
    {
        this.hasOnRotationStarted = true;
        this.valOnRotationStarted = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnScroll(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onScroll(javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent> value)
    {
        this.hasOnScroll = true;
        this.valOnScroll = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnScrollFinished(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onScrollFinished(javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent> value)
    {
        this.hasOnScrollFinished = true;
        this.valOnScrollFinished = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnScrollStarted(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onScrollStarted(javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent> value)
    {
        this.hasOnScrollStarted = true;
        this.valOnScrollStarted = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnSwipeDown(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onSwipeDown(javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent> value)
    {
        this.hasOnSwipeDown = true;
        this.valOnSwipeDown = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnSwipeLeft(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onSwipeLeft(javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent> value)
    {
        this.hasOnSwipeLeft = true;
        this.valOnSwipeLeft = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnSwipeRight(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onSwipeRight(javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent> value)
    {
        this.hasOnSwipeRight = true;
        this.valOnSwipeRight = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnSwipeUp(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onSwipeUp(javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent> value)
    {
        this.hasOnSwipeUp = true;
        this.valOnSwipeUp = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnTouchMoved(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onTouchMoved(javafx.event.EventHandler<? super javafx.scene.input.TouchEvent> value)
    {
        this.hasOnTouchMoved = true;
        this.valOnTouchMoved = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnTouchPressed(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onTouchPressed(javafx.event.EventHandler<? super javafx.scene.input.TouchEvent> value)
    {
        this.hasOnTouchPressed = true;
        this.valOnTouchPressed = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnTouchReleased(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onTouchReleased(javafx.event.EventHandler<? super javafx.scene.input.TouchEvent> value)
    {
        this.hasOnTouchReleased = true;
        this.valOnTouchReleased = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnTouchStationary(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onTouchStationary(javafx.event.EventHandler<? super javafx.scene.input.TouchEvent> value)
    {
        this.hasOnTouchStationary = true;
        this.valOnTouchStationary = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnZoom(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onZoom(javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent> value)
    {
        this.hasOnZoom = true;
        this.valOnZoom = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnZoomFinished(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onZoomFinished(javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent> value)
    {
        this.hasOnZoomFinished = true;
        this.valOnZoomFinished = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setOnZoomStarted(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onZoomStarted(javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent> value)
    {
        this.hasOnZoomStarted = true;
        this.valOnZoomStarted = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setRoot(javafx.scene.Parent)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B root(javafx.scene.Parent value)
    {
        this.hasRoot = true;
        this.valRoot = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link Scene#getStylesheets}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B stylesheets(java.util.Collection<java.lang.String> value)
    {
        this.hasStylesheets = true;
        this.valStylesheets = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link Scene#getStylesheets}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B stylesheets(java.lang.String... value)
    {
        this.hasStylesheets = true;
        this.valStylesheets = java.util.Arrays.asList(value);
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#setUserAgentStylesheet(java.lang.String)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B userAgentStylesheet(java.lang.String value)
    {
        this.hasUserAgentStylesheet = true;
        this.valUserAgentStylesheet = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#cameraProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindCamera(javafx.beans.value.ObservableValue<? extends javafx.scene.Camera> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundCamera = true;
        this.obsrvCamera = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#cursorProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindCursor(javafx.beans.value.ObservableValue<? extends javafx.scene.Cursor> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundCursor = true;
        this.obsrvCursor = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#eventDispatcherProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindEventDispatcher(javafx.beans.value.ObservableValue<? extends javafx.event.EventDispatcher> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundEventDispatcher = true;
        this.obsrvEventDispatcher = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#fillProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindFill(javafx.beans.value.ObservableValue<? extends javafx.scene.paint.Paint> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundFill = true;
        this.obsrvFill = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#nodeOrientationProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindNodeOrientation(javafx.beans.value.ObservableValue<? extends javafx.geometry.NodeOrientation> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundNodeOrientation = true;
        this.obsrvNodeOrientation = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onContextMenuRequestedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnContextMenuRequested(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ContextMenuEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnContextMenuRequested = true;
        this.obsrvOnContextMenuRequested = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onDragDetectedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnDragDetected(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnDragDetected = true;
        this.obsrvOnDragDetected = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onDragDoneProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnDragDone(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.DragEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnDragDone = true;
        this.obsrvOnDragDone = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onDragDroppedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnDragDropped(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.DragEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnDragDropped = true;
        this.obsrvOnDragDropped = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onDragEnteredProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnDragEntered(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.DragEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnDragEntered = true;
        this.obsrvOnDragEntered = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onDragExitedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnDragExited(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.DragEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnDragExited = true;
        this.obsrvOnDragExited = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onDragOverProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnDragOver(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.DragEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnDragOver = true;
        this.obsrvOnDragOver = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onInputMethodTextChangedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnInputMethodTextChanged(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.InputMethodEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnInputMethodTextChanged = true;
        this.obsrvOnInputMethodTextChanged = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onKeyPressedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnKeyPressed(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.KeyEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnKeyPressed = true;
        this.obsrvOnKeyPressed = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onKeyReleasedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnKeyReleased(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.KeyEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnKeyReleased = true;
        this.obsrvOnKeyReleased = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onKeyTypedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnKeyTyped(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.KeyEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnKeyTyped = true;
        this.obsrvOnKeyTyped = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onMouseClickedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnMouseClicked(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnMouseClicked = true;
        this.obsrvOnMouseClicked = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onMouseDragEnteredProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnMouseDragEntered(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnMouseDragEntered = true;
        this.obsrvOnMouseDragEntered = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onMouseDragExitedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnMouseDragExited(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnMouseDragExited = true;
        this.obsrvOnMouseDragExited = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onMouseDragOverProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnMouseDragOver(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnMouseDragOver = true;
        this.obsrvOnMouseDragOver = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onMouseDragReleasedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnMouseDragReleased(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnMouseDragReleased = true;
        this.obsrvOnMouseDragReleased = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onMouseDraggedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnMouseDragged(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnMouseDragged = true;
        this.obsrvOnMouseDragged = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onMouseEnteredProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnMouseEntered(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnMouseEntered = true;
        this.obsrvOnMouseEntered = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onMouseExitedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnMouseExited(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnMouseExited = true;
        this.obsrvOnMouseExited = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onMouseMovedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnMouseMoved(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnMouseMoved = true;
        this.obsrvOnMouseMoved = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onMousePressedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnMousePressed(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnMousePressed = true;
        this.obsrvOnMousePressed = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onMouseReleasedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnMouseReleased(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnMouseReleased = true;
        this.obsrvOnMouseReleased = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onRotateProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnRotate(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.RotateEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnRotate = true;
        this.obsrvOnRotate = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onRotationFinishedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnRotationFinished(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.RotateEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnRotationFinished = true;
        this.obsrvOnRotationFinished = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onRotationStartedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnRotationStarted(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.RotateEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnRotationStarted = true;
        this.obsrvOnRotationStarted = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onScrollFinishedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnScrollFinished(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnScrollFinished = true;
        this.obsrvOnScrollFinished = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onScrollProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnScroll(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnScroll = true;
        this.obsrvOnScroll = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onScrollStartedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnScrollStarted(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnScrollStarted = true;
        this.obsrvOnScrollStarted = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onSwipeDownProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnSwipeDown(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnSwipeDown = true;
        this.obsrvOnSwipeDown = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onSwipeLeftProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnSwipeLeft(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnSwipeLeft = true;
        this.obsrvOnSwipeLeft = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onSwipeRightProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnSwipeRight(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnSwipeRight = true;
        this.obsrvOnSwipeRight = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onSwipeUpProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnSwipeUp(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnSwipeUp = true;
        this.obsrvOnSwipeUp = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onTouchMovedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnTouchMoved(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.TouchEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnTouchMoved = true;
        this.obsrvOnTouchMoved = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onTouchPressedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnTouchPressed(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.TouchEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnTouchPressed = true;
        this.obsrvOnTouchPressed = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onTouchReleasedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnTouchReleased(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.TouchEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnTouchReleased = true;
        this.obsrvOnTouchReleased = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onTouchStationaryProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnTouchStationary(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.TouchEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnTouchStationary = true;
        this.obsrvOnTouchStationary = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onZoomFinishedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnZoomFinished(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnZoomFinished = true;
        this.obsrvOnZoomFinished = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onZoomProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnZoom(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnZoom = true;
        this.obsrvOnZoom = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#onZoomStartedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnZoomStarted(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnZoomStarted = true;
        this.obsrvOnZoomStarted = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#rootProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindRoot(javafx.beans.value.ObservableValue<? extends javafx.scene.Parent> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundRoot = true;
        this.obsrvRoot = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Scene#userAgentStylesheetProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindUserAgentStylesheet(javafx.beans.value.ObservableValue<? extends java.lang.String> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundUserAgentStylesheet = true;
        this.obsrvUserAgentStylesheet = source;
        return (B) this;
    }

    /**
     * 建構{@link Scene}物件
     *
     * @return 新的{@link Scene}物件實體
     */
    @SuppressWarnings("unchecked")
    public Scene build(javafx.scene.Parent arg0)
    {
        Scene instance = new Scene(arg0);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
