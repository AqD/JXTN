// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.web;

/**
 * {@link WebHistory}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class WebHistoryBuilder<Z extends WebHistory, B extends WebHistoryBuilder<Z, B>>
        extends jxtn.jfx.builders.AbstractBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasEntries;
    protected java.util.Collection<javafx.scene.web.WebHistory.Entry> valEntries;

    protected boolean hasMaxSize;
    protected int valMaxSize;
    public void applyTo(WebHistory instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasEntries)
            instance.getEntries().setAll(this.valEntries);
        if (this.hasMaxSize)
            instance.setMaxSize(this.valMaxSize);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B entries(java.util.Collection<javafx.scene.web.WebHistory.Entry> value)
    {
        this.hasEntries = true;
        this.valEntries = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B entries(javafx.scene.web.WebHistory.Entry... value)
    {
        this.hasEntries = true;
        this.valEntries = java.util.Arrays.asList(value);
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B maxSize(int value)
    {
        this.hasMaxSize = true;
        this.valMaxSize = value;
        return (B) this;
    }
}
