// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.web;

/**
 * {@link WebView}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link WebView})
 * @param <B> 建構器本身的型態(需繼承{@link WebViewBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class WebViewBuilder<Z extends WebView, B extends WebViewBuilder<Z, B>>
        extends javafx.scene.ParentBuilder<Z, B>
{

    private boolean hasContextMenuEnabled;
    private boolean valContextMenuEnabled;

    private boolean hasFontScale;
    private double valFontScale;

    private boolean hasFontSmoothingType;
    private javafx.scene.text.FontSmoothingType valFontSmoothingType;

    private boolean hasMaxHeight;
    private double valMaxHeight;

    private boolean hasMaxWidth;
    private double valMaxWidth;

    private boolean hasMinHeight;
    private double valMinHeight;

    private boolean hasMinWidth;
    private double valMinWidth;

    private boolean hasPrefHeight;
    private double valPrefHeight;

    private boolean hasPrefWidth;
    private double valPrefWidth;

    private boolean hasZoom;
    private double valZoom;

    private boolean boundContextMenuEnabled;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrvContextMenuEnabled;

    private boolean boundFontSmoothingType;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.text.FontSmoothingType> obsrvFontSmoothingType;

    private boolean boundZoom;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvZoom;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasContextMenuEnabled)
            instance.setContextMenuEnabled(this.valContextMenuEnabled);
        if (this.hasFontScale)
            instance.setFontScale(this.valFontScale);
        if (this.hasFontSmoothingType)
            instance.setFontSmoothingType(this.valFontSmoothingType);
        if (this.hasMaxHeight)
            instance.setMaxHeight(this.valMaxHeight);
        if (this.hasMaxWidth)
            instance.setMaxWidth(this.valMaxWidth);
        if (this.hasMinHeight)
            instance.setMinHeight(this.valMinHeight);
        if (this.hasMinWidth)
            instance.setMinWidth(this.valMinWidth);
        if (this.hasPrefHeight)
            instance.setPrefHeight(this.valPrefHeight);
        if (this.hasPrefWidth)
            instance.setPrefWidth(this.valPrefWidth);
        if (this.hasZoom)
            instance.setZoom(this.valZoom);
        if (this.boundContextMenuEnabled)
            instance.contextMenuEnabledProperty().bind(this.obsrvContextMenuEnabled);
        if (this.boundFontSmoothingType)
            instance.fontSmoothingTypeProperty().bind(this.obsrvFontSmoothingType);
        if (this.boundZoom)
            instance.zoomProperty().bind(this.obsrvZoom);
    }

    /**
     * 設定屬性{@link WebView#setContextMenuEnabled(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B contextMenuEnabled(boolean value)
    {
        this.hasContextMenuEnabled = true;
        this.valContextMenuEnabled = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebView#setFontScale(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B fontScale(double value)
    {
        this.hasFontScale = true;
        this.valFontScale = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebView#setFontSmoothingType(javafx.scene.text.FontSmoothingType)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B fontSmoothingType(javafx.scene.text.FontSmoothingType value)
    {
        this.hasFontSmoothingType = true;
        this.valFontSmoothingType = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebView#setMaxHeight(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B maxHeight(double value)
    {
        this.hasMaxHeight = true;
        this.valMaxHeight = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebView#setMaxWidth(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B maxWidth(double value)
    {
        this.hasMaxWidth = true;
        this.valMaxWidth = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebView#setMinHeight(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B minHeight(double value)
    {
        this.hasMinHeight = true;
        this.valMinHeight = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebView#setMinWidth(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B minWidth(double value)
    {
        this.hasMinWidth = true;
        this.valMinWidth = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebView#setPrefHeight(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B prefHeight(double value)
    {
        this.hasPrefHeight = true;
        this.valPrefHeight = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebView#setPrefWidth(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B prefWidth(double value)
    {
        this.hasPrefWidth = true;
        this.valPrefWidth = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebView#setZoom(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B zoom(double value)
    {
        this.hasZoom = true;
        this.valZoom = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebView#contextMenuEnabledProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindContextMenuEnabled(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundContextMenuEnabled = true;
        this.obsrvContextMenuEnabled = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebView#fontSmoothingTypeProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindFontSmoothingType(javafx.beans.value.ObservableValue<? extends javafx.scene.text.FontSmoothingType> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundFontSmoothingType = true;
        this.obsrvFontSmoothingType = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebView#zoomProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindZoom(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundZoom = true;
        this.obsrvZoom = source;
        return (B) this;
    }

    /**
     * 建構{@link WebView}物件
     *
     * @return 新的{@link WebView}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public WebView build()
    {
        WebView instance = new WebView();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
