// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.web;

/**
 * {@link WebEngine}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class WebEngineBuilder<Z extends WebEngine, B extends WebEngineBuilder<Z, B>>
        extends jxtn.jfx.builders.AbstractBuilder<Z, B>
{

    protected boolean hasConfirmHandler;
    protected javafx.util.Callback<java.lang.String, java.lang.Boolean> valConfirmHandler;

    protected boolean hasCreatePopupHandler;
    protected javafx.util.Callback<javafx.scene.web.PopupFeatures, javafx.scene.web.WebEngine> valCreatePopupHandler;

    protected boolean hasJavaScriptEnabled;
    protected boolean valJavaScriptEnabled;

    protected boolean hasOnAlert;
    protected javafx.event.EventHandler<javafx.scene.web.WebEvent<java.lang.String>> valOnAlert;

    protected boolean hasOnError;
    protected javafx.event.EventHandler<javafx.scene.web.WebErrorEvent> valOnError;

    protected boolean hasOnResized;
    protected javafx.event.EventHandler<javafx.scene.web.WebEvent<javafx.geometry.Rectangle2D>> valOnResized;

    protected boolean hasOnStatusChanged;
    protected javafx.event.EventHandler<javafx.scene.web.WebEvent<java.lang.String>> valOnStatusChanged;

    protected boolean hasOnVisibilityChanged;
    protected javafx.event.EventHandler<javafx.scene.web.WebEvent<java.lang.Boolean>> valOnVisibilityChanged;

    protected boolean hasPromptHandler;
    protected javafx.util.Callback<javafx.scene.web.PromptData, java.lang.String> valPromptHandler;

    protected boolean hasUserAgent;
    protected java.lang.String valUserAgent;

    protected boolean hasUserDataDirectory;
    protected java.io.File valUserDataDirectory;

    protected boolean hasUserStyleSheetLocation;
    protected java.lang.String valUserStyleSheetLocation;

    protected boolean boundConfirmHandler;
    protected javafx.beans.value.ObservableValue<? extends javafx.util.Callback<java.lang.String, java.lang.Boolean>> obsrvConfirmHandler;

    protected boolean boundCreatePopupHandler;
    protected javafx.beans.value.ObservableValue<? extends javafx.util.Callback<javafx.scene.web.PopupFeatures, javafx.scene.web.WebEngine>> obsrvCreatePopupHandler;

    protected boolean boundJavaScriptEnabled;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvJavaScriptEnabled;

    protected boolean boundOnAlert;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.web.WebEvent<java.lang.String>>> obsrvOnAlert;

    protected boolean boundOnError;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.web.WebErrorEvent>> obsrvOnError;

    protected boolean boundOnResized;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.web.WebEvent<javafx.geometry.Rectangle2D>>> obsrvOnResized;

    protected boolean boundOnStatusChanged;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.web.WebEvent<java.lang.String>>> obsrvOnStatusChanged;

    protected boolean boundOnVisibilityChanged;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.web.WebEvent<java.lang.Boolean>>> obsrvOnVisibilityChanged;

    protected boolean boundPromptHandler;
    protected javafx.beans.value.ObservableValue<? extends javafx.util.Callback<javafx.scene.web.PromptData, java.lang.String>> obsrvPromptHandler;

    protected boolean boundUserAgent;
    protected javafx.beans.value.ObservableValue<? extends String> obsrvUserAgent;

    protected boolean boundUserDataDirectory;
    protected javafx.beans.value.ObservableValue<? extends java.io.File> obsrvUserDataDirectory;

    protected boolean boundUserStyleSheetLocation;
    protected javafx.beans.value.ObservableValue<? extends String> obsrvUserStyleSheetLocation;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasConfirmHandler)
            instance.setConfirmHandler(this.valConfirmHandler);
        if (this.hasCreatePopupHandler)
            instance.setCreatePopupHandler(this.valCreatePopupHandler);
        if (this.hasJavaScriptEnabled)
            instance.setJavaScriptEnabled(this.valJavaScriptEnabled);
        if (this.hasOnAlert)
            instance.setOnAlert(this.valOnAlert);
        if (this.hasOnError)
            instance.setOnError(this.valOnError);
        if (this.hasOnResized)
            instance.setOnResized(this.valOnResized);
        if (this.hasOnStatusChanged)
            instance.setOnStatusChanged(this.valOnStatusChanged);
        if (this.hasOnVisibilityChanged)
            instance.setOnVisibilityChanged(this.valOnVisibilityChanged);
        if (this.hasPromptHandler)
            instance.setPromptHandler(this.valPromptHandler);
        if (this.hasUserAgent)
            instance.setUserAgent(this.valUserAgent);
        if (this.hasUserDataDirectory)
            instance.setUserDataDirectory(this.valUserDataDirectory);
        if (this.hasUserStyleSheetLocation)
            instance.setUserStyleSheetLocation(this.valUserStyleSheetLocation);
        if (this.boundConfirmHandler)
            instance.confirmHandlerProperty().bind(this.obsrvConfirmHandler);
        if (this.boundCreatePopupHandler)
            instance.createPopupHandlerProperty().bind(this.obsrvCreatePopupHandler);
        if (this.boundJavaScriptEnabled)
            instance.javaScriptEnabledProperty().bind(this.obsrvJavaScriptEnabled);
        if (this.boundOnAlert)
            instance.onAlertProperty().bind(this.obsrvOnAlert);
        if (this.boundOnError)
            instance.onErrorProperty().bind(this.obsrvOnError);
        if (this.boundOnResized)
            instance.onResizedProperty().bind(this.obsrvOnResized);
        if (this.boundOnStatusChanged)
            instance.onStatusChangedProperty().bind(this.obsrvOnStatusChanged);
        if (this.boundOnVisibilityChanged)
            instance.onVisibilityChangedProperty().bind(this.obsrvOnVisibilityChanged);
        if (this.boundPromptHandler)
            instance.promptHandlerProperty().bind(this.obsrvPromptHandler);
        if (this.boundUserAgent)
            instance.userAgentProperty().bind(this.obsrvUserAgent);
        if (this.boundUserDataDirectory)
            instance.userDataDirectoryProperty().bind(this.obsrvUserDataDirectory);
        if (this.boundUserStyleSheetLocation)
            instance.userStyleSheetLocationProperty().bind(this.obsrvUserStyleSheetLocation);
    }

    /**
     * 設定屬性{@link WebEngine#setConfirmHandler}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B confirmHandler(javafx.util.Callback<java.lang.String, java.lang.Boolean> value)
    {
        this.hasConfirmHandler = true;
        this.valConfirmHandler = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#setCreatePopupHandler}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B createPopupHandler(javafx.util.Callback<javafx.scene.web.PopupFeatures, javafx.scene.web.WebEngine> value)
    {
        this.hasCreatePopupHandler = true;
        this.valCreatePopupHandler = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#setJavaScriptEnabled}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B javaScriptEnabled(boolean value)
    {
        this.hasJavaScriptEnabled = true;
        this.valJavaScriptEnabled = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#setOnAlert}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onAlert(javafx.event.EventHandler<javafx.scene.web.WebEvent<java.lang.String>> value)
    {
        this.hasOnAlert = true;
        this.valOnAlert = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#setOnError}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onError(javafx.event.EventHandler<javafx.scene.web.WebErrorEvent> value)
    {
        this.hasOnError = true;
        this.valOnError = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#setOnResized}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onResized(javafx.event.EventHandler<javafx.scene.web.WebEvent<javafx.geometry.Rectangle2D>> value)
    {
        this.hasOnResized = true;
        this.valOnResized = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#setOnStatusChanged}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onStatusChanged(javafx.event.EventHandler<javafx.scene.web.WebEvent<java.lang.String>> value)
    {
        this.hasOnStatusChanged = true;
        this.valOnStatusChanged = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#setOnVisibilityChanged}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onVisibilityChanged(javafx.event.EventHandler<javafx.scene.web.WebEvent<java.lang.Boolean>> value)
    {
        this.hasOnVisibilityChanged = true;
        this.valOnVisibilityChanged = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#setPromptHandler}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B promptHandler(javafx.util.Callback<javafx.scene.web.PromptData, java.lang.String> value)
    {
        this.hasPromptHandler = true;
        this.valPromptHandler = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#setUserAgent}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B userAgent(java.lang.String value)
    {
        this.hasUserAgent = true;
        this.valUserAgent = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#setUserDataDirectory}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B userDataDirectory(java.io.File value)
    {
        this.hasUserDataDirectory = true;
        this.valUserDataDirectory = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#setUserStyleSheetLocation}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B userStyleSheetLocation(java.lang.String value)
    {
        this.hasUserStyleSheetLocation = true;
        this.valUserStyleSheetLocation = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#confirmHandlerProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindConfirmHandler(javafx.beans.value.ObservableValue<? extends javafx.util.Callback<java.lang.String, java.lang.Boolean>> source)
    {
        assert (source != null);
        this.boundConfirmHandler = true;
        this.obsrvConfirmHandler = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#createPopupHandlerProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindCreatePopupHandler(javafx.beans.value.ObservableValue<? extends javafx.util.Callback<javafx.scene.web.PopupFeatures, javafx.scene.web.WebEngine>> source)
    {
        assert (source != null);
        this.boundCreatePopupHandler = true;
        this.obsrvCreatePopupHandler = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#javaScriptEnabledProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindJavaScriptEnabled(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundJavaScriptEnabled = true;
        this.obsrvJavaScriptEnabled = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#onAlertProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnAlert(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.web.WebEvent<java.lang.String>>> source)
    {
        assert (source != null);
        this.boundOnAlert = true;
        this.obsrvOnAlert = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#onErrorProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnError(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.web.WebErrorEvent>> source)
    {
        assert (source != null);
        this.boundOnError = true;
        this.obsrvOnError = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#onResizedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnResized(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.web.WebEvent<javafx.geometry.Rectangle2D>>> source)
    {
        assert (source != null);
        this.boundOnResized = true;
        this.obsrvOnResized = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#onStatusChangedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnStatusChanged(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.web.WebEvent<java.lang.String>>> source)
    {
        assert (source != null);
        this.boundOnStatusChanged = true;
        this.obsrvOnStatusChanged = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#onVisibilityChangedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnVisibilityChanged(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.web.WebEvent<java.lang.Boolean>>> source)
    {
        assert (source != null);
        this.boundOnVisibilityChanged = true;
        this.obsrvOnVisibilityChanged = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#promptHandlerProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindPromptHandler(javafx.beans.value.ObservableValue<? extends javafx.util.Callback<javafx.scene.web.PromptData, java.lang.String>> source)
    {
        assert (source != null);
        this.boundPromptHandler = true;
        this.obsrvPromptHandler = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#userAgentProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindUserAgent(javafx.beans.value.ObservableValue<? extends String> source)
    {
        assert (source != null);
        this.boundUserAgent = true;
        this.obsrvUserAgent = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#userDataDirectoryProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindUserDataDirectory(javafx.beans.value.ObservableValue<? extends java.io.File> source)
    {
        assert (source != null);
        this.boundUserDataDirectory = true;
        this.obsrvUserDataDirectory = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WebEngine#userStyleSheetLocationProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindUserStyleSheetLocation(javafx.beans.value.ObservableValue<? extends String> source)
    {
        assert (source != null);
        this.boundUserStyleSheetLocation = true;
        this.obsrvUserStyleSheetLocation = source;
        return (B) this;
    }

    /**
     * 建構{@link WebEngine}物件
     *
     * @return 新的{@link WebEngine}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public WebEngine build()
    {
        WebEngine instance = new WebEngine();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
