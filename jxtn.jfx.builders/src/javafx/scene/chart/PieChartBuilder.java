// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.chart;

/**
 * {@link PieChart}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class PieChartBuilder<Z extends PieChart, B extends PieChartBuilder<Z, B>>
        extends javafx.scene.chart.ChartBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasClockwise;
    protected boolean valClockwise;

    protected boolean hasData;
    protected javafx.collections.ObservableList<javafx.scene.chart.PieChart.Data> valData;

    protected boolean hasLabelLineLength;
    protected double valLabelLineLength;

    protected boolean hasLabelsVisible;
    protected boolean valLabelsVisible;

    protected boolean hasStartAngle;
    protected double valStartAngle;

    protected boolean boundClockwise;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvClockwise;

    protected boolean boundData;
    protected javafx.beans.value.ObservableValue<? extends javafx.collections.ObservableList<javafx.scene.chart.PieChart.Data>> obsrvData;

    protected boolean boundLabelLineLength;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvLabelLineLength;

    protected boolean boundLabelsVisible;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvLabelsVisible;

    protected boolean boundStartAngle;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvStartAngle;
    public void applyTo(PieChart instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasClockwise)
            instance.setClockwise(this.valClockwise);
        if (this.hasData)
            instance.setData(this.valData);
        if (this.hasLabelLineLength)
            instance.setLabelLineLength(this.valLabelLineLength);
        if (this.hasLabelsVisible)
            instance.setLabelsVisible(this.valLabelsVisible);
        if (this.hasStartAngle)
            instance.setStartAngle(this.valStartAngle);
        if (this.boundClockwise)
            instance.clockwiseProperty().bind(this.obsrvClockwise);
        if (this.boundData)
            instance.dataProperty().bind(this.obsrvData);
        if (this.boundLabelLineLength)
            instance.labelLineLengthProperty().bind(this.obsrvLabelLineLength);
        if (this.boundLabelsVisible)
            instance.labelsVisibleProperty().bind(this.obsrvLabelsVisible);
        if (this.boundStartAngle)
            instance.startAngleProperty().bind(this.obsrvStartAngle);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B clockwise(boolean value)
    {
        this.hasClockwise = true;
        this.valClockwise = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B data(javafx.collections.ObservableList<javafx.scene.chart.PieChart.Data> value)
    {
        this.hasData = true;
        this.valData = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B labelLineLength(double value)
    {
        this.hasLabelLineLength = true;
        this.valLabelLineLength = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B labelsVisible(boolean value)
    {
        this.hasLabelsVisible = true;
        this.valLabelsVisible = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B startAngle(double value)
    {
        this.hasStartAngle = true;
        this.valStartAngle = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindClockwise(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundClockwise = true;
        this.obsrvClockwise = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindData(javafx.beans.value.ObservableValue<? extends javafx.collections.ObservableList<javafx.scene.chart.PieChart.Data>> source)
    {
        assert (source != null);
        this.boundData = true;
        this.obsrvData = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindLabelLineLength(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundLabelLineLength = true;
        this.obsrvLabelLineLength = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindLabelsVisible(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundLabelsVisible = true;
        this.obsrvLabelsVisible = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindStartAngle(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundStartAngle = true;
        this.obsrvStartAngle = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PieChart build()
    {
        PieChart instance = new PieChart();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
