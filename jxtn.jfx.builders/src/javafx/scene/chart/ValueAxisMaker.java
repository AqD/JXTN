// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.chart;

/**
 * {@link ValueAxis}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link ValueAxis})
 * @param <B> 建構器本身的型態(需繼承{@link ValueAxisMaker})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class ValueAxisMaker<T extends java.lang.Number, Z extends ValueAxis<T>, B extends ValueAxisMaker<T, Z, B>>
        extends javafx.scene.chart.AxisMaker<T, Z, B>
        implements ValueAxisMakerExt<T, Z, B>
{

    private boolean hasLowerBound;
    private double valLowerBound;

    private boolean hasMinorTickCount;
    private int valMinorTickCount;

    private boolean hasMinorTickLength;
    private double valMinorTickLength;

    private boolean hasMinorTickVisible;
    private boolean valMinorTickVisible;

    private boolean hasTickLabelFormatter;
    private javafx.util.StringConverter<T> valTickLabelFormatter;

    private boolean hasUpperBound;
    private double valUpperBound;

    private boolean bound1LowerBound;
    private boolean bound2LowerBound;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1LowerBound;
    private javafx.beans.property.Property<Number> obsrv2LowerBound;

    private boolean bound1MinorTickCount;
    private boolean bound2MinorTickCount;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1MinorTickCount;
    private javafx.beans.property.Property<Number> obsrv2MinorTickCount;

    private boolean bound1MinorTickLength;
    private boolean bound2MinorTickLength;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1MinorTickLength;
    private javafx.beans.property.Property<Number> obsrv2MinorTickLength;

    private boolean bound1MinorTickVisible;
    private boolean bound2MinorTickVisible;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrv1MinorTickVisible;
    private javafx.beans.property.Property<Boolean> obsrv2MinorTickVisible;

    private boolean bound1TickLabelFormatter;
    private boolean bound2TickLabelFormatter;
    private javafx.beans.value.ObservableValue<? extends javafx.util.StringConverter<T>> obsrv1TickLabelFormatter;
    private javafx.beans.property.Property<javafx.util.StringConverter<T>> obsrv2TickLabelFormatter;

    private boolean bound1UpperBound;
    private boolean bound2UpperBound;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1UpperBound;
    private javafx.beans.property.Property<Number> obsrv2UpperBound;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasLowerBound)
            instance.setLowerBound(this.valLowerBound);
        if (this.hasMinorTickCount)
            instance.setMinorTickCount(this.valMinorTickCount);
        if (this.hasMinorTickLength)
            instance.setMinorTickLength(this.valMinorTickLength);
        if (this.hasMinorTickVisible)
            instance.setMinorTickVisible(this.valMinorTickVisible);
        if (this.hasTickLabelFormatter)
            instance.setTickLabelFormatter(this.valTickLabelFormatter);
        if (this.hasUpperBound)
            instance.setUpperBound(this.valUpperBound);
        if (this.bound1LowerBound)
            instance.lowerBoundProperty().bind(this.obsrv1LowerBound);
        if (this.bound2LowerBound)
            instance.lowerBoundProperty().bindBidirectional(this.obsrv2LowerBound);
        if (this.bound1MinorTickCount)
            instance.minorTickCountProperty().bind(this.obsrv1MinorTickCount);
        if (this.bound2MinorTickCount)
            instance.minorTickCountProperty().bindBidirectional(this.obsrv2MinorTickCount);
        if (this.bound1MinorTickLength)
            instance.minorTickLengthProperty().bind(this.obsrv1MinorTickLength);
        if (this.bound2MinorTickLength)
            instance.minorTickLengthProperty().bindBidirectional(this.obsrv2MinorTickLength);
        if (this.bound1MinorTickVisible)
            instance.minorTickVisibleProperty().bind(this.obsrv1MinorTickVisible);
        if (this.bound2MinorTickVisible)
            instance.minorTickVisibleProperty().bindBidirectional(this.obsrv2MinorTickVisible);
        if (this.bound1TickLabelFormatter)
            instance.tickLabelFormatterProperty().bind(this.obsrv1TickLabelFormatter);
        if (this.bound2TickLabelFormatter)
            instance.tickLabelFormatterProperty().bindBidirectional(this.obsrv2TickLabelFormatter);
        if (this.bound1UpperBound)
            instance.upperBoundProperty().bind(this.obsrv1UpperBound);
        if (this.bound2UpperBound)
            instance.upperBoundProperty().bindBidirectional(this.obsrv2UpperBound);
    }

    /**
     * 設定屬性{@link ValueAxis#setLowerBound(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B lowerBound(double value)
    {
        this.hasLowerBound = true;
        this.valLowerBound = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ValueAxis#setMinorTickCount(int)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B minorTickCount(int value)
    {
        this.hasMinorTickCount = true;
        this.valMinorTickCount = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ValueAxis#setMinorTickLength(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B minorTickLength(double value)
    {
        this.hasMinorTickLength = true;
        this.valMinorTickLength = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ValueAxis#setMinorTickVisible(boolean)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B minorTickVisible(boolean value)
    {
        this.hasMinorTickVisible = true;
        this.valMinorTickVisible = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ValueAxis#setTickLabelFormatter(javafx.util.StringConverter)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B tickLabelFormatter(javafx.util.StringConverter<T> value)
    {
        this.hasTickLabelFormatter = true;
        this.valTickLabelFormatter = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ValueAxis#setUpperBound(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B upperBound(double value)
    {
        this.hasUpperBound = true;
        this.valUpperBound = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ValueAxis#lowerBoundProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindLowerBound(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1LowerBound = true;
        this.obsrv1LowerBound = source;
        this.bound2LowerBound = false;
        this.obsrv2LowerBound = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link ValueAxis#lowerBoundProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalLowerBound(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1LowerBound = false;
        this.obsrv1LowerBound = null;
        this.bound2LowerBound = true;
        this.obsrv2LowerBound = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ValueAxis#minorTickCountProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMinorTickCount(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1MinorTickCount = true;
        this.obsrv1MinorTickCount = source;
        this.bound2MinorTickCount = false;
        this.obsrv2MinorTickCount = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link ValueAxis#minorTickCountProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalMinorTickCount(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1MinorTickCount = false;
        this.obsrv1MinorTickCount = null;
        this.bound2MinorTickCount = true;
        this.obsrv2MinorTickCount = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ValueAxis#minorTickLengthProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMinorTickLength(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1MinorTickLength = true;
        this.obsrv1MinorTickLength = source;
        this.bound2MinorTickLength = false;
        this.obsrv2MinorTickLength = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link ValueAxis#minorTickLengthProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalMinorTickLength(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1MinorTickLength = false;
        this.obsrv1MinorTickLength = null;
        this.bound2MinorTickLength = true;
        this.obsrv2MinorTickLength = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ValueAxis#minorTickVisibleProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMinorTickVisible(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1MinorTickVisible = true;
        this.obsrv1MinorTickVisible = source;
        this.bound2MinorTickVisible = false;
        this.obsrv2MinorTickVisible = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link ValueAxis#minorTickVisibleProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalMinorTickVisible(javafx.beans.property.Property<Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1MinorTickVisible = false;
        this.obsrv1MinorTickVisible = null;
        this.bound2MinorTickVisible = true;
        this.obsrv2MinorTickVisible = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ValueAxis#tickLabelFormatterProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindTickLabelFormatter(javafx.beans.value.ObservableValue<? extends javafx.util.StringConverter<T>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1TickLabelFormatter = true;
        this.obsrv1TickLabelFormatter = source;
        this.bound2TickLabelFormatter = false;
        this.obsrv2TickLabelFormatter = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link ValueAxis#tickLabelFormatterProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalTickLabelFormatter(javafx.beans.property.Property<javafx.util.StringConverter<T>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1TickLabelFormatter = false;
        this.obsrv1TickLabelFormatter = null;
        this.bound2TickLabelFormatter = true;
        this.obsrv2TickLabelFormatter = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ValueAxis#upperBoundProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindUpperBound(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1UpperBound = true;
        this.obsrv1UpperBound = source;
        this.bound2UpperBound = false;
        this.obsrv2UpperBound = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link ValueAxis#upperBoundProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalUpperBound(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1UpperBound = false;
        this.obsrv1UpperBound = null;
        this.bound2UpperBound = true;
        this.obsrv2UpperBound = source;
        return (B) this;
    }
}
