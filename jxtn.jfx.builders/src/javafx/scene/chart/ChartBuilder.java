// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.chart;

/**
 * {@link Chart}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class ChartBuilder<Z extends Chart, B extends ChartBuilder<Z, B>>
        extends javafx.scene.layout.RegionBuilder<Z, B>
{

    protected boolean hasAnimated;
    protected boolean valAnimated;

    protected boolean hasLegendSide;
    protected javafx.geometry.Side valLegendSide;

    protected boolean hasLegendVisible;
    protected boolean valLegendVisible;

    protected boolean hasTitle;
    protected java.lang.String valTitle;

    protected boolean hasTitleSide;
    protected javafx.geometry.Side valTitleSide;

    protected boolean boundAnimated;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvAnimated;

    protected boolean boundLegendSide;
    protected javafx.beans.value.ObservableValue<? extends javafx.geometry.Side> obsrvLegendSide;

    protected boolean boundLegendVisible;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvLegendVisible;

    protected boolean boundTitle;
    protected javafx.beans.value.ObservableValue<? extends String> obsrvTitle;

    protected boolean boundTitleSide;
    protected javafx.beans.value.ObservableValue<? extends javafx.geometry.Side> obsrvTitleSide;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasAnimated)
            instance.setAnimated(this.valAnimated);
        if (this.hasLegendSide)
            instance.setLegendSide(this.valLegendSide);
        if (this.hasLegendVisible)
            instance.setLegendVisible(this.valLegendVisible);
        if (this.hasTitle)
            instance.setTitle(this.valTitle);
        if (this.hasTitleSide)
            instance.setTitleSide(this.valTitleSide);
        if (this.boundAnimated)
            instance.animatedProperty().bind(this.obsrvAnimated);
        if (this.boundLegendSide)
            instance.legendSideProperty().bind(this.obsrvLegendSide);
        if (this.boundLegendVisible)
            instance.legendVisibleProperty().bind(this.obsrvLegendVisible);
        if (this.boundTitle)
            instance.titleProperty().bind(this.obsrvTitle);
        if (this.boundTitleSide)
            instance.titleSideProperty().bind(this.obsrvTitleSide);
    }

    /**
     * 設定屬性{@link Chart#setAnimated(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B animated(boolean value)
    {
        this.hasAnimated = true;
        this.valAnimated = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Chart#setLegendSide(javafx.geometry.Side)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B legendSide(javafx.geometry.Side value)
    {
        this.hasLegendSide = true;
        this.valLegendSide = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Chart#setLegendVisible(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B legendVisible(boolean value)
    {
        this.hasLegendVisible = true;
        this.valLegendVisible = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Chart#setTitle(java.lang.String)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B title(java.lang.String value)
    {
        this.hasTitle = true;
        this.valTitle = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Chart#setTitleSide(javafx.geometry.Side)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B titleSide(javafx.geometry.Side value)
    {
        this.hasTitleSide = true;
        this.valTitleSide = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Chart#animatedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindAnimated(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundAnimated = true;
        this.obsrvAnimated = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Chart#legendSideProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindLegendSide(javafx.beans.value.ObservableValue<? extends javafx.geometry.Side> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundLegendSide = true;
        this.obsrvLegendSide = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Chart#legendVisibleProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindLegendVisible(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundLegendVisible = true;
        this.obsrvLegendVisible = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Chart#titleProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindTitle(javafx.beans.value.ObservableValue<? extends String> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundTitle = true;
        this.obsrvTitle = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Chart#titleSideProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindTitleSide(javafx.beans.value.ObservableValue<? extends javafx.geometry.Side> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundTitleSide = true;
        this.obsrvTitleSide = source;
        return (B) this;
    }
}
