// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene;

/**
 * {@link Node}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class NodeBuilder<Z extends Node, B extends NodeBuilder<Z, B>>
        extends jxtn.jfx.builders.AbstractBuilder<Z, B>
{

    protected boolean hasBlendMode;
    protected javafx.scene.effect.BlendMode valBlendMode;

    protected boolean hasCache;
    protected boolean valCache;

    protected boolean hasCacheHint;
    protected javafx.scene.CacheHint valCacheHint;

    protected boolean hasClip;
    protected javafx.scene.Node valClip;

    protected boolean hasCursor;
    protected javafx.scene.Cursor valCursor;

    protected boolean hasDepthTest;
    protected javafx.scene.DepthTest valDepthTest;

    protected boolean hasDisable;
    protected boolean valDisable;

    protected boolean hasEffect;
    protected javafx.scene.effect.Effect valEffect;

    protected boolean hasEventDispatcher;
    protected javafx.event.EventDispatcher valEventDispatcher;

    protected boolean hasFocusTraversable;
    protected boolean valFocusTraversable;

    protected boolean hasId;
    protected java.lang.String valId;

    protected boolean hasInputMethodRequests;
    protected javafx.scene.input.InputMethodRequests valInputMethodRequests;

    protected boolean hasLayoutX;
    protected double valLayoutX;

    protected boolean hasLayoutY;
    protected double valLayoutY;

    protected boolean hasManaged;
    protected boolean valManaged;

    protected boolean hasMouseTransparent;
    protected boolean valMouseTransparent;

    protected boolean hasNodeOrientation;
    protected javafx.geometry.NodeOrientation valNodeOrientation;

    protected boolean hasOnContextMenuRequested;
    protected javafx.event.EventHandler<? super javafx.scene.input.ContextMenuEvent> valOnContextMenuRequested;

    protected boolean hasOnDragDetected;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> valOnDragDetected;

    protected boolean hasOnDragDone;
    protected javafx.event.EventHandler<? super javafx.scene.input.DragEvent> valOnDragDone;

    protected boolean hasOnDragDropped;
    protected javafx.event.EventHandler<? super javafx.scene.input.DragEvent> valOnDragDropped;

    protected boolean hasOnDragEntered;
    protected javafx.event.EventHandler<? super javafx.scene.input.DragEvent> valOnDragEntered;

    protected boolean hasOnDragExited;
    protected javafx.event.EventHandler<? super javafx.scene.input.DragEvent> valOnDragExited;

    protected boolean hasOnDragOver;
    protected javafx.event.EventHandler<? super javafx.scene.input.DragEvent> valOnDragOver;

    protected boolean hasOnInputMethodTextChanged;
    protected javafx.event.EventHandler<? super javafx.scene.input.InputMethodEvent> valOnInputMethodTextChanged;

    protected boolean hasOnKeyPressed;
    protected javafx.event.EventHandler<? super javafx.scene.input.KeyEvent> valOnKeyPressed;

    protected boolean hasOnKeyReleased;
    protected javafx.event.EventHandler<? super javafx.scene.input.KeyEvent> valOnKeyReleased;

    protected boolean hasOnKeyTyped;
    protected javafx.event.EventHandler<? super javafx.scene.input.KeyEvent> valOnKeyTyped;

    protected boolean hasOnMouseClicked;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> valOnMouseClicked;

    protected boolean hasOnMouseDragEntered;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent> valOnMouseDragEntered;

    protected boolean hasOnMouseDragExited;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent> valOnMouseDragExited;

    protected boolean hasOnMouseDragOver;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent> valOnMouseDragOver;

    protected boolean hasOnMouseDragReleased;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent> valOnMouseDragReleased;

    protected boolean hasOnMouseDragged;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> valOnMouseDragged;

    protected boolean hasOnMouseEntered;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> valOnMouseEntered;

    protected boolean hasOnMouseExited;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> valOnMouseExited;

    protected boolean hasOnMouseMoved;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> valOnMouseMoved;

    protected boolean hasOnMousePressed;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> valOnMousePressed;

    protected boolean hasOnMouseReleased;
    protected javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> valOnMouseReleased;

    protected boolean hasOnRotate;
    protected javafx.event.EventHandler<? super javafx.scene.input.RotateEvent> valOnRotate;

    protected boolean hasOnRotationFinished;
    protected javafx.event.EventHandler<? super javafx.scene.input.RotateEvent> valOnRotationFinished;

    protected boolean hasOnRotationStarted;
    protected javafx.event.EventHandler<? super javafx.scene.input.RotateEvent> valOnRotationStarted;

    protected boolean hasOnScroll;
    protected javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent> valOnScroll;

    protected boolean hasOnScrollFinished;
    protected javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent> valOnScrollFinished;

    protected boolean hasOnScrollStarted;
    protected javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent> valOnScrollStarted;

    protected boolean hasOnSwipeDown;
    protected javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent> valOnSwipeDown;

    protected boolean hasOnSwipeLeft;
    protected javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent> valOnSwipeLeft;

    protected boolean hasOnSwipeRight;
    protected javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent> valOnSwipeRight;

    protected boolean hasOnSwipeUp;
    protected javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent> valOnSwipeUp;

    protected boolean hasOnTouchMoved;
    protected javafx.event.EventHandler<? super javafx.scene.input.TouchEvent> valOnTouchMoved;

    protected boolean hasOnTouchPressed;
    protected javafx.event.EventHandler<? super javafx.scene.input.TouchEvent> valOnTouchPressed;

    protected boolean hasOnTouchReleased;
    protected javafx.event.EventHandler<? super javafx.scene.input.TouchEvent> valOnTouchReleased;

    protected boolean hasOnTouchStationary;
    protected javafx.event.EventHandler<? super javafx.scene.input.TouchEvent> valOnTouchStationary;

    protected boolean hasOnZoom;
    protected javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent> valOnZoom;

    protected boolean hasOnZoomFinished;
    protected javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent> valOnZoomFinished;

    protected boolean hasOnZoomStarted;
    protected javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent> valOnZoomStarted;

    protected boolean hasOpacity;
    protected double valOpacity;

    protected boolean hasPickOnBounds;
    protected boolean valPickOnBounds;

    protected boolean hasRotate;
    protected double valRotate;

    protected boolean hasRotationAxis;
    protected javafx.geometry.Point3D valRotationAxis;

    protected boolean hasScaleX;
    protected double valScaleX;

    protected boolean hasScaleY;
    protected double valScaleY;

    protected boolean hasScaleZ;
    protected double valScaleZ;

    protected boolean hasStyle;
    protected java.lang.String valStyle;

    protected boolean hasStyleClass;
    protected java.util.Collection<java.lang.String> valStyleClass;

    protected boolean hasTransforms;
    protected java.util.Collection<javafx.scene.transform.Transform> valTransforms;

    protected boolean hasTranslateX;
    protected double valTranslateX;

    protected boolean hasTranslateY;
    protected double valTranslateY;

    protected boolean hasTranslateZ;
    protected double valTranslateZ;

    protected boolean hasUserData;
    protected java.lang.Object valUserData;

    protected boolean hasVisible;
    protected boolean valVisible;

    protected boolean hasAnchorPane_bottomAnchor;
    protected java.lang.Double valAnchorPane_bottomAnchor;

    protected boolean hasAnchorPane_leftAnchor;
    protected java.lang.Double valAnchorPane_leftAnchor;

    protected boolean hasAnchorPane_rightAnchor;
    protected java.lang.Double valAnchorPane_rightAnchor;

    protected boolean hasAnchorPane_topAnchor;
    protected java.lang.Double valAnchorPane_topAnchor;

    protected boolean hasBorderPane_alignment;
    protected javafx.geometry.Pos valBorderPane_alignment;

    protected boolean hasBorderPane_margin;
    protected javafx.geometry.Insets valBorderPane_margin;

    protected boolean hasFlowPane_margin;
    protected javafx.geometry.Insets valFlowPane_margin;

    protected boolean hasGridPane_columnIndex;
    protected java.lang.Integer valGridPane_columnIndex;

    protected boolean hasGridPane_columnSpan;
    protected java.lang.Integer valGridPane_columnSpan;

    protected boolean hasGridPane_fillHeight;
    protected java.lang.Boolean valGridPane_fillHeight;

    protected boolean hasGridPane_fillWidth;
    protected java.lang.Boolean valGridPane_fillWidth;

    protected boolean hasGridPane_halignment;
    protected javafx.geometry.HPos valGridPane_halignment;

    protected boolean hasGridPane_hgrow;
    protected javafx.scene.layout.Priority valGridPane_hgrow;

    protected boolean hasGridPane_margin;
    protected javafx.geometry.Insets valGridPane_margin;

    protected boolean hasGridPane_rowIndex;
    protected java.lang.Integer valGridPane_rowIndex;

    protected boolean hasGridPane_rowSpan;
    protected java.lang.Integer valGridPane_rowSpan;

    protected boolean hasGridPane_valignment;
    protected javafx.geometry.VPos valGridPane_valignment;

    protected boolean hasGridPane_vgrow;
    protected javafx.scene.layout.Priority valGridPane_vgrow;

    protected boolean hasHBox_hgrow;
    protected javafx.scene.layout.Priority valHBox_hgrow;

    protected boolean hasHBox_margin;
    protected javafx.geometry.Insets valHBox_margin;

    protected boolean hasSplitPane_resizableWithParent;
    protected java.lang.Boolean valSplitPane_resizableWithParent;

    protected boolean hasStackPane_alignment;
    protected javafx.geometry.Pos valStackPane_alignment;

    protected boolean hasStackPane_margin;
    protected javafx.geometry.Insets valStackPane_margin;

    protected boolean hasTilePane_alignment;
    protected javafx.geometry.Pos valTilePane_alignment;

    protected boolean hasTilePane_margin;
    protected javafx.geometry.Insets valTilePane_margin;

    protected boolean hasVBox_margin;
    protected javafx.geometry.Insets valVBox_margin;

    protected boolean hasVBox_vgrow;
    protected javafx.scene.layout.Priority valVBox_vgrow;

    protected boolean boundBlendMode;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.effect.BlendMode> obsrvBlendMode;

    protected boolean boundCacheHint;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.CacheHint> obsrvCacheHint;

    protected boolean boundCache;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvCache;

    protected boolean boundClip;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrvClip;

    protected boolean boundCursor;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.Cursor> obsrvCursor;

    protected boolean boundDepthTest;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.DepthTest> obsrvDepthTest;

    protected boolean boundDisable;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvDisable;

    protected boolean boundEffect;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> obsrvEffect;

    protected boolean boundEventDispatcher;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventDispatcher> obsrvEventDispatcher;

    protected boolean boundFocusTraversable;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvFocusTraversable;

    protected boolean boundId;
    protected javafx.beans.value.ObservableValue<? extends String> obsrvId;

    protected boolean boundInputMethodRequests;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.input.InputMethodRequests> obsrvInputMethodRequests;

    protected boolean boundLayoutX;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvLayoutX;

    protected boolean boundLayoutY;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvLayoutY;

    protected boolean boundManaged;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvManaged;

    protected boolean boundMouseTransparent;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvMouseTransparent;

    protected boolean boundNodeOrientation;
    protected javafx.beans.value.ObservableValue<? extends javafx.geometry.NodeOrientation> obsrvNodeOrientation;

    protected boolean boundOnContextMenuRequested;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ContextMenuEvent>> obsrvOnContextMenuRequested;

    protected boolean boundOnDragDetected;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> obsrvOnDragDetected;

    protected boolean boundOnDragDone;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.DragEvent>> obsrvOnDragDone;

    protected boolean boundOnDragDropped;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.DragEvent>> obsrvOnDragDropped;

    protected boolean boundOnDragEntered;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.DragEvent>> obsrvOnDragEntered;

    protected boolean boundOnDragExited;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.DragEvent>> obsrvOnDragExited;

    protected boolean boundOnDragOver;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.DragEvent>> obsrvOnDragOver;

    protected boolean boundOnInputMethodTextChanged;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.InputMethodEvent>> obsrvOnInputMethodTextChanged;

    protected boolean boundOnKeyPressed;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.KeyEvent>> obsrvOnKeyPressed;

    protected boolean boundOnKeyReleased;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.KeyEvent>> obsrvOnKeyReleased;

    protected boolean boundOnKeyTyped;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.KeyEvent>> obsrvOnKeyTyped;

    protected boolean boundOnMouseClicked;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> obsrvOnMouseClicked;

    protected boolean boundOnMouseDragEntered;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent>> obsrvOnMouseDragEntered;

    protected boolean boundOnMouseDragExited;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent>> obsrvOnMouseDragExited;

    protected boolean boundOnMouseDragOver;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent>> obsrvOnMouseDragOver;

    protected boolean boundOnMouseDragReleased;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent>> obsrvOnMouseDragReleased;

    protected boolean boundOnMouseDragged;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> obsrvOnMouseDragged;

    protected boolean boundOnMouseEntered;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> obsrvOnMouseEntered;

    protected boolean boundOnMouseExited;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> obsrvOnMouseExited;

    protected boolean boundOnMouseMoved;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> obsrvOnMouseMoved;

    protected boolean boundOnMousePressed;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> obsrvOnMousePressed;

    protected boolean boundOnMouseReleased;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> obsrvOnMouseReleased;

    protected boolean boundOnRotate;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.RotateEvent>> obsrvOnRotate;

    protected boolean boundOnRotationFinished;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.RotateEvent>> obsrvOnRotationFinished;

    protected boolean boundOnRotationStarted;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.RotateEvent>> obsrvOnRotationStarted;

    protected boolean boundOnScrollFinished;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent>> obsrvOnScrollFinished;

    protected boolean boundOnScroll;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent>> obsrvOnScroll;

    protected boolean boundOnScrollStarted;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent>> obsrvOnScrollStarted;

    protected boolean boundOnSwipeDown;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent>> obsrvOnSwipeDown;

    protected boolean boundOnSwipeLeft;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent>> obsrvOnSwipeLeft;

    protected boolean boundOnSwipeRight;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent>> obsrvOnSwipeRight;

    protected boolean boundOnSwipeUp;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent>> obsrvOnSwipeUp;

    protected boolean boundOnTouchMoved;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.TouchEvent>> obsrvOnTouchMoved;

    protected boolean boundOnTouchPressed;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.TouchEvent>> obsrvOnTouchPressed;

    protected boolean boundOnTouchReleased;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.TouchEvent>> obsrvOnTouchReleased;

    protected boolean boundOnTouchStationary;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.TouchEvent>> obsrvOnTouchStationary;

    protected boolean boundOnZoomFinished;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent>> obsrvOnZoomFinished;

    protected boolean boundOnZoom;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent>> obsrvOnZoom;

    protected boolean boundOnZoomStarted;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent>> obsrvOnZoomStarted;

    protected boolean boundOpacity;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvOpacity;

    protected boolean boundPickOnBounds;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvPickOnBounds;

    protected boolean boundRotate;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvRotate;

    protected boolean boundRotationAxis;
    protected javafx.beans.value.ObservableValue<? extends javafx.geometry.Point3D> obsrvRotationAxis;

    protected boolean boundScaleX;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvScaleX;

    protected boolean boundScaleY;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvScaleY;

    protected boolean boundScaleZ;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvScaleZ;

    protected boolean boundStyle;
    protected javafx.beans.value.ObservableValue<? extends String> obsrvStyle;

    protected boolean boundTranslateX;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvTranslateX;

    protected boolean boundTranslateY;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvTranslateY;

    protected boolean boundTranslateZ;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvTranslateZ;

    protected boolean boundVisible;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvVisible;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasBlendMode)
            instance.setBlendMode(this.valBlendMode);
        if (this.hasCache)
            instance.setCache(this.valCache);
        if (this.hasCacheHint)
            instance.setCacheHint(this.valCacheHint);
        if (this.hasClip)
            instance.setClip(this.valClip);
        if (this.hasCursor)
            instance.setCursor(this.valCursor);
        if (this.hasDepthTest)
            instance.setDepthTest(this.valDepthTest);
        if (this.hasDisable)
            instance.setDisable(this.valDisable);
        if (this.hasEffect)
            instance.setEffect(this.valEffect);
        if (this.hasEventDispatcher)
            instance.setEventDispatcher(this.valEventDispatcher);
        if (this.hasFocusTraversable)
            instance.setFocusTraversable(this.valFocusTraversable);
        if (this.hasId)
            instance.setId(this.valId);
        if (this.hasInputMethodRequests)
            instance.setInputMethodRequests(this.valInputMethodRequests);
        if (this.hasLayoutX)
            instance.setLayoutX(this.valLayoutX);
        if (this.hasLayoutY)
            instance.setLayoutY(this.valLayoutY);
        if (this.hasManaged)
            instance.setManaged(this.valManaged);
        if (this.hasMouseTransparent)
            instance.setMouseTransparent(this.valMouseTransparent);
        if (this.hasNodeOrientation)
            instance.setNodeOrientation(this.valNodeOrientation);
        if (this.hasOnContextMenuRequested)
            instance.setOnContextMenuRequested(this.valOnContextMenuRequested);
        if (this.hasOnDragDetected)
            instance.setOnDragDetected(this.valOnDragDetected);
        if (this.hasOnDragDone)
            instance.setOnDragDone(this.valOnDragDone);
        if (this.hasOnDragDropped)
            instance.setOnDragDropped(this.valOnDragDropped);
        if (this.hasOnDragEntered)
            instance.setOnDragEntered(this.valOnDragEntered);
        if (this.hasOnDragExited)
            instance.setOnDragExited(this.valOnDragExited);
        if (this.hasOnDragOver)
            instance.setOnDragOver(this.valOnDragOver);
        if (this.hasOnInputMethodTextChanged)
            instance.setOnInputMethodTextChanged(this.valOnInputMethodTextChanged);
        if (this.hasOnKeyPressed)
            instance.setOnKeyPressed(this.valOnKeyPressed);
        if (this.hasOnKeyReleased)
            instance.setOnKeyReleased(this.valOnKeyReleased);
        if (this.hasOnKeyTyped)
            instance.setOnKeyTyped(this.valOnKeyTyped);
        if (this.hasOnMouseClicked)
            instance.setOnMouseClicked(this.valOnMouseClicked);
        if (this.hasOnMouseDragEntered)
            instance.setOnMouseDragEntered(this.valOnMouseDragEntered);
        if (this.hasOnMouseDragExited)
            instance.setOnMouseDragExited(this.valOnMouseDragExited);
        if (this.hasOnMouseDragOver)
            instance.setOnMouseDragOver(this.valOnMouseDragOver);
        if (this.hasOnMouseDragReleased)
            instance.setOnMouseDragReleased(this.valOnMouseDragReleased);
        if (this.hasOnMouseDragged)
            instance.setOnMouseDragged(this.valOnMouseDragged);
        if (this.hasOnMouseEntered)
            instance.setOnMouseEntered(this.valOnMouseEntered);
        if (this.hasOnMouseExited)
            instance.setOnMouseExited(this.valOnMouseExited);
        if (this.hasOnMouseMoved)
            instance.setOnMouseMoved(this.valOnMouseMoved);
        if (this.hasOnMousePressed)
            instance.setOnMousePressed(this.valOnMousePressed);
        if (this.hasOnMouseReleased)
            instance.setOnMouseReleased(this.valOnMouseReleased);
        if (this.hasOnRotate)
            instance.setOnRotate(this.valOnRotate);
        if (this.hasOnRotationFinished)
            instance.setOnRotationFinished(this.valOnRotationFinished);
        if (this.hasOnRotationStarted)
            instance.setOnRotationStarted(this.valOnRotationStarted);
        if (this.hasOnScroll)
            instance.setOnScroll(this.valOnScroll);
        if (this.hasOnScrollFinished)
            instance.setOnScrollFinished(this.valOnScrollFinished);
        if (this.hasOnScrollStarted)
            instance.setOnScrollStarted(this.valOnScrollStarted);
        if (this.hasOnSwipeDown)
            instance.setOnSwipeDown(this.valOnSwipeDown);
        if (this.hasOnSwipeLeft)
            instance.setOnSwipeLeft(this.valOnSwipeLeft);
        if (this.hasOnSwipeRight)
            instance.setOnSwipeRight(this.valOnSwipeRight);
        if (this.hasOnSwipeUp)
            instance.setOnSwipeUp(this.valOnSwipeUp);
        if (this.hasOnTouchMoved)
            instance.setOnTouchMoved(this.valOnTouchMoved);
        if (this.hasOnTouchPressed)
            instance.setOnTouchPressed(this.valOnTouchPressed);
        if (this.hasOnTouchReleased)
            instance.setOnTouchReleased(this.valOnTouchReleased);
        if (this.hasOnTouchStationary)
            instance.setOnTouchStationary(this.valOnTouchStationary);
        if (this.hasOnZoom)
            instance.setOnZoom(this.valOnZoom);
        if (this.hasOnZoomFinished)
            instance.setOnZoomFinished(this.valOnZoomFinished);
        if (this.hasOnZoomStarted)
            instance.setOnZoomStarted(this.valOnZoomStarted);
        if (this.hasOpacity)
            instance.setOpacity(this.valOpacity);
        if (this.hasPickOnBounds)
            instance.setPickOnBounds(this.valPickOnBounds);
        if (this.hasRotate)
            instance.setRotate(this.valRotate);
        if (this.hasRotationAxis)
            instance.setRotationAxis(this.valRotationAxis);
        if (this.hasScaleX)
            instance.setScaleX(this.valScaleX);
        if (this.hasScaleY)
            instance.setScaleY(this.valScaleY);
        if (this.hasScaleZ)
            instance.setScaleZ(this.valScaleZ);
        if (this.hasStyle)
            instance.setStyle(this.valStyle);
        if (this.hasStyleClass)
            instance.getStyleClass().setAll(this.valStyleClass);
        if (this.hasTransforms)
            instance.getTransforms().setAll(this.valTransforms);
        if (this.hasTranslateX)
            instance.setTranslateX(this.valTranslateX);
        if (this.hasTranslateY)
            instance.setTranslateY(this.valTranslateY);
        if (this.hasTranslateZ)
            instance.setTranslateZ(this.valTranslateZ);
        if (this.hasUserData)
            instance.setUserData(this.valUserData);
        if (this.hasVisible)
            instance.setVisible(this.valVisible);
        if (this.hasAnchorPane_bottomAnchor)
            javafx.scene.layout.AnchorPane.setBottomAnchor(instance, this.valAnchorPane_bottomAnchor);
        if (this.hasAnchorPane_leftAnchor)
            javafx.scene.layout.AnchorPane.setLeftAnchor(instance, this.valAnchorPane_leftAnchor);
        if (this.hasAnchorPane_rightAnchor)
            javafx.scene.layout.AnchorPane.setRightAnchor(instance, this.valAnchorPane_rightAnchor);
        if (this.hasAnchorPane_topAnchor)
            javafx.scene.layout.AnchorPane.setTopAnchor(instance, this.valAnchorPane_topAnchor);
        if (this.hasBorderPane_alignment)
            javafx.scene.layout.BorderPane.setAlignment(instance, this.valBorderPane_alignment);
        if (this.hasBorderPane_margin)
            javafx.scene.layout.BorderPane.setMargin(instance, this.valBorderPane_margin);
        if (this.hasFlowPane_margin)
            javafx.scene.layout.FlowPane.setMargin(instance, this.valFlowPane_margin);
        if (this.hasGridPane_columnIndex)
            javafx.scene.layout.GridPane.setColumnIndex(instance, this.valGridPane_columnIndex);
        if (this.hasGridPane_columnSpan)
            javafx.scene.layout.GridPane.setColumnSpan(instance, this.valGridPane_columnSpan);
        if (this.hasGridPane_fillHeight)
            javafx.scene.layout.GridPane.setFillHeight(instance, this.valGridPane_fillHeight);
        if (this.hasGridPane_fillWidth)
            javafx.scene.layout.GridPane.setFillWidth(instance, this.valGridPane_fillWidth);
        if (this.hasGridPane_halignment)
            javafx.scene.layout.GridPane.setHalignment(instance, this.valGridPane_halignment);
        if (this.hasGridPane_hgrow)
            javafx.scene.layout.GridPane.setHgrow(instance, this.valGridPane_hgrow);
        if (this.hasGridPane_margin)
            javafx.scene.layout.GridPane.setMargin(instance, this.valGridPane_margin);
        if (this.hasGridPane_rowIndex)
            javafx.scene.layout.GridPane.setRowIndex(instance, this.valGridPane_rowIndex);
        if (this.hasGridPane_rowSpan)
            javafx.scene.layout.GridPane.setRowSpan(instance, this.valGridPane_rowSpan);
        if (this.hasGridPane_valignment)
            javafx.scene.layout.GridPane.setValignment(instance, this.valGridPane_valignment);
        if (this.hasGridPane_vgrow)
            javafx.scene.layout.GridPane.setVgrow(instance, this.valGridPane_vgrow);
        if (this.hasHBox_hgrow)
            javafx.scene.layout.HBox.setHgrow(instance, this.valHBox_hgrow);
        if (this.hasHBox_margin)
            javafx.scene.layout.HBox.setMargin(instance, this.valHBox_margin);
        if (this.hasSplitPane_resizableWithParent)
            javafx.scene.control.SplitPane.setResizableWithParent(instance, this.valSplitPane_resizableWithParent);
        if (this.hasStackPane_alignment)
            javafx.scene.layout.StackPane.setAlignment(instance, this.valStackPane_alignment);
        if (this.hasStackPane_margin)
            javafx.scene.layout.StackPane.setMargin(instance, this.valStackPane_margin);
        if (this.hasTilePane_alignment)
            javafx.scene.layout.TilePane.setAlignment(instance, this.valTilePane_alignment);
        if (this.hasTilePane_margin)
            javafx.scene.layout.TilePane.setMargin(instance, this.valTilePane_margin);
        if (this.hasVBox_margin)
            javafx.scene.layout.VBox.setMargin(instance, this.valVBox_margin);
        if (this.hasVBox_vgrow)
            javafx.scene.layout.VBox.setVgrow(instance, this.valVBox_vgrow);
        if (this.boundBlendMode)
            instance.blendModeProperty().bind(this.obsrvBlendMode);
        if (this.boundCacheHint)
            instance.cacheHintProperty().bind(this.obsrvCacheHint);
        if (this.boundCache)
            instance.cacheProperty().bind(this.obsrvCache);
        if (this.boundClip)
            instance.clipProperty().bind(this.obsrvClip);
        if (this.boundCursor)
            instance.cursorProperty().bind(this.obsrvCursor);
        if (this.boundDepthTest)
            instance.depthTestProperty().bind(this.obsrvDepthTest);
        if (this.boundDisable)
            instance.disableProperty().bind(this.obsrvDisable);
        if (this.boundEffect)
            instance.effectProperty().bind(this.obsrvEffect);
        if (this.boundEventDispatcher)
            instance.eventDispatcherProperty().bind(this.obsrvEventDispatcher);
        if (this.boundFocusTraversable)
            instance.focusTraversableProperty().bind(this.obsrvFocusTraversable);
        if (this.boundId)
            instance.idProperty().bind(this.obsrvId);
        if (this.boundInputMethodRequests)
            instance.inputMethodRequestsProperty().bind(this.obsrvInputMethodRequests);
        if (this.boundLayoutX)
            instance.layoutXProperty().bind(this.obsrvLayoutX);
        if (this.boundLayoutY)
            instance.layoutYProperty().bind(this.obsrvLayoutY);
        if (this.boundManaged)
            instance.managedProperty().bind(this.obsrvManaged);
        if (this.boundMouseTransparent)
            instance.mouseTransparentProperty().bind(this.obsrvMouseTransparent);
        if (this.boundNodeOrientation)
            instance.nodeOrientationProperty().bind(this.obsrvNodeOrientation);
        if (this.boundOnContextMenuRequested)
            instance.onContextMenuRequestedProperty().bind(this.obsrvOnContextMenuRequested);
        if (this.boundOnDragDetected)
            instance.onDragDetectedProperty().bind(this.obsrvOnDragDetected);
        if (this.boundOnDragDone)
            instance.onDragDoneProperty().bind(this.obsrvOnDragDone);
        if (this.boundOnDragDropped)
            instance.onDragDroppedProperty().bind(this.obsrvOnDragDropped);
        if (this.boundOnDragEntered)
            instance.onDragEnteredProperty().bind(this.obsrvOnDragEntered);
        if (this.boundOnDragExited)
            instance.onDragExitedProperty().bind(this.obsrvOnDragExited);
        if (this.boundOnDragOver)
            instance.onDragOverProperty().bind(this.obsrvOnDragOver);
        if (this.boundOnInputMethodTextChanged)
            instance.onInputMethodTextChangedProperty().bind(this.obsrvOnInputMethodTextChanged);
        if (this.boundOnKeyPressed)
            instance.onKeyPressedProperty().bind(this.obsrvOnKeyPressed);
        if (this.boundOnKeyReleased)
            instance.onKeyReleasedProperty().bind(this.obsrvOnKeyReleased);
        if (this.boundOnKeyTyped)
            instance.onKeyTypedProperty().bind(this.obsrvOnKeyTyped);
        if (this.boundOnMouseClicked)
            instance.onMouseClickedProperty().bind(this.obsrvOnMouseClicked);
        if (this.boundOnMouseDragEntered)
            instance.onMouseDragEnteredProperty().bind(this.obsrvOnMouseDragEntered);
        if (this.boundOnMouseDragExited)
            instance.onMouseDragExitedProperty().bind(this.obsrvOnMouseDragExited);
        if (this.boundOnMouseDragOver)
            instance.onMouseDragOverProperty().bind(this.obsrvOnMouseDragOver);
        if (this.boundOnMouseDragReleased)
            instance.onMouseDragReleasedProperty().bind(this.obsrvOnMouseDragReleased);
        if (this.boundOnMouseDragged)
            instance.onMouseDraggedProperty().bind(this.obsrvOnMouseDragged);
        if (this.boundOnMouseEntered)
            instance.onMouseEnteredProperty().bind(this.obsrvOnMouseEntered);
        if (this.boundOnMouseExited)
            instance.onMouseExitedProperty().bind(this.obsrvOnMouseExited);
        if (this.boundOnMouseMoved)
            instance.onMouseMovedProperty().bind(this.obsrvOnMouseMoved);
        if (this.boundOnMousePressed)
            instance.onMousePressedProperty().bind(this.obsrvOnMousePressed);
        if (this.boundOnMouseReleased)
            instance.onMouseReleasedProperty().bind(this.obsrvOnMouseReleased);
        if (this.boundOnRotate)
            instance.onRotateProperty().bind(this.obsrvOnRotate);
        if (this.boundOnRotationFinished)
            instance.onRotationFinishedProperty().bind(this.obsrvOnRotationFinished);
        if (this.boundOnRotationStarted)
            instance.onRotationStartedProperty().bind(this.obsrvOnRotationStarted);
        if (this.boundOnScrollFinished)
            instance.onScrollFinishedProperty().bind(this.obsrvOnScrollFinished);
        if (this.boundOnScroll)
            instance.onScrollProperty().bind(this.obsrvOnScroll);
        if (this.boundOnScrollStarted)
            instance.onScrollStartedProperty().bind(this.obsrvOnScrollStarted);
        if (this.boundOnSwipeDown)
            instance.onSwipeDownProperty().bind(this.obsrvOnSwipeDown);
        if (this.boundOnSwipeLeft)
            instance.onSwipeLeftProperty().bind(this.obsrvOnSwipeLeft);
        if (this.boundOnSwipeRight)
            instance.onSwipeRightProperty().bind(this.obsrvOnSwipeRight);
        if (this.boundOnSwipeUp)
            instance.onSwipeUpProperty().bind(this.obsrvOnSwipeUp);
        if (this.boundOnTouchMoved)
            instance.onTouchMovedProperty().bind(this.obsrvOnTouchMoved);
        if (this.boundOnTouchPressed)
            instance.onTouchPressedProperty().bind(this.obsrvOnTouchPressed);
        if (this.boundOnTouchReleased)
            instance.onTouchReleasedProperty().bind(this.obsrvOnTouchReleased);
        if (this.boundOnTouchStationary)
            instance.onTouchStationaryProperty().bind(this.obsrvOnTouchStationary);
        if (this.boundOnZoomFinished)
            instance.onZoomFinishedProperty().bind(this.obsrvOnZoomFinished);
        if (this.boundOnZoom)
            instance.onZoomProperty().bind(this.obsrvOnZoom);
        if (this.boundOnZoomStarted)
            instance.onZoomStartedProperty().bind(this.obsrvOnZoomStarted);
        if (this.boundOpacity)
            instance.opacityProperty().bind(this.obsrvOpacity);
        if (this.boundPickOnBounds)
            instance.pickOnBoundsProperty().bind(this.obsrvPickOnBounds);
        if (this.boundRotate)
            instance.rotateProperty().bind(this.obsrvRotate);
        if (this.boundRotationAxis)
            instance.rotationAxisProperty().bind(this.obsrvRotationAxis);
        if (this.boundScaleX)
            instance.scaleXProperty().bind(this.obsrvScaleX);
        if (this.boundScaleY)
            instance.scaleYProperty().bind(this.obsrvScaleY);
        if (this.boundScaleZ)
            instance.scaleZProperty().bind(this.obsrvScaleZ);
        if (this.boundStyle)
            instance.styleProperty().bind(this.obsrvStyle);
        if (this.boundTranslateX)
            instance.translateXProperty().bind(this.obsrvTranslateX);
        if (this.boundTranslateY)
            instance.translateYProperty().bind(this.obsrvTranslateY);
        if (this.boundTranslateZ)
            instance.translateZProperty().bind(this.obsrvTranslateZ);
        if (this.boundVisible)
            instance.visibleProperty().bind(this.obsrvVisible);
    }

    /**
     * 設定屬性{@link Node#setBlendMode}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B blendMode(javafx.scene.effect.BlendMode value)
    {
        this.hasBlendMode = true;
        this.valBlendMode = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setCache}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B cache(boolean value)
    {
        this.hasCache = true;
        this.valCache = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setCacheHint}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B cacheHint(javafx.scene.CacheHint value)
    {
        this.hasCacheHint = true;
        this.valCacheHint = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setClip}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B clip(javafx.scene.Node value)
    {
        this.hasClip = true;
        this.valClip = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setCursor}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B cursor(javafx.scene.Cursor value)
    {
        this.hasCursor = true;
        this.valCursor = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setDepthTest}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B depthTest(javafx.scene.DepthTest value)
    {
        this.hasDepthTest = true;
        this.valDepthTest = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setDisable}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B disable(boolean value)
    {
        this.hasDisable = true;
        this.valDisable = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setEffect}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B effect(javafx.scene.effect.Effect value)
    {
        this.hasEffect = true;
        this.valEffect = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setEventDispatcher}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B eventDispatcher(javafx.event.EventDispatcher value)
    {
        this.hasEventDispatcher = true;
        this.valEventDispatcher = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setFocusTraversable}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B focusTraversable(boolean value)
    {
        this.hasFocusTraversable = true;
        this.valFocusTraversable = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setId}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B id(java.lang.String value)
    {
        this.hasId = true;
        this.valId = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setInputMethodRequests}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B inputMethodRequests(javafx.scene.input.InputMethodRequests value)
    {
        this.hasInputMethodRequests = true;
        this.valInputMethodRequests = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setLayoutX}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B layoutX(double value)
    {
        this.hasLayoutX = true;
        this.valLayoutX = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setLayoutY}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B layoutY(double value)
    {
        this.hasLayoutY = true;
        this.valLayoutY = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setManaged}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B managed(boolean value)
    {
        this.hasManaged = true;
        this.valManaged = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setMouseTransparent}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B mouseTransparent(boolean value)
    {
        this.hasMouseTransparent = true;
        this.valMouseTransparent = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setNodeOrientation}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B nodeOrientation(javafx.geometry.NodeOrientation value)
    {
        this.hasNodeOrientation = true;
        this.valNodeOrientation = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnContextMenuRequested}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onContextMenuRequested(javafx.event.EventHandler<? super javafx.scene.input.ContextMenuEvent> value)
    {
        this.hasOnContextMenuRequested = true;
        this.valOnContextMenuRequested = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnDragDetected}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onDragDetected(javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> value)
    {
        this.hasOnDragDetected = true;
        this.valOnDragDetected = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnDragDone}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onDragDone(javafx.event.EventHandler<? super javafx.scene.input.DragEvent> value)
    {
        this.hasOnDragDone = true;
        this.valOnDragDone = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnDragDropped}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onDragDropped(javafx.event.EventHandler<? super javafx.scene.input.DragEvent> value)
    {
        this.hasOnDragDropped = true;
        this.valOnDragDropped = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnDragEntered}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onDragEntered(javafx.event.EventHandler<? super javafx.scene.input.DragEvent> value)
    {
        this.hasOnDragEntered = true;
        this.valOnDragEntered = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnDragExited}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onDragExited(javafx.event.EventHandler<? super javafx.scene.input.DragEvent> value)
    {
        this.hasOnDragExited = true;
        this.valOnDragExited = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnDragOver}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onDragOver(javafx.event.EventHandler<? super javafx.scene.input.DragEvent> value)
    {
        this.hasOnDragOver = true;
        this.valOnDragOver = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnInputMethodTextChanged}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onInputMethodTextChanged(javafx.event.EventHandler<? super javafx.scene.input.InputMethodEvent> value)
    {
        this.hasOnInputMethodTextChanged = true;
        this.valOnInputMethodTextChanged = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnKeyPressed}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onKeyPressed(javafx.event.EventHandler<? super javafx.scene.input.KeyEvent> value)
    {
        this.hasOnKeyPressed = true;
        this.valOnKeyPressed = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnKeyReleased}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onKeyReleased(javafx.event.EventHandler<? super javafx.scene.input.KeyEvent> value)
    {
        this.hasOnKeyReleased = true;
        this.valOnKeyReleased = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnKeyTyped}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onKeyTyped(javafx.event.EventHandler<? super javafx.scene.input.KeyEvent> value)
    {
        this.hasOnKeyTyped = true;
        this.valOnKeyTyped = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnMouseClicked}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMouseClicked(javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> value)
    {
        this.hasOnMouseClicked = true;
        this.valOnMouseClicked = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnMouseDragEntered}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMouseDragEntered(javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent> value)
    {
        this.hasOnMouseDragEntered = true;
        this.valOnMouseDragEntered = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnMouseDragExited}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMouseDragExited(javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent> value)
    {
        this.hasOnMouseDragExited = true;
        this.valOnMouseDragExited = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnMouseDragOver}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMouseDragOver(javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent> value)
    {
        this.hasOnMouseDragOver = true;
        this.valOnMouseDragOver = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnMouseDragReleased}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMouseDragReleased(javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent> value)
    {
        this.hasOnMouseDragReleased = true;
        this.valOnMouseDragReleased = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnMouseDragged}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMouseDragged(javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> value)
    {
        this.hasOnMouseDragged = true;
        this.valOnMouseDragged = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnMouseEntered}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMouseEntered(javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> value)
    {
        this.hasOnMouseEntered = true;
        this.valOnMouseEntered = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnMouseExited}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMouseExited(javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> value)
    {
        this.hasOnMouseExited = true;
        this.valOnMouseExited = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnMouseMoved}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMouseMoved(javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> value)
    {
        this.hasOnMouseMoved = true;
        this.valOnMouseMoved = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnMousePressed}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMousePressed(javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> value)
    {
        this.hasOnMousePressed = true;
        this.valOnMousePressed = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnMouseReleased}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMouseReleased(javafx.event.EventHandler<? super javafx.scene.input.MouseEvent> value)
    {
        this.hasOnMouseReleased = true;
        this.valOnMouseReleased = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnRotate}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onRotate(javafx.event.EventHandler<? super javafx.scene.input.RotateEvent> value)
    {
        this.hasOnRotate = true;
        this.valOnRotate = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnRotationFinished}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onRotationFinished(javafx.event.EventHandler<? super javafx.scene.input.RotateEvent> value)
    {
        this.hasOnRotationFinished = true;
        this.valOnRotationFinished = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnRotationStarted}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onRotationStarted(javafx.event.EventHandler<? super javafx.scene.input.RotateEvent> value)
    {
        this.hasOnRotationStarted = true;
        this.valOnRotationStarted = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnScroll}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onScroll(javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent> value)
    {
        this.hasOnScroll = true;
        this.valOnScroll = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnScrollFinished}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onScrollFinished(javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent> value)
    {
        this.hasOnScrollFinished = true;
        this.valOnScrollFinished = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnScrollStarted}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onScrollStarted(javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent> value)
    {
        this.hasOnScrollStarted = true;
        this.valOnScrollStarted = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnSwipeDown}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onSwipeDown(javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent> value)
    {
        this.hasOnSwipeDown = true;
        this.valOnSwipeDown = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnSwipeLeft}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onSwipeLeft(javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent> value)
    {
        this.hasOnSwipeLeft = true;
        this.valOnSwipeLeft = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnSwipeRight}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onSwipeRight(javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent> value)
    {
        this.hasOnSwipeRight = true;
        this.valOnSwipeRight = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnSwipeUp}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onSwipeUp(javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent> value)
    {
        this.hasOnSwipeUp = true;
        this.valOnSwipeUp = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnTouchMoved}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onTouchMoved(javafx.event.EventHandler<? super javafx.scene.input.TouchEvent> value)
    {
        this.hasOnTouchMoved = true;
        this.valOnTouchMoved = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnTouchPressed}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onTouchPressed(javafx.event.EventHandler<? super javafx.scene.input.TouchEvent> value)
    {
        this.hasOnTouchPressed = true;
        this.valOnTouchPressed = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnTouchReleased}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onTouchReleased(javafx.event.EventHandler<? super javafx.scene.input.TouchEvent> value)
    {
        this.hasOnTouchReleased = true;
        this.valOnTouchReleased = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnTouchStationary}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onTouchStationary(javafx.event.EventHandler<? super javafx.scene.input.TouchEvent> value)
    {
        this.hasOnTouchStationary = true;
        this.valOnTouchStationary = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnZoom}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onZoom(javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent> value)
    {
        this.hasOnZoom = true;
        this.valOnZoom = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnZoomFinished}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onZoomFinished(javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent> value)
    {
        this.hasOnZoomFinished = true;
        this.valOnZoomFinished = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOnZoomStarted}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onZoomStarted(javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent> value)
    {
        this.hasOnZoomStarted = true;
        this.valOnZoomStarted = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setOpacity}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B opacity(double value)
    {
        this.hasOpacity = true;
        this.valOpacity = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setPickOnBounds}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B pickOnBounds(boolean value)
    {
        this.hasPickOnBounds = true;
        this.valPickOnBounds = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setRotate}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B rotate(double value)
    {
        this.hasRotate = true;
        this.valRotate = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setRotationAxis}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B rotationAxis(javafx.geometry.Point3D value)
    {
        this.hasRotationAxis = true;
        this.valRotationAxis = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setScaleX}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B scaleX(double value)
    {
        this.hasScaleX = true;
        this.valScaleX = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setScaleY}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B scaleY(double value)
    {
        this.hasScaleY = true;
        this.valScaleY = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setScaleZ}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B scaleZ(double value)
    {
        this.hasScaleZ = true;
        this.valScaleZ = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setStyle}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B style(java.lang.String value)
    {
        this.hasStyle = true;
        this.valStyle = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link Node#getStyleClass}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B styleClass(java.util.Collection<java.lang.String> value)
    {
        this.hasStyleClass = true;
        this.valStyleClass = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link Node#getStyleClass}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B styleClass(java.lang.String... value)
    {
        this.hasStyleClass = true;
        this.valStyleClass = java.util.Arrays.asList(value);
        return (B) this;
    }

    /**
     * 設定集合屬性{@link Node#getTransforms}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B transforms(java.util.Collection<javafx.scene.transform.Transform> value)
    {
        this.hasTransforms = true;
        this.valTransforms = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link Node#getTransforms}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B transforms(javafx.scene.transform.Transform... value)
    {
        this.hasTransforms = true;
        this.valTransforms = java.util.Arrays.asList(value);
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setTranslateX}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B translateX(double value)
    {
        this.hasTranslateX = true;
        this.valTranslateX = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setTranslateY}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B translateY(double value)
    {
        this.hasTranslateY = true;
        this.valTranslateY = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setTranslateZ}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B translateZ(double value)
    {
        this.hasTranslateZ = true;
        this.valTranslateZ = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setUserData}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B userData(java.lang.Object value)
    {
        this.hasUserData = true;
        this.valUserData = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#setVisible}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B visible(boolean value)
    {
        this.hasVisible = true;
        this.valVisible = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.AnchorPane#setBottomAnchor}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B AnchorPane_bottomAnchor(java.lang.Double value)
    {
        this.hasAnchorPane_bottomAnchor = true;
        this.valAnchorPane_bottomAnchor = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.AnchorPane#setLeftAnchor}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B AnchorPane_leftAnchor(java.lang.Double value)
    {
        this.hasAnchorPane_leftAnchor = true;
        this.valAnchorPane_leftAnchor = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.AnchorPane#setRightAnchor}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B AnchorPane_rightAnchor(java.lang.Double value)
    {
        this.hasAnchorPane_rightAnchor = true;
        this.valAnchorPane_rightAnchor = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.AnchorPane#setTopAnchor}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B AnchorPane_topAnchor(java.lang.Double value)
    {
        this.hasAnchorPane_topAnchor = true;
        this.valAnchorPane_topAnchor = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.BorderPane#setAlignment}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B BorderPane_alignment(javafx.geometry.Pos value)
    {
        this.hasBorderPane_alignment = true;
        this.valBorderPane_alignment = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.BorderPane#setMargin}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B BorderPane_margin(javafx.geometry.Insets value)
    {
        this.hasBorderPane_margin = true;
        this.valBorderPane_margin = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.FlowPane#setMargin}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B FlowPane_margin(javafx.geometry.Insets value)
    {
        this.hasFlowPane_margin = true;
        this.valFlowPane_margin = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.GridPane#setColumnIndex}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B GridPane_columnIndex(java.lang.Integer value)
    {
        this.hasGridPane_columnIndex = true;
        this.valGridPane_columnIndex = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.GridPane#setColumnSpan}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B GridPane_columnSpan(java.lang.Integer value)
    {
        this.hasGridPane_columnSpan = true;
        this.valGridPane_columnSpan = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.GridPane#setFillHeight}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B GridPane_fillHeight(java.lang.Boolean value)
    {
        this.hasGridPane_fillHeight = true;
        this.valGridPane_fillHeight = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.GridPane#setFillWidth}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B GridPane_fillWidth(java.lang.Boolean value)
    {
        this.hasGridPane_fillWidth = true;
        this.valGridPane_fillWidth = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.GridPane#setHalignment}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B GridPane_halignment(javafx.geometry.HPos value)
    {
        this.hasGridPane_halignment = true;
        this.valGridPane_halignment = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.GridPane#setHgrow}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B GridPane_hgrow(javafx.scene.layout.Priority value)
    {
        this.hasGridPane_hgrow = true;
        this.valGridPane_hgrow = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.GridPane#setMargin}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B GridPane_margin(javafx.geometry.Insets value)
    {
        this.hasGridPane_margin = true;
        this.valGridPane_margin = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.GridPane#setRowIndex}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B GridPane_rowIndex(java.lang.Integer value)
    {
        this.hasGridPane_rowIndex = true;
        this.valGridPane_rowIndex = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.GridPane#setRowSpan}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B GridPane_rowSpan(java.lang.Integer value)
    {
        this.hasGridPane_rowSpan = true;
        this.valGridPane_rowSpan = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.GridPane#setValignment}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B GridPane_valignment(javafx.geometry.VPos value)
    {
        this.hasGridPane_valignment = true;
        this.valGridPane_valignment = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.GridPane#setVgrow}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B GridPane_vgrow(javafx.scene.layout.Priority value)
    {
        this.hasGridPane_vgrow = true;
        this.valGridPane_vgrow = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.HBox#setHgrow}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B HBox_hgrow(javafx.scene.layout.Priority value)
    {
        this.hasHBox_hgrow = true;
        this.valHBox_hgrow = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.HBox#setMargin}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B HBox_margin(javafx.geometry.Insets value)
    {
        this.hasHBox_margin = true;
        this.valHBox_margin = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.control.SplitPane#setResizableWithParent}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B SplitPane_resizableWithParent(java.lang.Boolean value)
    {
        this.hasSplitPane_resizableWithParent = true;
        this.valSplitPane_resizableWithParent = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.StackPane#setAlignment}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B StackPane_alignment(javafx.geometry.Pos value)
    {
        this.hasStackPane_alignment = true;
        this.valStackPane_alignment = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.StackPane#setMargin}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B StackPane_margin(javafx.geometry.Insets value)
    {
        this.hasStackPane_margin = true;
        this.valStackPane_margin = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.TilePane#setAlignment}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B TilePane_alignment(javafx.geometry.Pos value)
    {
        this.hasTilePane_alignment = true;
        this.valTilePane_alignment = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.TilePane#setMargin}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B TilePane_margin(javafx.geometry.Insets value)
    {
        this.hasTilePane_margin = true;
        this.valTilePane_margin = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.VBox#setMargin}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B VBox_margin(javafx.geometry.Insets value)
    {
        this.hasVBox_margin = true;
        this.valVBox_margin = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link javafx.scene.layout.VBox#setVgrow}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B VBox_vgrow(javafx.scene.layout.Priority value)
    {
        this.hasVBox_vgrow = true;
        this.valVBox_vgrow = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#blendModeProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindBlendMode(javafx.beans.value.ObservableValue<? extends javafx.scene.effect.BlendMode> source)
    {
        assert (source != null);
        this.boundBlendMode = true;
        this.obsrvBlendMode = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#cacheHintProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindCacheHint(javafx.beans.value.ObservableValue<? extends javafx.scene.CacheHint> source)
    {
        assert (source != null);
        this.boundCacheHint = true;
        this.obsrvCacheHint = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#cacheProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindCache(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundCache = true;
        this.obsrvCache = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#clipProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindClip(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        assert (source != null);
        this.boundClip = true;
        this.obsrvClip = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#cursorProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindCursor(javafx.beans.value.ObservableValue<? extends javafx.scene.Cursor> source)
    {
        assert (source != null);
        this.boundCursor = true;
        this.obsrvCursor = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#depthTestProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindDepthTest(javafx.beans.value.ObservableValue<? extends javafx.scene.DepthTest> source)
    {
        assert (source != null);
        this.boundDepthTest = true;
        this.obsrvDepthTest = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#disableProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindDisable(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundDisable = true;
        this.obsrvDisable = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#effectProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindEffect(javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> source)
    {
        assert (source != null);
        this.boundEffect = true;
        this.obsrvEffect = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#eventDispatcherProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindEventDispatcher(javafx.beans.value.ObservableValue<? extends javafx.event.EventDispatcher> source)
    {
        assert (source != null);
        this.boundEventDispatcher = true;
        this.obsrvEventDispatcher = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#focusTraversableProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindFocusTraversable(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundFocusTraversable = true;
        this.obsrvFocusTraversable = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#idProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindId(javafx.beans.value.ObservableValue<? extends String> source)
    {
        assert (source != null);
        this.boundId = true;
        this.obsrvId = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#inputMethodRequestsProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindInputMethodRequests(javafx.beans.value.ObservableValue<? extends javafx.scene.input.InputMethodRequests> source)
    {
        assert (source != null);
        this.boundInputMethodRequests = true;
        this.obsrvInputMethodRequests = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#layoutXProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindLayoutX(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundLayoutX = true;
        this.obsrvLayoutX = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#layoutYProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindLayoutY(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundLayoutY = true;
        this.obsrvLayoutY = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#managedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindManaged(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundManaged = true;
        this.obsrvManaged = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#mouseTransparentProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindMouseTransparent(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundMouseTransparent = true;
        this.obsrvMouseTransparent = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#nodeOrientationProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindNodeOrientation(javafx.beans.value.ObservableValue<? extends javafx.geometry.NodeOrientation> source)
    {
        assert (source != null);
        this.boundNodeOrientation = true;
        this.obsrvNodeOrientation = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onContextMenuRequestedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnContextMenuRequested(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ContextMenuEvent>> source)
    {
        assert (source != null);
        this.boundOnContextMenuRequested = true;
        this.obsrvOnContextMenuRequested = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onDragDetectedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnDragDetected(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> source)
    {
        assert (source != null);
        this.boundOnDragDetected = true;
        this.obsrvOnDragDetected = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onDragDoneProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnDragDone(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.DragEvent>> source)
    {
        assert (source != null);
        this.boundOnDragDone = true;
        this.obsrvOnDragDone = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onDragDroppedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnDragDropped(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.DragEvent>> source)
    {
        assert (source != null);
        this.boundOnDragDropped = true;
        this.obsrvOnDragDropped = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onDragEnteredProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnDragEntered(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.DragEvent>> source)
    {
        assert (source != null);
        this.boundOnDragEntered = true;
        this.obsrvOnDragEntered = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onDragExitedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnDragExited(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.DragEvent>> source)
    {
        assert (source != null);
        this.boundOnDragExited = true;
        this.obsrvOnDragExited = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onDragOverProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnDragOver(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.DragEvent>> source)
    {
        assert (source != null);
        this.boundOnDragOver = true;
        this.obsrvOnDragOver = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onInputMethodTextChangedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnInputMethodTextChanged(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.InputMethodEvent>> source)
    {
        assert (source != null);
        this.boundOnInputMethodTextChanged = true;
        this.obsrvOnInputMethodTextChanged = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onKeyPressedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnKeyPressed(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.KeyEvent>> source)
    {
        assert (source != null);
        this.boundOnKeyPressed = true;
        this.obsrvOnKeyPressed = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onKeyReleasedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnKeyReleased(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.KeyEvent>> source)
    {
        assert (source != null);
        this.boundOnKeyReleased = true;
        this.obsrvOnKeyReleased = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onKeyTypedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnKeyTyped(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.KeyEvent>> source)
    {
        assert (source != null);
        this.boundOnKeyTyped = true;
        this.obsrvOnKeyTyped = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onMouseClickedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnMouseClicked(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> source)
    {
        assert (source != null);
        this.boundOnMouseClicked = true;
        this.obsrvOnMouseClicked = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onMouseDragEnteredProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnMouseDragEntered(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent>> source)
    {
        assert (source != null);
        this.boundOnMouseDragEntered = true;
        this.obsrvOnMouseDragEntered = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onMouseDragExitedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnMouseDragExited(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent>> source)
    {
        assert (source != null);
        this.boundOnMouseDragExited = true;
        this.obsrvOnMouseDragExited = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onMouseDragOverProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnMouseDragOver(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent>> source)
    {
        assert (source != null);
        this.boundOnMouseDragOver = true;
        this.obsrvOnMouseDragOver = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onMouseDragReleasedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnMouseDragReleased(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseDragEvent>> source)
    {
        assert (source != null);
        this.boundOnMouseDragReleased = true;
        this.obsrvOnMouseDragReleased = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onMouseDraggedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnMouseDragged(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> source)
    {
        assert (source != null);
        this.boundOnMouseDragged = true;
        this.obsrvOnMouseDragged = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onMouseEnteredProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnMouseEntered(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> source)
    {
        assert (source != null);
        this.boundOnMouseEntered = true;
        this.obsrvOnMouseEntered = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onMouseExitedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnMouseExited(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> source)
    {
        assert (source != null);
        this.boundOnMouseExited = true;
        this.obsrvOnMouseExited = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onMouseMovedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnMouseMoved(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> source)
    {
        assert (source != null);
        this.boundOnMouseMoved = true;
        this.obsrvOnMouseMoved = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onMousePressedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnMousePressed(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> source)
    {
        assert (source != null);
        this.boundOnMousePressed = true;
        this.obsrvOnMousePressed = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onMouseReleasedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnMouseReleased(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.MouseEvent>> source)
    {
        assert (source != null);
        this.boundOnMouseReleased = true;
        this.obsrvOnMouseReleased = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onRotateProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnRotate(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.RotateEvent>> source)
    {
        assert (source != null);
        this.boundOnRotate = true;
        this.obsrvOnRotate = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onRotationFinishedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnRotationFinished(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.RotateEvent>> source)
    {
        assert (source != null);
        this.boundOnRotationFinished = true;
        this.obsrvOnRotationFinished = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onRotationStartedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnRotationStarted(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.RotateEvent>> source)
    {
        assert (source != null);
        this.boundOnRotationStarted = true;
        this.obsrvOnRotationStarted = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onScrollFinishedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnScrollFinished(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent>> source)
    {
        assert (source != null);
        this.boundOnScrollFinished = true;
        this.obsrvOnScrollFinished = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onScrollProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnScroll(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent>> source)
    {
        assert (source != null);
        this.boundOnScroll = true;
        this.obsrvOnScroll = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onScrollStartedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnScrollStarted(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ScrollEvent>> source)
    {
        assert (source != null);
        this.boundOnScrollStarted = true;
        this.obsrvOnScrollStarted = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onSwipeDownProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnSwipeDown(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent>> source)
    {
        assert (source != null);
        this.boundOnSwipeDown = true;
        this.obsrvOnSwipeDown = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onSwipeLeftProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnSwipeLeft(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent>> source)
    {
        assert (source != null);
        this.boundOnSwipeLeft = true;
        this.obsrvOnSwipeLeft = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onSwipeRightProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnSwipeRight(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent>> source)
    {
        assert (source != null);
        this.boundOnSwipeRight = true;
        this.obsrvOnSwipeRight = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onSwipeUpProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnSwipeUp(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.SwipeEvent>> source)
    {
        assert (source != null);
        this.boundOnSwipeUp = true;
        this.obsrvOnSwipeUp = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onTouchMovedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnTouchMoved(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.TouchEvent>> source)
    {
        assert (source != null);
        this.boundOnTouchMoved = true;
        this.obsrvOnTouchMoved = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onTouchPressedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnTouchPressed(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.TouchEvent>> source)
    {
        assert (source != null);
        this.boundOnTouchPressed = true;
        this.obsrvOnTouchPressed = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onTouchReleasedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnTouchReleased(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.TouchEvent>> source)
    {
        assert (source != null);
        this.boundOnTouchReleased = true;
        this.obsrvOnTouchReleased = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onTouchStationaryProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnTouchStationary(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.TouchEvent>> source)
    {
        assert (source != null);
        this.boundOnTouchStationary = true;
        this.obsrvOnTouchStationary = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onZoomFinishedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnZoomFinished(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent>> source)
    {
        assert (source != null);
        this.boundOnZoomFinished = true;
        this.obsrvOnZoomFinished = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onZoomProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnZoom(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent>> source)
    {
        assert (source != null);
        this.boundOnZoom = true;
        this.obsrvOnZoom = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#onZoomStartedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnZoomStarted(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<? super javafx.scene.input.ZoomEvent>> source)
    {
        assert (source != null);
        this.boundOnZoomStarted = true;
        this.obsrvOnZoomStarted = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#opacityProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOpacity(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundOpacity = true;
        this.obsrvOpacity = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#pickOnBoundsProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindPickOnBounds(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundPickOnBounds = true;
        this.obsrvPickOnBounds = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#rotateProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindRotate(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundRotate = true;
        this.obsrvRotate = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#rotationAxisProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindRotationAxis(javafx.beans.value.ObservableValue<? extends javafx.geometry.Point3D> source)
    {
        assert (source != null);
        this.boundRotationAxis = true;
        this.obsrvRotationAxis = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#scaleXProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindScaleX(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundScaleX = true;
        this.obsrvScaleX = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#scaleYProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindScaleY(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundScaleY = true;
        this.obsrvScaleY = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#scaleZProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindScaleZ(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundScaleZ = true;
        this.obsrvScaleZ = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#styleProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindStyle(javafx.beans.value.ObservableValue<? extends String> source)
    {
        assert (source != null);
        this.boundStyle = true;
        this.obsrvStyle = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#translateXProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindTranslateX(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundTranslateX = true;
        this.obsrvTranslateX = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#translateYProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindTranslateY(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundTranslateY = true;
        this.obsrvTranslateY = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#translateZProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindTranslateZ(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundTranslateZ = true;
        this.obsrvTranslateZ = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Node#visibleProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindVisible(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundVisible = true;
        this.obsrvVisible = source;
        return (B) this;
    }
}
