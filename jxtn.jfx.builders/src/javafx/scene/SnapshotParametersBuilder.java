// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene;

/**
 * {@link SnapshotParameters}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class SnapshotParametersBuilder<Z extends SnapshotParameters, B extends SnapshotParametersBuilder<Z, B>>
        extends jxtn.jfx.builders.AbstractBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasCamera;
    protected javafx.scene.Camera valCamera;

    protected boolean hasDepthBuffer;
    protected boolean valDepthBuffer;

    protected boolean hasFill;
    protected javafx.scene.paint.Paint valFill;

    protected boolean hasTransform;
    protected javafx.scene.transform.Transform valTransform;

    protected boolean hasViewport;
    protected javafx.geometry.Rectangle2D valViewport;
    public void applyTo(SnapshotParameters instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasCamera)
            instance.setCamera(this.valCamera);
        if (this.hasDepthBuffer)
            instance.setDepthBuffer(this.valDepthBuffer);
        if (this.hasFill)
            instance.setFill(this.valFill);
        if (this.hasTransform)
            instance.setTransform(this.valTransform);
        if (this.hasViewport)
            instance.setViewport(this.valViewport);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B camera(javafx.scene.Camera value)
    {
        this.hasCamera = true;
        this.valCamera = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B depthBuffer(boolean value)
    {
        this.hasDepthBuffer = true;
        this.valDepthBuffer = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B fill(javafx.scene.paint.Paint value)
    {
        this.hasFill = true;
        this.valFill = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B transform(javafx.scene.transform.Transform value)
    {
        this.hasTransform = true;
        this.valTransform = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B viewport(javafx.geometry.Rectangle2D value)
    {
        this.hasViewport = true;
        this.valViewport = value;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SnapshotParameters build()
    {
        SnapshotParameters instance = new SnapshotParameters();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
