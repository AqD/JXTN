// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene;

/**
 * {@link Parent}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class ParentBuilder<Z extends Parent, B extends ParentBuilder<Z, B>>
        extends javafx.scene.NodeBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasChildrenUnmodifiable;
    protected java.util.Collection<javafx.scene.Node> valChildrenUnmodifiable;

    protected boolean hasStylesheets;
    protected java.util.Collection<java.lang.String> valStylesheets;
    public void applyTo(Parent instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasChildrenUnmodifiable)
            instance.getChildrenUnmodifiable().setAll(this.valChildrenUnmodifiable);
        if (this.hasStylesheets)
            instance.getStylesheets().setAll(this.valStylesheets);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B childrenUnmodifiable(java.util.Collection<javafx.scene.Node> value)
    {
        this.hasChildrenUnmodifiable = true;
        this.valChildrenUnmodifiable = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B childrenUnmodifiable(javafx.scene.Node... value)
    {
        this.hasChildrenUnmodifiable = true;
        this.valChildrenUnmodifiable = java.util.Arrays.asList(value);
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B stylesheets(java.util.Collection<java.lang.String> value)
    {
        this.hasStylesheets = true;
        this.valStylesheets = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B stylesheets(java.lang.String... value)
    {
        this.hasStylesheets = true;
        this.valStylesheets = java.util.Arrays.asList(value);
        return (B) this;
    }
}
