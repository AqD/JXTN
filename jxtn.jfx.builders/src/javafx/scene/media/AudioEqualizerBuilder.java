// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.media;

/**
 * {@link AudioEqualizer}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class AudioEqualizerBuilder<Z extends AudioEqualizer, B extends AudioEqualizerBuilder<Z, B>>
        extends jxtn.jfx.builders.AbstractBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasBands;
    protected java.util.Collection<javafx.scene.media.EqualizerBand> valBands;

    protected boolean hasEnabled;
    protected boolean valEnabled;
    public void applyTo(AudioEqualizer instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasBands)
            instance.getBands().setAll(this.valBands);
        if (this.hasEnabled)
            instance.setEnabled(this.valEnabled);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B bands(java.util.Collection<javafx.scene.media.EqualizerBand> value)
    {
        this.hasBands = true;
        this.valBands = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B bands(javafx.scene.media.EqualizerBand... value)
    {
        this.hasBands = true;
        this.valBands = java.util.Arrays.asList(value);
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B enabled(boolean value)
    {
        this.hasEnabled = true;
        this.valEnabled = value;
        return (B) this;
    }
}
