// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.paint;

/**
 * {@link PhongMaterial}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class PhongMaterialBuilder<Z extends PhongMaterial, B extends PhongMaterialBuilder<Z, B>>
        extends javafx.scene.paint.MaterialBuilder<Z, B>
{

    protected boolean hasBumpMap;
    protected javafx.scene.image.Image valBumpMap;

    protected boolean hasDiffuseColor;
    protected javafx.scene.paint.Color valDiffuseColor;

    protected boolean hasDiffuseMap;
    protected javafx.scene.image.Image valDiffuseMap;

    protected boolean hasSelfIlluminationMap;
    protected javafx.scene.image.Image valSelfIlluminationMap;

    protected boolean hasSpecularColor;
    protected javafx.scene.paint.Color valSpecularColor;

    protected boolean hasSpecularMap;
    protected javafx.scene.image.Image valSpecularMap;

    protected boolean hasSpecularPower;
    protected double valSpecularPower;

    protected boolean boundBumpMap;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.image.Image> obsrvBumpMap;

    protected boolean boundDiffuseColor;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.paint.Color> obsrvDiffuseColor;

    protected boolean boundDiffuseMap;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.image.Image> obsrvDiffuseMap;

    protected boolean boundSelfIlluminationMap;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.image.Image> obsrvSelfIlluminationMap;

    protected boolean boundSpecularColor;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.paint.Color> obsrvSpecularColor;

    protected boolean boundSpecularMap;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.image.Image> obsrvSpecularMap;

    protected boolean boundSpecularPower;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvSpecularPower;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasBumpMap)
            instance.setBumpMap(this.valBumpMap);
        if (this.hasDiffuseColor)
            instance.setDiffuseColor(this.valDiffuseColor);
        if (this.hasDiffuseMap)
            instance.setDiffuseMap(this.valDiffuseMap);
        if (this.hasSelfIlluminationMap)
            instance.setSelfIlluminationMap(this.valSelfIlluminationMap);
        if (this.hasSpecularColor)
            instance.setSpecularColor(this.valSpecularColor);
        if (this.hasSpecularMap)
            instance.setSpecularMap(this.valSpecularMap);
        if (this.hasSpecularPower)
            instance.setSpecularPower(this.valSpecularPower);
        if (this.boundBumpMap)
            instance.bumpMapProperty().bind(this.obsrvBumpMap);
        if (this.boundDiffuseColor)
            instance.diffuseColorProperty().bind(this.obsrvDiffuseColor);
        if (this.boundDiffuseMap)
            instance.diffuseMapProperty().bind(this.obsrvDiffuseMap);
        if (this.boundSelfIlluminationMap)
            instance.selfIlluminationMapProperty().bind(this.obsrvSelfIlluminationMap);
        if (this.boundSpecularColor)
            instance.specularColorProperty().bind(this.obsrvSpecularColor);
        if (this.boundSpecularMap)
            instance.specularMapProperty().bind(this.obsrvSpecularMap);
        if (this.boundSpecularPower)
            instance.specularPowerProperty().bind(this.obsrvSpecularPower);
    }

    /**
     * 設定屬性{@link PhongMaterial#setBumpMap(javafx.scene.image.Image)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bumpMap(javafx.scene.image.Image value)
    {
        this.hasBumpMap = true;
        this.valBumpMap = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PhongMaterial#setDiffuseColor(javafx.scene.paint.Color)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B diffuseColor(javafx.scene.paint.Color value)
    {
        this.hasDiffuseColor = true;
        this.valDiffuseColor = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PhongMaterial#setDiffuseMap(javafx.scene.image.Image)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B diffuseMap(javafx.scene.image.Image value)
    {
        this.hasDiffuseMap = true;
        this.valDiffuseMap = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PhongMaterial#setSelfIlluminationMap(javafx.scene.image.Image)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B selfIlluminationMap(javafx.scene.image.Image value)
    {
        this.hasSelfIlluminationMap = true;
        this.valSelfIlluminationMap = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PhongMaterial#setSpecularColor(javafx.scene.paint.Color)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B specularColor(javafx.scene.paint.Color value)
    {
        this.hasSpecularColor = true;
        this.valSpecularColor = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PhongMaterial#setSpecularMap(javafx.scene.image.Image)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B specularMap(javafx.scene.image.Image value)
    {
        this.hasSpecularMap = true;
        this.valSpecularMap = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PhongMaterial#setSpecularPower(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B specularPower(double value)
    {
        this.hasSpecularPower = true;
        this.valSpecularPower = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PhongMaterial#bumpMapProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBumpMap(javafx.beans.value.ObservableValue<? extends javafx.scene.image.Image> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundBumpMap = true;
        this.obsrvBumpMap = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PhongMaterial#diffuseColorProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindDiffuseColor(javafx.beans.value.ObservableValue<? extends javafx.scene.paint.Color> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundDiffuseColor = true;
        this.obsrvDiffuseColor = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PhongMaterial#diffuseMapProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindDiffuseMap(javafx.beans.value.ObservableValue<? extends javafx.scene.image.Image> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundDiffuseMap = true;
        this.obsrvDiffuseMap = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PhongMaterial#selfIlluminationMapProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindSelfIlluminationMap(javafx.beans.value.ObservableValue<? extends javafx.scene.image.Image> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundSelfIlluminationMap = true;
        this.obsrvSelfIlluminationMap = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PhongMaterial#specularColorProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindSpecularColor(javafx.beans.value.ObservableValue<? extends javafx.scene.paint.Color> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundSpecularColor = true;
        this.obsrvSpecularColor = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PhongMaterial#specularMapProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindSpecularMap(javafx.beans.value.ObservableValue<? extends javafx.scene.image.Image> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundSpecularMap = true;
        this.obsrvSpecularMap = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PhongMaterial#specularPowerProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindSpecularPower(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundSpecularPower = true;
        this.obsrvSpecularPower = source;
        return (B) this;
    }

    /**
     * 建構{@link PhongMaterial}物件
     *
     * @return 新的{@link PhongMaterial}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public PhongMaterial build()
    {
        PhongMaterial instance = new PhongMaterial();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
