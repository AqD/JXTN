// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.effect;

/**
 * {@link DropShadow}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link DropShadow})
 * @param <B> 建構器本身的型態(需繼承{@link DropShadowBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class DropShadowBuilder<Z extends DropShadow, B extends DropShadowBuilder<Z, B>>
        extends javafx.scene.effect.EffectBuilder<Z, B>
        implements DropShadowBuilderExt<Z, B>
{

    private boolean hasBlurType;
    private javafx.scene.effect.BlurType valBlurType;

    private boolean hasColor;
    private javafx.scene.paint.Color valColor;

    private boolean hasHeight;
    private double valHeight;

    private boolean hasInput;
    private javafx.scene.effect.Effect valInput;

    private boolean hasOffsetX;
    private double valOffsetX;

    private boolean hasOffsetY;
    private double valOffsetY;

    private boolean hasRadius;
    private double valRadius;

    private boolean hasSpread;
    private double valSpread;

    private boolean hasWidth;
    private double valWidth;

    private boolean bound1BlurType;
    private boolean bound2BlurType;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.effect.BlurType> obsrv1BlurType;
    private javafx.beans.property.Property<javafx.scene.effect.BlurType> obsrv2BlurType;

    private boolean bound1Color;
    private boolean bound2Color;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.paint.Color> obsrv1Color;
    private javafx.beans.property.Property<javafx.scene.paint.Color> obsrv2Color;

    private boolean bound1Height;
    private boolean bound2Height;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1Height;
    private javafx.beans.property.Property<Number> obsrv2Height;

    private boolean bound1Input;
    private boolean bound2Input;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> obsrv1Input;
    private javafx.beans.property.Property<javafx.scene.effect.Effect> obsrv2Input;

    private boolean bound1OffsetX;
    private boolean bound2OffsetX;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1OffsetX;
    private javafx.beans.property.Property<Number> obsrv2OffsetX;

    private boolean bound1OffsetY;
    private boolean bound2OffsetY;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1OffsetY;
    private javafx.beans.property.Property<Number> obsrv2OffsetY;

    private boolean bound1Radius;
    private boolean bound2Radius;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1Radius;
    private javafx.beans.property.Property<Number> obsrv2Radius;

    private boolean bound1Spread;
    private boolean bound2Spread;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1Spread;
    private javafx.beans.property.Property<Number> obsrv2Spread;

    private boolean bound1Width;
    private boolean bound2Width;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1Width;
    private javafx.beans.property.Property<Number> obsrv2Width;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasBlurType)
            instance.setBlurType(this.valBlurType);
        if (this.hasColor)
            instance.setColor(this.valColor);
        if (this.hasHeight)
            instance.setHeight(this.valHeight);
        if (this.hasInput)
            instance.setInput(this.valInput);
        if (this.hasOffsetX)
            instance.setOffsetX(this.valOffsetX);
        if (this.hasOffsetY)
            instance.setOffsetY(this.valOffsetY);
        if (this.hasRadius)
            instance.setRadius(this.valRadius);
        if (this.hasSpread)
            instance.setSpread(this.valSpread);
        if (this.hasWidth)
            instance.setWidth(this.valWidth);
        if (this.bound1BlurType)
            instance.blurTypeProperty().bind(this.obsrv1BlurType);
        if (this.bound2BlurType)
            instance.blurTypeProperty().bindBidirectional(this.obsrv2BlurType);
        if (this.bound1Color)
            instance.colorProperty().bind(this.obsrv1Color);
        if (this.bound2Color)
            instance.colorProperty().bindBidirectional(this.obsrv2Color);
        if (this.bound1Height)
            instance.heightProperty().bind(this.obsrv1Height);
        if (this.bound2Height)
            instance.heightProperty().bindBidirectional(this.obsrv2Height);
        if (this.bound1Input)
            instance.inputProperty().bind(this.obsrv1Input);
        if (this.bound2Input)
            instance.inputProperty().bindBidirectional(this.obsrv2Input);
        if (this.bound1OffsetX)
            instance.offsetXProperty().bind(this.obsrv1OffsetX);
        if (this.bound2OffsetX)
            instance.offsetXProperty().bindBidirectional(this.obsrv2OffsetX);
        if (this.bound1OffsetY)
            instance.offsetYProperty().bind(this.obsrv1OffsetY);
        if (this.bound2OffsetY)
            instance.offsetYProperty().bindBidirectional(this.obsrv2OffsetY);
        if (this.bound1Radius)
            instance.radiusProperty().bind(this.obsrv1Radius);
        if (this.bound2Radius)
            instance.radiusProperty().bindBidirectional(this.obsrv2Radius);
        if (this.bound1Spread)
            instance.spreadProperty().bind(this.obsrv1Spread);
        if (this.bound2Spread)
            instance.spreadProperty().bindBidirectional(this.obsrv2Spread);
        if (this.bound1Width)
            instance.widthProperty().bind(this.obsrv1Width);
        if (this.bound2Width)
            instance.widthProperty().bindBidirectional(this.obsrv2Width);
    }

    /**
     * 設定屬性{@link DropShadow#setBlurType(javafx.scene.effect.BlurType)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B blurType(javafx.scene.effect.BlurType value)
    {
        this.hasBlurType = true;
        this.valBlurType = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#setColor(javafx.scene.paint.Color)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B color(javafx.scene.paint.Color value)
    {
        this.hasColor = true;
        this.valColor = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#setHeight(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B height(double value)
    {
        this.hasHeight = true;
        this.valHeight = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#setInput(javafx.scene.effect.Effect)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B input(javafx.scene.effect.Effect value)
    {
        this.hasInput = true;
        this.valInput = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#setOffsetX(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B offsetX(double value)
    {
        this.hasOffsetX = true;
        this.valOffsetX = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#setOffsetY(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B offsetY(double value)
    {
        this.hasOffsetY = true;
        this.valOffsetY = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#setRadius(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B radius(double value)
    {
        this.hasRadius = true;
        this.valRadius = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#setSpread(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B spread(double value)
    {
        this.hasSpread = true;
        this.valSpread = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#setWidth(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B width(double value)
    {
        this.hasWidth = true;
        this.valWidth = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#blurTypeProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBlurType(javafx.beans.value.ObservableValue<? extends javafx.scene.effect.BlurType> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1BlurType = true;
        this.obsrv1BlurType = source;
        this.bound2BlurType = false;
        this.obsrv2BlurType = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#blurTypeProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalBlurType(javafx.beans.property.Property<javafx.scene.effect.BlurType> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1BlurType = false;
        this.obsrv1BlurType = null;
        this.bound2BlurType = true;
        this.obsrv2BlurType = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#colorProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindColor(javafx.beans.value.ObservableValue<? extends javafx.scene.paint.Color> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Color = true;
        this.obsrv1Color = source;
        this.bound2Color = false;
        this.obsrv2Color = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#colorProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalColor(javafx.beans.property.Property<javafx.scene.paint.Color> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Color = false;
        this.obsrv1Color = null;
        this.bound2Color = true;
        this.obsrv2Color = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#heightProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindHeight(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Height = true;
        this.obsrv1Height = source;
        this.bound2Height = false;
        this.obsrv2Height = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#heightProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalHeight(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Height = false;
        this.obsrv1Height = null;
        this.bound2Height = true;
        this.obsrv2Height = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#inputProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindInput(javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Input = true;
        this.obsrv1Input = source;
        this.bound2Input = false;
        this.obsrv2Input = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#inputProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalInput(javafx.beans.property.Property<javafx.scene.effect.Effect> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Input = false;
        this.obsrv1Input = null;
        this.bound2Input = true;
        this.obsrv2Input = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#offsetXProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOffsetX(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OffsetX = true;
        this.obsrv1OffsetX = source;
        this.bound2OffsetX = false;
        this.obsrv2OffsetX = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#offsetXProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOffsetX(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OffsetX = false;
        this.obsrv1OffsetX = null;
        this.bound2OffsetX = true;
        this.obsrv2OffsetX = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#offsetYProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOffsetY(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OffsetY = true;
        this.obsrv1OffsetY = source;
        this.bound2OffsetY = false;
        this.obsrv2OffsetY = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#offsetYProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOffsetY(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OffsetY = false;
        this.obsrv1OffsetY = null;
        this.bound2OffsetY = true;
        this.obsrv2OffsetY = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#radiusProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindRadius(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Radius = true;
        this.obsrv1Radius = source;
        this.bound2Radius = false;
        this.obsrv2Radius = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#radiusProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalRadius(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Radius = false;
        this.obsrv1Radius = null;
        this.bound2Radius = true;
        this.obsrv2Radius = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#spreadProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindSpread(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Spread = true;
        this.obsrv1Spread = source;
        this.bound2Spread = false;
        this.obsrv2Spread = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#spreadProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalSpread(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Spread = false;
        this.obsrv1Spread = null;
        this.bound2Spread = true;
        this.obsrv2Spread = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#widthProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindWidth(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Width = true;
        this.obsrv1Width = source;
        this.bound2Width = false;
        this.obsrv2Width = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link DropShadow#widthProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalWidth(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Width = false;
        this.obsrv1Width = null;
        this.bound2Width = true;
        this.obsrv2Width = source;
        return (B) this;
    }

    /**
     * 建構{@link DropShadow}物件。
     *
     * @return 新的{@link DropShadow}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public DropShadow build()
    {
        DropShadow instance = new DropShadow();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link DropShadow}物件。
     *
     * @return 新的{@link DropShadow}物件實體
     */
    @SuppressWarnings("unchecked")
    public DropShadow build(double arg0, javafx.scene.paint.Color arg1)
    {
        DropShadow instance = new DropShadow(arg0, arg1);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link DropShadow}物件。
     *
     * @return 新的{@link DropShadow}物件實體
     */
    @SuppressWarnings("unchecked")
    public DropShadow build(double arg0, double arg1, double arg2, javafx.scene.paint.Color arg3)
    {
        DropShadow instance = new DropShadow(arg0, arg1, arg2, arg3);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link DropShadow}物件。
     *
     * @return 新的{@link DropShadow}物件實體
     */
    @SuppressWarnings("unchecked")
    public DropShadow build(javafx.scene.effect.BlurType arg0, javafx.scene.paint.Color arg1, double arg2, double arg3, double arg4, double arg5)
    {
        DropShadow instance = new DropShadow(arg0, arg1, arg2, arg3, arg4, arg5);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
