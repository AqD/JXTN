// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.effect;

/**
 * {@link Light}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class LightBuilder<Z extends Light, B extends LightBuilder<Z, B>>
        extends jxtn.jfx.builders.AbstractBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasColor;
    protected javafx.scene.paint.Color valColor;

    protected boolean boundColor;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.paint.Color> obsrvColor;
    public void applyTo(Light instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasColor)
            instance.setColor(this.valColor);
        if (this.boundColor)
            instance.colorProperty().bind(this.obsrvColor);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B color(javafx.scene.paint.Color value)
    {
        this.hasColor = true;
        this.valColor = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindColor(javafx.beans.value.ObservableValue<? extends javafx.scene.paint.Color> source)
    {
        assert (source != null);
        this.boundColor = true;
        this.obsrvColor = source;
        return (B) this;
    }
}
