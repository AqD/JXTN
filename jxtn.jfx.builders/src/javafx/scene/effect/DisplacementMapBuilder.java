// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.effect;

/**
 * {@link DisplacementMap}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link DisplacementMap})
 * @param <B> 建構器本身的型態(需繼承{@link DisplacementMapBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class DisplacementMapBuilder<Z extends DisplacementMap, B extends DisplacementMapBuilder<Z, B>>
        extends javafx.scene.effect.EffectBuilder<Z, B>
        implements DisplacementMapBuilderExt<Z, B>
{

    private boolean hasInput;
    private javafx.scene.effect.Effect valInput;

    private boolean hasMapData;
    private javafx.scene.effect.FloatMap valMapData;

    private boolean hasOffsetX;
    private double valOffsetX;

    private boolean hasOffsetY;
    private double valOffsetY;

    private boolean hasScaleX;
    private double valScaleX;

    private boolean hasScaleY;
    private double valScaleY;

    private boolean hasWrap;
    private boolean valWrap;

    private boolean bound1Input;
    private boolean bound2Input;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> obsrv1Input;
    private javafx.beans.property.Property<javafx.scene.effect.Effect> obsrv2Input;

    private boolean bound1MapData;
    private boolean bound2MapData;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.effect.FloatMap> obsrv1MapData;
    private javafx.beans.property.Property<javafx.scene.effect.FloatMap> obsrv2MapData;

    private boolean bound1OffsetX;
    private boolean bound2OffsetX;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1OffsetX;
    private javafx.beans.property.Property<Number> obsrv2OffsetX;

    private boolean bound1OffsetY;
    private boolean bound2OffsetY;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1OffsetY;
    private javafx.beans.property.Property<Number> obsrv2OffsetY;

    private boolean bound1ScaleX;
    private boolean bound2ScaleX;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1ScaleX;
    private javafx.beans.property.Property<Number> obsrv2ScaleX;

    private boolean bound1ScaleY;
    private boolean bound2ScaleY;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1ScaleY;
    private javafx.beans.property.Property<Number> obsrv2ScaleY;

    private boolean bound1Wrap;
    private boolean bound2Wrap;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrv1Wrap;
    private javafx.beans.property.Property<Boolean> obsrv2Wrap;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasInput)
            instance.setInput(this.valInput);
        if (this.hasMapData)
            instance.setMapData(this.valMapData);
        if (this.hasOffsetX)
            instance.setOffsetX(this.valOffsetX);
        if (this.hasOffsetY)
            instance.setOffsetY(this.valOffsetY);
        if (this.hasScaleX)
            instance.setScaleX(this.valScaleX);
        if (this.hasScaleY)
            instance.setScaleY(this.valScaleY);
        if (this.hasWrap)
            instance.setWrap(this.valWrap);
        if (this.bound1Input)
            instance.inputProperty().bind(this.obsrv1Input);
        if (this.bound2Input)
            instance.inputProperty().bindBidirectional(this.obsrv2Input);
        if (this.bound1MapData)
            instance.mapDataProperty().bind(this.obsrv1MapData);
        if (this.bound2MapData)
            instance.mapDataProperty().bindBidirectional(this.obsrv2MapData);
        if (this.bound1OffsetX)
            instance.offsetXProperty().bind(this.obsrv1OffsetX);
        if (this.bound2OffsetX)
            instance.offsetXProperty().bindBidirectional(this.obsrv2OffsetX);
        if (this.bound1OffsetY)
            instance.offsetYProperty().bind(this.obsrv1OffsetY);
        if (this.bound2OffsetY)
            instance.offsetYProperty().bindBidirectional(this.obsrv2OffsetY);
        if (this.bound1ScaleX)
            instance.scaleXProperty().bind(this.obsrv1ScaleX);
        if (this.bound2ScaleX)
            instance.scaleXProperty().bindBidirectional(this.obsrv2ScaleX);
        if (this.bound1ScaleY)
            instance.scaleYProperty().bind(this.obsrv1ScaleY);
        if (this.bound2ScaleY)
            instance.scaleYProperty().bindBidirectional(this.obsrv2ScaleY);
        if (this.bound1Wrap)
            instance.wrapProperty().bind(this.obsrv1Wrap);
        if (this.bound2Wrap)
            instance.wrapProperty().bindBidirectional(this.obsrv2Wrap);
    }

    /**
     * 設定屬性{@link DisplacementMap#setInput(javafx.scene.effect.Effect)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B input(javafx.scene.effect.Effect value)
    {
        this.hasInput = true;
        this.valInput = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#setMapData(javafx.scene.effect.FloatMap)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B mapData(javafx.scene.effect.FloatMap value)
    {
        this.hasMapData = true;
        this.valMapData = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#setOffsetX(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B offsetX(double value)
    {
        this.hasOffsetX = true;
        this.valOffsetX = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#setOffsetY(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B offsetY(double value)
    {
        this.hasOffsetY = true;
        this.valOffsetY = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#setScaleX(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B scaleX(double value)
    {
        this.hasScaleX = true;
        this.valScaleX = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#setScaleY(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B scaleY(double value)
    {
        this.hasScaleY = true;
        this.valScaleY = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#setWrap(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B wrap(boolean value)
    {
        this.hasWrap = true;
        this.valWrap = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#inputProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindInput(javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Input = true;
        this.obsrv1Input = source;
        this.bound2Input = false;
        this.obsrv2Input = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#inputProperty}的雙向連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalInput(javafx.beans.property.Property<javafx.scene.effect.Effect> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Input = false;
        this.obsrv1Input = null;
        this.bound2Input = true;
        this.obsrv2Input = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#mapDataProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMapData(javafx.beans.value.ObservableValue<? extends javafx.scene.effect.FloatMap> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1MapData = true;
        this.obsrv1MapData = source;
        this.bound2MapData = false;
        this.obsrv2MapData = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#mapDataProperty}的雙向連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalMapData(javafx.beans.property.Property<javafx.scene.effect.FloatMap> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1MapData = false;
        this.obsrv1MapData = null;
        this.bound2MapData = true;
        this.obsrv2MapData = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#offsetXProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOffsetX(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OffsetX = true;
        this.obsrv1OffsetX = source;
        this.bound2OffsetX = false;
        this.obsrv2OffsetX = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#offsetXProperty}的雙向連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOffsetX(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OffsetX = false;
        this.obsrv1OffsetX = null;
        this.bound2OffsetX = true;
        this.obsrv2OffsetX = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#offsetYProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOffsetY(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OffsetY = true;
        this.obsrv1OffsetY = source;
        this.bound2OffsetY = false;
        this.obsrv2OffsetY = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#offsetYProperty}的雙向連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOffsetY(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OffsetY = false;
        this.obsrv1OffsetY = null;
        this.bound2OffsetY = true;
        this.obsrv2OffsetY = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#scaleXProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindScaleX(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ScaleX = true;
        this.obsrv1ScaleX = source;
        this.bound2ScaleX = false;
        this.obsrv2ScaleX = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#scaleXProperty}的雙向連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalScaleX(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ScaleX = false;
        this.obsrv1ScaleX = null;
        this.bound2ScaleX = true;
        this.obsrv2ScaleX = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#scaleYProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindScaleY(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ScaleY = true;
        this.obsrv1ScaleY = source;
        this.bound2ScaleY = false;
        this.obsrv2ScaleY = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#scaleYProperty}的雙向連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalScaleY(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ScaleY = false;
        this.obsrv1ScaleY = null;
        this.bound2ScaleY = true;
        this.obsrv2ScaleY = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#wrapProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindWrap(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Wrap = true;
        this.obsrv1Wrap = source;
        this.bound2Wrap = false;
        this.obsrv2Wrap = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#wrapProperty}的雙向連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalWrap(javafx.beans.property.Property<Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Wrap = false;
        this.obsrv1Wrap = null;
        this.bound2Wrap = true;
        this.obsrv2Wrap = source;
        return (B) this;
    }

    /**
     * 建構{@link DisplacementMap}物件
     *
     * @return 新的{@link DisplacementMap}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public DisplacementMap build()
    {
        DisplacementMap instance = new DisplacementMap();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
