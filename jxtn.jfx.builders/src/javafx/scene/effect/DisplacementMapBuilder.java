// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.effect;

/**
 * {@link DisplacementMap}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class DisplacementMapBuilder<Z extends DisplacementMap, B extends DisplacementMapBuilder<Z, B>>
        extends javafx.scene.effect.EffectBuilder<Z, B>
{

    protected boolean hasInput;
    protected javafx.scene.effect.Effect valInput;

    protected boolean hasMapData;
    protected javafx.scene.effect.FloatMap valMapData;

    protected boolean hasOffsetX;
    protected double valOffsetX;

    protected boolean hasOffsetY;
    protected double valOffsetY;

    protected boolean hasScaleX;
    protected double valScaleX;

    protected boolean hasScaleY;
    protected double valScaleY;

    protected boolean hasWrap;
    protected boolean valWrap;

    protected boolean boundInput;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> obsrvInput;

    protected boolean boundMapData;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.effect.FloatMap> obsrvMapData;

    protected boolean boundOffsetX;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvOffsetX;

    protected boolean boundOffsetY;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvOffsetY;

    protected boolean boundScaleX;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvScaleX;

    protected boolean boundScaleY;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvScaleY;

    protected boolean boundWrap;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvWrap;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasInput)
            instance.setInput(this.valInput);
        if (this.hasMapData)
            instance.setMapData(this.valMapData);
        if (this.hasOffsetX)
            instance.setOffsetX(this.valOffsetX);
        if (this.hasOffsetY)
            instance.setOffsetY(this.valOffsetY);
        if (this.hasScaleX)
            instance.setScaleX(this.valScaleX);
        if (this.hasScaleY)
            instance.setScaleY(this.valScaleY);
        if (this.hasWrap)
            instance.setWrap(this.valWrap);
        if (this.boundInput)
            instance.inputProperty().bind(this.obsrvInput);
        if (this.boundMapData)
            instance.mapDataProperty().bind(this.obsrvMapData);
        if (this.boundOffsetX)
            instance.offsetXProperty().bind(this.obsrvOffsetX);
        if (this.boundOffsetY)
            instance.offsetYProperty().bind(this.obsrvOffsetY);
        if (this.boundScaleX)
            instance.scaleXProperty().bind(this.obsrvScaleX);
        if (this.boundScaleY)
            instance.scaleYProperty().bind(this.obsrvScaleY);
        if (this.boundWrap)
            instance.wrapProperty().bind(this.obsrvWrap);
    }

    /**
     * 設定屬性{@link DisplacementMap#setInput(javafx.scene.effect.Effect)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B input(javafx.scene.effect.Effect value)
    {
        this.hasInput = true;
        this.valInput = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#setMapData(javafx.scene.effect.FloatMap)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B mapData(javafx.scene.effect.FloatMap value)
    {
        this.hasMapData = true;
        this.valMapData = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#setOffsetX(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B offsetX(double value)
    {
        this.hasOffsetX = true;
        this.valOffsetX = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#setOffsetY(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B offsetY(double value)
    {
        this.hasOffsetY = true;
        this.valOffsetY = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#setScaleX(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B scaleX(double value)
    {
        this.hasScaleX = true;
        this.valScaleX = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#setScaleY(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B scaleY(double value)
    {
        this.hasScaleY = true;
        this.valScaleY = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#setWrap(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B wrap(boolean value)
    {
        this.hasWrap = true;
        this.valWrap = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#inputProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindInput(javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> source)
    {
        assert (source != null);
        this.boundInput = true;
        this.obsrvInput = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#mapDataProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindMapData(javafx.beans.value.ObservableValue<? extends javafx.scene.effect.FloatMap> source)
    {
        assert (source != null);
        this.boundMapData = true;
        this.obsrvMapData = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#offsetXProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOffsetX(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundOffsetX = true;
        this.obsrvOffsetX = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#offsetYProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOffsetY(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundOffsetY = true;
        this.obsrvOffsetY = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#scaleXProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindScaleX(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundScaleX = true;
        this.obsrvScaleX = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#scaleYProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindScaleY(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundScaleY = true;
        this.obsrvScaleY = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link DisplacementMap#wrapProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindWrap(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundWrap = true;
        this.obsrvWrap = source;
        return (B) this;
    }

    /**
     * 建構{@link DisplacementMap}物件
     *
     * @return 新的{@link DisplacementMap}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public DisplacementMap build()
    {
        DisplacementMap instance = new DisplacementMap();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
