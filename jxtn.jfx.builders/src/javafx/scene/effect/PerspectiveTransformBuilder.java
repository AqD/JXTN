// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.effect;

/**
 * {@link PerspectiveTransform}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class PerspectiveTransformBuilder<Z extends PerspectiveTransform, B extends PerspectiveTransformBuilder<Z, B>>
        extends javafx.scene.effect.EffectBuilder<Z, B>
{

    protected boolean hasInput;
    protected javafx.scene.effect.Effect valInput;

    protected boolean hasLlx;
    protected double valLlx;

    protected boolean hasLly;
    protected double valLly;

    protected boolean hasLrx;
    protected double valLrx;

    protected boolean hasLry;
    protected double valLry;

    protected boolean hasUlx;
    protected double valUlx;

    protected boolean hasUly;
    protected double valUly;

    protected boolean hasUrx;
    protected double valUrx;

    protected boolean hasUry;
    protected double valUry;

    protected boolean boundInput;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> obsrvInput;

    protected boolean boundLlx;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvLlx;

    protected boolean boundLly;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvLly;

    protected boolean boundLrx;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvLrx;

    protected boolean boundLry;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvLry;

    protected boolean boundUlx;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvUlx;

    protected boolean boundUly;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvUly;

    protected boolean boundUrx;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvUrx;

    protected boolean boundUry;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvUry;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasInput)
            instance.setInput(this.valInput);
        if (this.hasLlx)
            instance.setLlx(this.valLlx);
        if (this.hasLly)
            instance.setLly(this.valLly);
        if (this.hasLrx)
            instance.setLrx(this.valLrx);
        if (this.hasLry)
            instance.setLry(this.valLry);
        if (this.hasUlx)
            instance.setUlx(this.valUlx);
        if (this.hasUly)
            instance.setUly(this.valUly);
        if (this.hasUrx)
            instance.setUrx(this.valUrx);
        if (this.hasUry)
            instance.setUry(this.valUry);
        if (this.boundInput)
            instance.inputProperty().bind(this.obsrvInput);
        if (this.boundLlx)
            instance.llxProperty().bind(this.obsrvLlx);
        if (this.boundLly)
            instance.llyProperty().bind(this.obsrvLly);
        if (this.boundLrx)
            instance.lrxProperty().bind(this.obsrvLrx);
        if (this.boundLry)
            instance.lryProperty().bind(this.obsrvLry);
        if (this.boundUlx)
            instance.ulxProperty().bind(this.obsrvUlx);
        if (this.boundUly)
            instance.ulyProperty().bind(this.obsrvUly);
        if (this.boundUrx)
            instance.urxProperty().bind(this.obsrvUrx);
        if (this.boundUry)
            instance.uryProperty().bind(this.obsrvUry);
    }

    /**
     * 設定屬性{@link PerspectiveTransform#setInput}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B input(javafx.scene.effect.Effect value)
    {
        this.hasInput = true;
        this.valInput = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#setLlx}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B llx(double value)
    {
        this.hasLlx = true;
        this.valLlx = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#setLly}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B lly(double value)
    {
        this.hasLly = true;
        this.valLly = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#setLrx}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B lrx(double value)
    {
        this.hasLrx = true;
        this.valLrx = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#setLry}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B lry(double value)
    {
        this.hasLry = true;
        this.valLry = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#setUlx}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B ulx(double value)
    {
        this.hasUlx = true;
        this.valUlx = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#setUly}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B uly(double value)
    {
        this.hasUly = true;
        this.valUly = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#setUrx}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B urx(double value)
    {
        this.hasUrx = true;
        this.valUrx = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#setUry}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B ury(double value)
    {
        this.hasUry = true;
        this.valUry = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#inputProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindInput(javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> source)
    {
        assert (source != null);
        this.boundInput = true;
        this.obsrvInput = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#llxProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindLlx(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundLlx = true;
        this.obsrvLlx = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#llyProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindLly(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundLly = true;
        this.obsrvLly = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#lrxProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindLrx(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundLrx = true;
        this.obsrvLrx = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#lryProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindLry(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundLry = true;
        this.obsrvLry = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#ulxProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindUlx(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundUlx = true;
        this.obsrvUlx = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#ulyProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindUly(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundUly = true;
        this.obsrvUly = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#urxProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindUrx(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundUrx = true;
        this.obsrvUrx = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#uryProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindUry(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundUry = true;
        this.obsrvUry = source;
        return (B) this;
    }

    /**
     * 建構{@link PerspectiveTransform}物件
     *
     * @return 新的{@link PerspectiveTransform}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public PerspectiveTransform build()
    {
        PerspectiveTransform instance = new PerspectiveTransform();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
