// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.effect;

/**
 * {@link GaussianBlur}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link GaussianBlur})
 * @param <B> 建構器本身的型態(需繼承{@link GaussianBlurMaker})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class GaussianBlurMaker<Z extends GaussianBlur, B extends GaussianBlurMaker<Z, B>>
        extends javafx.scene.effect.EffectMaker<Z, B>
        implements GaussianBlurMakerExt<Z, B>
{

    private boolean hasInput;
    private javafx.scene.effect.Effect valInput;

    private boolean hasRadius;
    private double valRadius;

    private boolean bound1Input;
    private boolean bound2Input;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> obsrv1Input;
    private javafx.beans.property.Property<javafx.scene.effect.Effect> obsrv2Input;

    private boolean bound1Radius;
    private boolean bound2Radius;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1Radius;
    private javafx.beans.property.Property<Number> obsrv2Radius;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasInput)
            instance.setInput(this.valInput);
        if (this.hasRadius)
            instance.setRadius(this.valRadius);
        if (this.bound1Input)
            instance.inputProperty().bind(this.obsrv1Input);
        if (this.bound2Input)
            instance.inputProperty().bindBidirectional(this.obsrv2Input);
        if (this.bound1Radius)
            instance.radiusProperty().bind(this.obsrv1Radius);
        if (this.bound2Radius)
            instance.radiusProperty().bindBidirectional(this.obsrv2Radius);
    }

    /**
     * 設定屬性{@link GaussianBlur#setInput(javafx.scene.effect.Effect)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B input(javafx.scene.effect.Effect value)
    {
        this.hasInput = true;
        this.valInput = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link GaussianBlur#setRadius(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B radius(double value)
    {
        this.hasRadius = true;
        this.valRadius = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link GaussianBlur#inputProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindInput(javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Input = true;
        this.obsrv1Input = source;
        this.bound2Input = false;
        this.obsrv2Input = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link GaussianBlur#inputProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalInput(javafx.beans.property.Property<javafx.scene.effect.Effect> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Input = false;
        this.obsrv1Input = null;
        this.bound2Input = true;
        this.obsrv2Input = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link GaussianBlur#radiusProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindRadius(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Radius = true;
        this.obsrv1Radius = source;
        this.bound2Radius = false;
        this.obsrv2Radius = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link GaussianBlur#radiusProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalRadius(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Radius = false;
        this.obsrv1Radius = null;
        this.bound2Radius = true;
        this.obsrv2Radius = source;
        return (B) this;
    }

    /**
     * 建構{@link GaussianBlur}物件。
     *
     * @return 新的{@link GaussianBlur}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public GaussianBlur build()
    {
        GaussianBlur instance = new GaussianBlur();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link GaussianBlur}物件。
     *
     * @return 新的{@link GaussianBlur}物件實體
     */
    @SuppressWarnings("unchecked")
    public GaussianBlur build(double arg0)
    {
        GaussianBlur instance = new GaussianBlur(arg0);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
