// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.effect;

/**
 * {@link Reflection}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class ReflectionBuilder<Z extends Reflection, B extends ReflectionBuilder<Z, B>>
        extends javafx.scene.effect.EffectBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasBottomOpacity;
    protected double valBottomOpacity;

    protected boolean hasFraction;
    protected double valFraction;

    protected boolean hasInput;
    protected javafx.scene.effect.Effect valInput;

    protected boolean hasTopOffset;
    protected double valTopOffset;

    protected boolean hasTopOpacity;
    protected double valTopOpacity;

    protected boolean boundBottomOpacity;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvBottomOpacity;

    protected boolean boundFraction;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvFraction;

    protected boolean boundInput;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> obsrvInput;

    protected boolean boundTopOffset;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvTopOffset;

    protected boolean boundTopOpacity;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvTopOpacity;
    public void applyTo(Reflection instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasBottomOpacity)
            instance.setBottomOpacity(this.valBottomOpacity);
        if (this.hasFraction)
            instance.setFraction(this.valFraction);
        if (this.hasInput)
            instance.setInput(this.valInput);
        if (this.hasTopOffset)
            instance.setTopOffset(this.valTopOffset);
        if (this.hasTopOpacity)
            instance.setTopOpacity(this.valTopOpacity);
        if (this.boundBottomOpacity)
            instance.bottomOpacityProperty().bind(this.obsrvBottomOpacity);
        if (this.boundFraction)
            instance.fractionProperty().bind(this.obsrvFraction);
        if (this.boundInput)
            instance.inputProperty().bind(this.obsrvInput);
        if (this.boundTopOffset)
            instance.topOffsetProperty().bind(this.obsrvTopOffset);
        if (this.boundTopOpacity)
            instance.topOpacityProperty().bind(this.obsrvTopOpacity);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B bottomOpacity(double value)
    {
        this.hasBottomOpacity = true;
        this.valBottomOpacity = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B fraction(double value)
    {
        this.hasFraction = true;
        this.valFraction = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B input(javafx.scene.effect.Effect value)
    {
        this.hasInput = true;
        this.valInput = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B topOffset(double value)
    {
        this.hasTopOffset = true;
        this.valTopOffset = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B topOpacity(double value)
    {
        this.hasTopOpacity = true;
        this.valTopOpacity = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindBottomOpacity(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundBottomOpacity = true;
        this.obsrvBottomOpacity = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindFraction(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundFraction = true;
        this.obsrvFraction = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindInput(javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> source)
    {
        assert (source != null);
        this.boundInput = true;
        this.obsrvInput = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindTopOffset(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundTopOffset = true;
        this.obsrvTopOffset = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindTopOpacity(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundTopOpacity = true;
        this.obsrvTopOpacity = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Reflection build()
    {
        Reflection instance = new Reflection();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
