// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.effect;

/**
 * {@link Blend}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link Blend})
 * @param <B> 建構器本身的型態(需繼承{@link BlendBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class BlendBuilder<Z extends Blend, B extends BlendBuilder<Z, B>>
        extends javafx.scene.effect.EffectBuilder<Z, B>
{

    private boolean hasBottomInput;
    private javafx.scene.effect.Effect valBottomInput;

    private boolean hasMode;
    private javafx.scene.effect.BlendMode valMode;

    private boolean hasOpacity;
    private double valOpacity;

    private boolean hasTopInput;
    private javafx.scene.effect.Effect valTopInput;

    private boolean boundBottomInput;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> obsrvBottomInput;

    private boolean boundMode;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.effect.BlendMode> obsrvMode;

    private boolean boundOpacity;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvOpacity;

    private boolean boundTopInput;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> obsrvTopInput;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasBottomInput)
            instance.setBottomInput(this.valBottomInput);
        if (this.hasMode)
            instance.setMode(this.valMode);
        if (this.hasOpacity)
            instance.setOpacity(this.valOpacity);
        if (this.hasTopInput)
            instance.setTopInput(this.valTopInput);
        if (this.boundBottomInput)
            instance.bottomInputProperty().bind(this.obsrvBottomInput);
        if (this.boundMode)
            instance.modeProperty().bind(this.obsrvMode);
        if (this.boundOpacity)
            instance.opacityProperty().bind(this.obsrvOpacity);
        if (this.boundTopInput)
            instance.topInputProperty().bind(this.obsrvTopInput);
    }

    /**
     * 設定屬性{@link Blend#setBottomInput(javafx.scene.effect.Effect)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bottomInput(javafx.scene.effect.Effect value)
    {
        this.hasBottomInput = true;
        this.valBottomInput = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Blend#setMode(javafx.scene.effect.BlendMode)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B mode(javafx.scene.effect.BlendMode value)
    {
        this.hasMode = true;
        this.valMode = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Blend#setOpacity(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B opacity(double value)
    {
        this.hasOpacity = true;
        this.valOpacity = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Blend#setTopInput(javafx.scene.effect.Effect)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B topInput(javafx.scene.effect.Effect value)
    {
        this.hasTopInput = true;
        this.valTopInput = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Blend#bottomInputProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBottomInput(javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundBottomInput = true;
        this.obsrvBottomInput = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Blend#modeProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMode(javafx.beans.value.ObservableValue<? extends javafx.scene.effect.BlendMode> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundMode = true;
        this.obsrvMode = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Blend#opacityProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOpacity(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOpacity = true;
        this.obsrvOpacity = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Blend#topInputProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindTopInput(javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundTopInput = true;
        this.obsrvTopInput = source;
        return (B) this;
    }

    /**
     * 建構{@link Blend}物件
     *
     * @return 新的{@link Blend}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public Blend build()
    {
        Blend instance = new Blend();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
