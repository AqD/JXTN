// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.effect;

/**
 * {@link PerspectiveTransform}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link PerspectiveTransform})
 * @param <B> 建構器本身的型態(需繼承{@link PerspectiveTransformMaker})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class PerspectiveTransformMaker<Z extends PerspectiveTransform, B extends PerspectiveTransformMaker<Z, B>>
        extends javafx.scene.effect.EffectMaker<Z, B>
        implements PerspectiveTransformMakerExt<Z, B>
{

    private boolean hasInput;
    private javafx.scene.effect.Effect valInput;

    private boolean hasLlx;
    private double valLlx;

    private boolean hasLly;
    private double valLly;

    private boolean hasLrx;
    private double valLrx;

    private boolean hasLry;
    private double valLry;

    private boolean hasUlx;
    private double valUlx;

    private boolean hasUly;
    private double valUly;

    private boolean hasUrx;
    private double valUrx;

    private boolean hasUry;
    private double valUry;

    private boolean bound1Input;
    private boolean bound2Input;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> obsrv1Input;
    private javafx.beans.property.Property<javafx.scene.effect.Effect> obsrv2Input;

    private boolean bound1Llx;
    private boolean bound2Llx;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1Llx;
    private javafx.beans.property.Property<Number> obsrv2Llx;

    private boolean bound1Lly;
    private boolean bound2Lly;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1Lly;
    private javafx.beans.property.Property<Number> obsrv2Lly;

    private boolean bound1Lrx;
    private boolean bound2Lrx;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1Lrx;
    private javafx.beans.property.Property<Number> obsrv2Lrx;

    private boolean bound1Lry;
    private boolean bound2Lry;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1Lry;
    private javafx.beans.property.Property<Number> obsrv2Lry;

    private boolean bound1Ulx;
    private boolean bound2Ulx;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1Ulx;
    private javafx.beans.property.Property<Number> obsrv2Ulx;

    private boolean bound1Uly;
    private boolean bound2Uly;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1Uly;
    private javafx.beans.property.Property<Number> obsrv2Uly;

    private boolean bound1Urx;
    private boolean bound2Urx;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1Urx;
    private javafx.beans.property.Property<Number> obsrv2Urx;

    private boolean bound1Ury;
    private boolean bound2Ury;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1Ury;
    private javafx.beans.property.Property<Number> obsrv2Ury;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasInput)
            instance.setInput(this.valInput);
        if (this.hasLlx)
            instance.setLlx(this.valLlx);
        if (this.hasLly)
            instance.setLly(this.valLly);
        if (this.hasLrx)
            instance.setLrx(this.valLrx);
        if (this.hasLry)
            instance.setLry(this.valLry);
        if (this.hasUlx)
            instance.setUlx(this.valUlx);
        if (this.hasUly)
            instance.setUly(this.valUly);
        if (this.hasUrx)
            instance.setUrx(this.valUrx);
        if (this.hasUry)
            instance.setUry(this.valUry);
        if (this.bound1Input)
            instance.inputProperty().bind(this.obsrv1Input);
        if (this.bound2Input)
            instance.inputProperty().bindBidirectional(this.obsrv2Input);
        if (this.bound1Llx)
            instance.llxProperty().bind(this.obsrv1Llx);
        if (this.bound2Llx)
            instance.llxProperty().bindBidirectional(this.obsrv2Llx);
        if (this.bound1Lly)
            instance.llyProperty().bind(this.obsrv1Lly);
        if (this.bound2Lly)
            instance.llyProperty().bindBidirectional(this.obsrv2Lly);
        if (this.bound1Lrx)
            instance.lrxProperty().bind(this.obsrv1Lrx);
        if (this.bound2Lrx)
            instance.lrxProperty().bindBidirectional(this.obsrv2Lrx);
        if (this.bound1Lry)
            instance.lryProperty().bind(this.obsrv1Lry);
        if (this.bound2Lry)
            instance.lryProperty().bindBidirectional(this.obsrv2Lry);
        if (this.bound1Ulx)
            instance.ulxProperty().bind(this.obsrv1Ulx);
        if (this.bound2Ulx)
            instance.ulxProperty().bindBidirectional(this.obsrv2Ulx);
        if (this.bound1Uly)
            instance.ulyProperty().bind(this.obsrv1Uly);
        if (this.bound2Uly)
            instance.ulyProperty().bindBidirectional(this.obsrv2Uly);
        if (this.bound1Urx)
            instance.urxProperty().bind(this.obsrv1Urx);
        if (this.bound2Urx)
            instance.urxProperty().bindBidirectional(this.obsrv2Urx);
        if (this.bound1Ury)
            instance.uryProperty().bind(this.obsrv1Ury);
        if (this.bound2Ury)
            instance.uryProperty().bindBidirectional(this.obsrv2Ury);
    }

    /**
     * 設定屬性{@link PerspectiveTransform#setInput(javafx.scene.effect.Effect)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B input(javafx.scene.effect.Effect value)
    {
        this.hasInput = true;
        this.valInput = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#setLlx(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B llx(double value)
    {
        this.hasLlx = true;
        this.valLlx = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#setLly(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B lly(double value)
    {
        this.hasLly = true;
        this.valLly = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#setLrx(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B lrx(double value)
    {
        this.hasLrx = true;
        this.valLrx = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#setLry(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B lry(double value)
    {
        this.hasLry = true;
        this.valLry = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#setUlx(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B ulx(double value)
    {
        this.hasUlx = true;
        this.valUlx = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#setUly(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B uly(double value)
    {
        this.hasUly = true;
        this.valUly = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#setUrx(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B urx(double value)
    {
        this.hasUrx = true;
        this.valUrx = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#setUry(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B ury(double value)
    {
        this.hasUry = true;
        this.valUry = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#inputProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindInput(javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Input = true;
        this.obsrv1Input = source;
        this.bound2Input = false;
        this.obsrv2Input = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#inputProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalInput(javafx.beans.property.Property<javafx.scene.effect.Effect> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Input = false;
        this.obsrv1Input = null;
        this.bound2Input = true;
        this.obsrv2Input = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#llxProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindLlx(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Llx = true;
        this.obsrv1Llx = source;
        this.bound2Llx = false;
        this.obsrv2Llx = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#llxProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalLlx(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Llx = false;
        this.obsrv1Llx = null;
        this.bound2Llx = true;
        this.obsrv2Llx = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#llyProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindLly(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Lly = true;
        this.obsrv1Lly = source;
        this.bound2Lly = false;
        this.obsrv2Lly = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#llyProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalLly(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Lly = false;
        this.obsrv1Lly = null;
        this.bound2Lly = true;
        this.obsrv2Lly = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#lrxProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindLrx(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Lrx = true;
        this.obsrv1Lrx = source;
        this.bound2Lrx = false;
        this.obsrv2Lrx = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#lrxProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalLrx(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Lrx = false;
        this.obsrv1Lrx = null;
        this.bound2Lrx = true;
        this.obsrv2Lrx = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#lryProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindLry(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Lry = true;
        this.obsrv1Lry = source;
        this.bound2Lry = false;
        this.obsrv2Lry = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#lryProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalLry(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Lry = false;
        this.obsrv1Lry = null;
        this.bound2Lry = true;
        this.obsrv2Lry = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#ulxProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindUlx(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Ulx = true;
        this.obsrv1Ulx = source;
        this.bound2Ulx = false;
        this.obsrv2Ulx = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#ulxProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalUlx(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Ulx = false;
        this.obsrv1Ulx = null;
        this.bound2Ulx = true;
        this.obsrv2Ulx = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#ulyProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindUly(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Uly = true;
        this.obsrv1Uly = source;
        this.bound2Uly = false;
        this.obsrv2Uly = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#ulyProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalUly(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Uly = false;
        this.obsrv1Uly = null;
        this.bound2Uly = true;
        this.obsrv2Uly = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#urxProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindUrx(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Urx = true;
        this.obsrv1Urx = source;
        this.bound2Urx = false;
        this.obsrv2Urx = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#urxProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalUrx(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Urx = false;
        this.obsrv1Urx = null;
        this.bound2Urx = true;
        this.obsrv2Urx = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#uryProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindUry(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Ury = true;
        this.obsrv1Ury = source;
        this.bound2Ury = false;
        this.obsrv2Ury = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PerspectiveTransform#uryProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalUry(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Ury = false;
        this.obsrv1Ury = null;
        this.bound2Ury = true;
        this.obsrv2Ury = source;
        return (B) this;
    }

    /**
     * 建構{@link PerspectiveTransform}物件。
     *
     * @return 新的{@link PerspectiveTransform}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public PerspectiveTransform build()
    {
        PerspectiveTransform instance = new PerspectiveTransform();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link PerspectiveTransform}物件。
     *
     * @return 新的{@link PerspectiveTransform}物件實體
     */
    @SuppressWarnings("unchecked")
    public PerspectiveTransform build(double arg0, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6, double arg7)
    {
        PerspectiveTransform instance = new PerspectiveTransform(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
