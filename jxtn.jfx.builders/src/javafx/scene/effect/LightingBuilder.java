// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.effect;

/**
 * {@link Lighting}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class LightingBuilder<Z extends Lighting, B extends LightingBuilder<Z, B>>
        extends javafx.scene.effect.EffectBuilder<Z, B>
{

    protected boolean hasBumpInput;
    protected javafx.scene.effect.Effect valBumpInput;

    protected boolean hasContentInput;
    protected javafx.scene.effect.Effect valContentInput;

    protected boolean hasDiffuseConstant;
    protected double valDiffuseConstant;

    protected boolean hasLight;
    protected javafx.scene.effect.Light valLight;

    protected boolean hasSpecularConstant;
    protected double valSpecularConstant;

    protected boolean hasSpecularExponent;
    protected double valSpecularExponent;

    protected boolean hasSurfaceScale;
    protected double valSurfaceScale;

    protected boolean boundBumpInput;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> obsrvBumpInput;

    protected boolean boundContentInput;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> obsrvContentInput;

    protected boolean boundDiffuseConstant;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvDiffuseConstant;

    protected boolean boundLight;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Light> obsrvLight;

    protected boolean boundSpecularConstant;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvSpecularConstant;

    protected boolean boundSpecularExponent;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvSpecularExponent;

    protected boolean boundSurfaceScale;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvSurfaceScale;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasBumpInput)
            instance.setBumpInput(this.valBumpInput);
        if (this.hasContentInput)
            instance.setContentInput(this.valContentInput);
        if (this.hasDiffuseConstant)
            instance.setDiffuseConstant(this.valDiffuseConstant);
        if (this.hasLight)
            instance.setLight(this.valLight);
        if (this.hasSpecularConstant)
            instance.setSpecularConstant(this.valSpecularConstant);
        if (this.hasSpecularExponent)
            instance.setSpecularExponent(this.valSpecularExponent);
        if (this.hasSurfaceScale)
            instance.setSurfaceScale(this.valSurfaceScale);
        if (this.boundBumpInput)
            instance.bumpInputProperty().bind(this.obsrvBumpInput);
        if (this.boundContentInput)
            instance.contentInputProperty().bind(this.obsrvContentInput);
        if (this.boundDiffuseConstant)
            instance.diffuseConstantProperty().bind(this.obsrvDiffuseConstant);
        if (this.boundLight)
            instance.lightProperty().bind(this.obsrvLight);
        if (this.boundSpecularConstant)
            instance.specularConstantProperty().bind(this.obsrvSpecularConstant);
        if (this.boundSpecularExponent)
            instance.specularExponentProperty().bind(this.obsrvSpecularExponent);
        if (this.boundSurfaceScale)
            instance.surfaceScaleProperty().bind(this.obsrvSurfaceScale);
    }

    /**
     * 設定屬性{@link Lighting#setBumpInput(javafx.scene.effect.Effect)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bumpInput(javafx.scene.effect.Effect value)
    {
        this.hasBumpInput = true;
        this.valBumpInput = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Lighting#setContentInput(javafx.scene.effect.Effect)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B contentInput(javafx.scene.effect.Effect value)
    {
        this.hasContentInput = true;
        this.valContentInput = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Lighting#setDiffuseConstant(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B diffuseConstant(double value)
    {
        this.hasDiffuseConstant = true;
        this.valDiffuseConstant = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Lighting#setLight(javafx.scene.effect.Light)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B light(javafx.scene.effect.Light value)
    {
        this.hasLight = true;
        this.valLight = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Lighting#setSpecularConstant(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B specularConstant(double value)
    {
        this.hasSpecularConstant = true;
        this.valSpecularConstant = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Lighting#setSpecularExponent(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B specularExponent(double value)
    {
        this.hasSpecularExponent = true;
        this.valSpecularExponent = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Lighting#setSurfaceScale(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B surfaceScale(double value)
    {
        this.hasSurfaceScale = true;
        this.valSurfaceScale = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Lighting#bumpInputProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindBumpInput(javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> source)
    {
        assert (source != null);
        this.boundBumpInput = true;
        this.obsrvBumpInput = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Lighting#contentInputProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindContentInput(javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> source)
    {
        assert (source != null);
        this.boundContentInput = true;
        this.obsrvContentInput = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Lighting#diffuseConstantProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindDiffuseConstant(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundDiffuseConstant = true;
        this.obsrvDiffuseConstant = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Lighting#lightProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindLight(javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Light> source)
    {
        assert (source != null);
        this.boundLight = true;
        this.obsrvLight = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Lighting#specularConstantProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindSpecularConstant(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundSpecularConstant = true;
        this.obsrvSpecularConstant = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Lighting#specularExponentProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindSpecularExponent(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundSpecularExponent = true;
        this.obsrvSpecularExponent = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Lighting#surfaceScaleProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindSurfaceScale(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundSurfaceScale = true;
        this.obsrvSurfaceScale = source;
        return (B) this;
    }

    /**
     * 建構{@link Lighting}物件
     *
     * @return 新的{@link Lighting}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public Lighting build()
    {
        Lighting instance = new Lighting();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
