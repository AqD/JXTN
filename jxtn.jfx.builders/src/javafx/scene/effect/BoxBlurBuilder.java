// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.effect;

/**
 * {@link BoxBlur}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link BoxBlur})
 * @param <B> 建構器本身的型態(需繼承{@link BoxBlurBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class BoxBlurBuilder<Z extends BoxBlur, B extends BoxBlurBuilder<Z, B>>
        extends javafx.scene.effect.EffectBuilder<Z, B>
{

    private boolean hasHeight;
    private double valHeight;

    private boolean hasInput;
    private javafx.scene.effect.Effect valInput;

    private boolean hasIterations;
    private int valIterations;

    private boolean hasWidth;
    private double valWidth;

    private boolean boundHeight;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvHeight;

    private boolean boundInput;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> obsrvInput;

    private boolean boundIterations;
    private javafx.beans.value.ObservableValue<? extends Integer> obsrvIterations;

    private boolean boundWidth;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvWidth;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasHeight)
            instance.setHeight(this.valHeight);
        if (this.hasInput)
            instance.setInput(this.valInput);
        if (this.hasIterations)
            instance.setIterations(this.valIterations);
        if (this.hasWidth)
            instance.setWidth(this.valWidth);
        if (this.boundHeight)
            instance.heightProperty().bind(this.obsrvHeight);
        if (this.boundInput)
            instance.inputProperty().bind(this.obsrvInput);
        if (this.boundIterations)
            instance.iterationsProperty().bind(this.obsrvIterations);
        if (this.boundWidth)
            instance.widthProperty().bind(this.obsrvWidth);
    }

    /**
     * 設定屬性{@link BoxBlur#setHeight(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B height(double value)
    {
        this.hasHeight = true;
        this.valHeight = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link BoxBlur#setInput(javafx.scene.effect.Effect)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B input(javafx.scene.effect.Effect value)
    {
        this.hasInput = true;
        this.valInput = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link BoxBlur#setIterations(int)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B iterations(int value)
    {
        this.hasIterations = true;
        this.valIterations = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link BoxBlur#setWidth(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B width(double value)
    {
        this.hasWidth = true;
        this.valWidth = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link BoxBlur#heightProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindHeight(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundHeight = true;
        this.obsrvHeight = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link BoxBlur#inputProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindInput(javafx.beans.value.ObservableValue<? extends javafx.scene.effect.Effect> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundInput = true;
        this.obsrvInput = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link BoxBlur#iterationsProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindIterations(javafx.beans.value.ObservableValue<? extends Integer> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundIterations = true;
        this.obsrvIterations = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link BoxBlur#widthProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindWidth(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundWidth = true;
        this.obsrvWidth = source;
        return (B) this;
    }

    /**
     * 建構{@link BoxBlur}物件
     *
     * @return 新的{@link BoxBlur}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public BoxBlur build()
    {
        BoxBlur instance = new BoxBlur();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
