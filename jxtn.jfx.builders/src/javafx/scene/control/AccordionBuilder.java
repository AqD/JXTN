// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link Accordion}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class AccordionBuilder<Z extends Accordion, B extends AccordionBuilder<Z, B>>
        extends javafx.scene.control.ControlBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasExpandedPane;
    protected javafx.scene.control.TitledPane valExpandedPane;

    protected boolean hasPanes;
    protected java.util.Collection<javafx.scene.control.TitledPane> valPanes;

    protected boolean boundExpandedPane;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.control.TitledPane> obsrvExpandedPane;
    public void applyTo(Accordion instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasExpandedPane)
            instance.setExpandedPane(this.valExpandedPane);
        if (this.hasPanes)
            instance.getPanes().setAll(this.valPanes);
        if (this.boundExpandedPane)
            instance.expandedPaneProperty().bind(this.obsrvExpandedPane);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B expandedPane(javafx.scene.control.TitledPane value)
    {
        this.hasExpandedPane = true;
        this.valExpandedPane = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B panes(java.util.Collection<javafx.scene.control.TitledPane> value)
    {
        this.hasPanes = true;
        this.valPanes = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B panes(javafx.scene.control.TitledPane... value)
    {
        this.hasPanes = true;
        this.valPanes = java.util.Arrays.asList(value);
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindExpandedPane(javafx.beans.value.ObservableValue<? extends javafx.scene.control.TitledPane> source)
    {
        assert (source != null);
        this.boundExpandedPane = true;
        this.obsrvExpandedPane = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Accordion build()
    {
        Accordion instance = new Accordion();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
