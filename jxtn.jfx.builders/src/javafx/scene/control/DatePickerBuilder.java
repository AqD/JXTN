// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link DatePicker}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class DatePickerBuilder<Z extends DatePicker, B extends DatePickerBuilder<Z, B>>
        extends javafx.scene.control.ComboBoxBaseBuilder<java.time.LocalDate, Z, B>
{
    private boolean applied;

    protected boolean hasChronology;
    protected java.time.chrono.Chronology valChronology;

    protected boolean hasConverter;
    protected javafx.util.StringConverter<java.time.LocalDate> valConverter;

    protected boolean hasDayCellFactory;
    protected javafx.util.Callback<javafx.scene.control.DatePicker, javafx.scene.control.DateCell> valDayCellFactory;

    protected boolean hasShowWeekNumbers;
    protected boolean valShowWeekNumbers;

    protected boolean boundChronology;
    protected javafx.beans.value.ObservableValue<? extends java.time.chrono.Chronology> obsrvChronology;

    protected boolean boundConverter;
    protected javafx.beans.value.ObservableValue<? extends javafx.util.StringConverter<java.time.LocalDate>> obsrvConverter;

    protected boolean boundDayCellFactory;
    protected javafx.beans.value.ObservableValue<? extends javafx.util.Callback<javafx.scene.control.DatePicker, javafx.scene.control.DateCell>> obsrvDayCellFactory;

    protected boolean boundShowWeekNumbers;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvShowWeekNumbers;
    public void applyTo(DatePicker instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasChronology)
            instance.setChronology(this.valChronology);
        if (this.hasConverter)
            instance.setConverter(this.valConverter);
        if (this.hasDayCellFactory)
            instance.setDayCellFactory(this.valDayCellFactory);
        if (this.hasShowWeekNumbers)
            instance.setShowWeekNumbers(this.valShowWeekNumbers);
        if (this.boundChronology)
            instance.chronologyProperty().bind(this.obsrvChronology);
        if (this.boundConverter)
            instance.converterProperty().bind(this.obsrvConverter);
        if (this.boundDayCellFactory)
            instance.dayCellFactoryProperty().bind(this.obsrvDayCellFactory);
        if (this.boundShowWeekNumbers)
            instance.showWeekNumbersProperty().bind(this.obsrvShowWeekNumbers);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B chronology(java.time.chrono.Chronology value)
    {
        this.hasChronology = true;
        this.valChronology = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B converter(javafx.util.StringConverter<java.time.LocalDate> value)
    {
        this.hasConverter = true;
        this.valConverter = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B dayCellFactory(javafx.util.Callback<javafx.scene.control.DatePicker, javafx.scene.control.DateCell> value)
    {
        this.hasDayCellFactory = true;
        this.valDayCellFactory = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B showWeekNumbers(boolean value)
    {
        this.hasShowWeekNumbers = true;
        this.valShowWeekNumbers = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindChronology(javafx.beans.value.ObservableValue<? extends java.time.chrono.Chronology> source)
    {
        assert (source != null);
        this.boundChronology = true;
        this.obsrvChronology = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindConverter(javafx.beans.value.ObservableValue<? extends javafx.util.StringConverter<java.time.LocalDate>> source)
    {
        assert (source != null);
        this.boundConverter = true;
        this.obsrvConverter = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindDayCellFactory(javafx.beans.value.ObservableValue<? extends javafx.util.Callback<javafx.scene.control.DatePicker, javafx.scene.control.DateCell>> source)
    {
        assert (source != null);
        this.boundDayCellFactory = true;
        this.obsrvDayCellFactory = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindShowWeekNumbers(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundShowWeekNumbers = true;
        this.obsrvShowWeekNumbers = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DatePicker build()
    {
        DatePicker instance = new DatePicker();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
