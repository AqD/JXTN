// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link ButtonBase}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class ButtonBaseBuilder<Z extends ButtonBase, B extends ButtonBaseBuilder<Z, B>>
        extends javafx.scene.control.LabeledBuilder<Z, B>
{

    protected boolean hasOnAction;
    protected javafx.event.EventHandler<javafx.event.ActionEvent> valOnAction;

    protected boolean boundOnAction;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.event.ActionEvent>> obsrvOnAction;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasOnAction)
            instance.setOnAction(this.valOnAction);
        if (this.boundOnAction)
            instance.onActionProperty().bind(this.obsrvOnAction);
    }

    /**
     * 設定屬性{@link ButtonBase#setOnAction}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onAction(javafx.event.EventHandler<javafx.event.ActionEvent> value)
    {
        this.hasOnAction = true;
        this.valOnAction = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ButtonBase#onActionProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnAction(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.event.ActionEvent>> source)
    {
        assert (source != null);
        this.boundOnAction = true;
        this.obsrvOnAction = source;
        return (B) this;
    }
}
