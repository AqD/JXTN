// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link PopupControl}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link PopupControl})
 * @param <B> 建構器本身的型態(需繼承{@link PopupControlMaker})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class PopupControlMaker<Z extends PopupControl, B extends PopupControlMaker<Z, B>>
        extends javafx.stage.PopupWindowMaker<Z, B>
        implements PopupControlMakerExt<Z, B>
{

    private boolean hasId;
    private java.lang.String valId;

    private boolean hasMaxHeight;
    private double valMaxHeight;

    private boolean hasMaxWidth;
    private double valMaxWidth;

    private boolean hasMinHeight;
    private double valMinHeight;

    private boolean hasMinWidth;
    private double valMinWidth;

    private boolean hasPrefHeight;
    private double valPrefHeight;

    private boolean hasPrefWidth;
    private double valPrefWidth;

    private boolean hasSkin;
    private javafx.scene.control.Skin<?> valSkin;

    private boolean hasStyle;
    private java.lang.String valStyle;

    private boolean hasStyleClass;
    private java.util.Collection<java.lang.String> valStyleClass;

    private boolean bound1Id;
    private boolean bound2Id;
    private javafx.beans.value.ObservableValue<? extends String> obsrv1Id;
    private javafx.beans.property.Property<String> obsrv2Id;

    private boolean bound1MaxHeight;
    private boolean bound2MaxHeight;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1MaxHeight;
    private javafx.beans.property.Property<Number> obsrv2MaxHeight;

    private boolean bound1MaxWidth;
    private boolean bound2MaxWidth;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1MaxWidth;
    private javafx.beans.property.Property<Number> obsrv2MaxWidth;

    private boolean bound1MinHeight;
    private boolean bound2MinHeight;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1MinHeight;
    private javafx.beans.property.Property<Number> obsrv2MinHeight;

    private boolean bound1MinWidth;
    private boolean bound2MinWidth;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1MinWidth;
    private javafx.beans.property.Property<Number> obsrv2MinWidth;

    private boolean bound1PrefHeight;
    private boolean bound2PrefHeight;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1PrefHeight;
    private javafx.beans.property.Property<Number> obsrv2PrefHeight;

    private boolean bound1PrefWidth;
    private boolean bound2PrefWidth;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1PrefWidth;
    private javafx.beans.property.Property<Number> obsrv2PrefWidth;

    private boolean bound1Skin;
    private boolean bound2Skin;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.control.Skin<?>> obsrv1Skin;
    private javafx.beans.property.Property<javafx.scene.control.Skin<?>> obsrv2Skin;

    private boolean bound1Style;
    private boolean bound2Style;
    private javafx.beans.value.ObservableValue<? extends String> obsrv1Style;
    private javafx.beans.property.Property<String> obsrv2Style;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasId)
            instance.setId(this.valId);
        if (this.hasMaxHeight)
            instance.setMaxHeight(this.valMaxHeight);
        if (this.hasMaxWidth)
            instance.setMaxWidth(this.valMaxWidth);
        if (this.hasMinHeight)
            instance.setMinHeight(this.valMinHeight);
        if (this.hasMinWidth)
            instance.setMinWidth(this.valMinWidth);
        if (this.hasPrefHeight)
            instance.setPrefHeight(this.valPrefHeight);
        if (this.hasPrefWidth)
            instance.setPrefWidth(this.valPrefWidth);
        if (this.hasSkin)
            instance.setSkin(this.valSkin);
        if (this.hasStyle)
            instance.setStyle(this.valStyle);
        if (this.hasStyleClass)
            instance.getStyleClass().addAll(this.valStyleClass);
        if (this.bound1Id)
            instance.idProperty().bind(this.obsrv1Id);
        if (this.bound2Id)
            instance.idProperty().bindBidirectional(this.obsrv2Id);
        if (this.bound1MaxHeight)
            instance.maxHeightProperty().bind(this.obsrv1MaxHeight);
        if (this.bound2MaxHeight)
            instance.maxHeightProperty().bindBidirectional(this.obsrv2MaxHeight);
        if (this.bound1MaxWidth)
            instance.maxWidthProperty().bind(this.obsrv1MaxWidth);
        if (this.bound2MaxWidth)
            instance.maxWidthProperty().bindBidirectional(this.obsrv2MaxWidth);
        if (this.bound1MinHeight)
            instance.minHeightProperty().bind(this.obsrv1MinHeight);
        if (this.bound2MinHeight)
            instance.minHeightProperty().bindBidirectional(this.obsrv2MinHeight);
        if (this.bound1MinWidth)
            instance.minWidthProperty().bind(this.obsrv1MinWidth);
        if (this.bound2MinWidth)
            instance.minWidthProperty().bindBidirectional(this.obsrv2MinWidth);
        if (this.bound1PrefHeight)
            instance.prefHeightProperty().bind(this.obsrv1PrefHeight);
        if (this.bound2PrefHeight)
            instance.prefHeightProperty().bindBidirectional(this.obsrv2PrefHeight);
        if (this.bound1PrefWidth)
            instance.prefWidthProperty().bind(this.obsrv1PrefWidth);
        if (this.bound2PrefWidth)
            instance.prefWidthProperty().bindBidirectional(this.obsrv2PrefWidth);
        if (this.bound1Skin)
            instance.skinProperty().bind(this.obsrv1Skin);
        if (this.bound2Skin)
            instance.skinProperty().bindBidirectional(this.obsrv2Skin);
        if (this.bound1Style)
            instance.styleProperty().bind(this.obsrv1Style);
        if (this.bound2Style)
            instance.styleProperty().bindBidirectional(this.obsrv2Style);
    }

    /**
     * 設定屬性{@link PopupControl#setId(java.lang.String)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B id(java.lang.String value)
    {
        this.hasId = true;
        this.valId = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#setMaxHeight(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B maxHeight(double value)
    {
        this.hasMaxHeight = true;
        this.valMaxHeight = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#setMaxWidth(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B maxWidth(double value)
    {
        this.hasMaxWidth = true;
        this.valMaxWidth = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#setMinHeight(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B minHeight(double value)
    {
        this.hasMinHeight = true;
        this.valMinHeight = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#setMinWidth(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B minWidth(double value)
    {
        this.hasMinWidth = true;
        this.valMinWidth = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#setPrefHeight(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B prefHeight(double value)
    {
        this.hasPrefHeight = true;
        this.valPrefHeight = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#setPrefWidth(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B prefWidth(double value)
    {
        this.hasPrefWidth = true;
        this.valPrefWidth = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#setSkin(javafx.scene.control.Skin)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B skin(javafx.scene.control.Skin<?> value)
    {
        this.hasSkin = true;
        this.valSkin = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#setStyle(java.lang.String)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B style(java.lang.String value)
    {
        this.hasStyle = true;
        this.valStyle = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link PopupControl#getStyleClass}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     * @deprecated 屬性值並非{@link javafx.collections.ObservableList}
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    public final B styleClass(java.util.Collection<? extends java.lang.String> value)
    {
        this.hasStyleClass = true;
        this.valStyleClass = (java.util.Collection<java.lang.String>) value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link PopupControl#getStyleClass}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B styleClass(java.lang.String... value)
    {
        this.hasStyleClass = true;
        this.valStyleClass = java.util.Arrays.asList(value);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link PopupControl#getStyleClass}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B styleClassAdd(java.util.Collection<? extends java.lang.String> value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasStyleClass = true;
        if (this.valStyleClass == null)
            this.valStyleClass = new java.util.ArrayList<>(value.size());
        this.valStyleClass.addAll(value);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link PopupControl#getStyleClass}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B styleClassAdd(java.lang.String... value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasStyleClass = true;
        if (this.valStyleClass == null)
            this.valStyleClass = new java.util.ArrayList<>(value.length);
        this.valStyleClass.addAll(java.util.Arrays.asList(value));
        return (B) this;
    }

    /**
     * 增加集合屬性{@link PopupControl#getStyleClass}的內容，排除null項目。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B styleClassAddNonNull(java.util.Collection<? extends java.lang.String> value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasStyleClass = true;
        if (this.valStyleClass == null)
            this.valStyleClass = new java.util.ArrayList<>(value.size());
        for (java.lang.String i : value)
            if (i != null)
                this.valStyleClass.add(i);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link PopupControl#getStyleClass}的內容，排除null項目。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B styleClassAddNonNull(java.lang.String... value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasStyleClass = true;
        if (this.valStyleClass == null)
            this.valStyleClass = new java.util.ArrayList<>(value.length);
        for (java.lang.String i : value)
            if (i != null)
                this.valStyleClass.add(i);
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#idProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindId(javafx.beans.value.ObservableValue<? extends String> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Id = true;
        this.obsrv1Id = source;
        this.bound2Id = false;
        this.obsrv2Id = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#idProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalId(javafx.beans.property.Property<String> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Id = false;
        this.obsrv1Id = null;
        this.bound2Id = true;
        this.obsrv2Id = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#maxHeightProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMaxHeight(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1MaxHeight = true;
        this.obsrv1MaxHeight = source;
        this.bound2MaxHeight = false;
        this.obsrv2MaxHeight = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#maxHeightProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalMaxHeight(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1MaxHeight = false;
        this.obsrv1MaxHeight = null;
        this.bound2MaxHeight = true;
        this.obsrv2MaxHeight = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#maxWidthProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMaxWidth(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1MaxWidth = true;
        this.obsrv1MaxWidth = source;
        this.bound2MaxWidth = false;
        this.obsrv2MaxWidth = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#maxWidthProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalMaxWidth(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1MaxWidth = false;
        this.obsrv1MaxWidth = null;
        this.bound2MaxWidth = true;
        this.obsrv2MaxWidth = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#minHeightProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMinHeight(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1MinHeight = true;
        this.obsrv1MinHeight = source;
        this.bound2MinHeight = false;
        this.obsrv2MinHeight = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#minHeightProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalMinHeight(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1MinHeight = false;
        this.obsrv1MinHeight = null;
        this.bound2MinHeight = true;
        this.obsrv2MinHeight = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#minWidthProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMinWidth(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1MinWidth = true;
        this.obsrv1MinWidth = source;
        this.bound2MinWidth = false;
        this.obsrv2MinWidth = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#minWidthProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalMinWidth(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1MinWidth = false;
        this.obsrv1MinWidth = null;
        this.bound2MinWidth = true;
        this.obsrv2MinWidth = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#prefHeightProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindPrefHeight(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1PrefHeight = true;
        this.obsrv1PrefHeight = source;
        this.bound2PrefHeight = false;
        this.obsrv2PrefHeight = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#prefHeightProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalPrefHeight(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1PrefHeight = false;
        this.obsrv1PrefHeight = null;
        this.bound2PrefHeight = true;
        this.obsrv2PrefHeight = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#prefWidthProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindPrefWidth(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1PrefWidth = true;
        this.obsrv1PrefWidth = source;
        this.bound2PrefWidth = false;
        this.obsrv2PrefWidth = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#prefWidthProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalPrefWidth(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1PrefWidth = false;
        this.obsrv1PrefWidth = null;
        this.bound2PrefWidth = true;
        this.obsrv2PrefWidth = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#skinProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindSkin(javafx.beans.value.ObservableValue<? extends javafx.scene.control.Skin<?>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Skin = true;
        this.obsrv1Skin = source;
        this.bound2Skin = false;
        this.obsrv2Skin = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#skinProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalSkin(javafx.beans.property.Property<javafx.scene.control.Skin<?>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Skin = false;
        this.obsrv1Skin = null;
        this.bound2Skin = true;
        this.obsrv2Skin = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#styleProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindStyle(javafx.beans.value.ObservableValue<? extends String> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Style = true;
        this.obsrv1Style = source;
        this.bound2Style = false;
        this.obsrv2Style = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupControl#styleProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalStyle(javafx.beans.property.Property<String> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Style = false;
        this.obsrv1Style = null;
        this.bound2Style = true;
        this.obsrv2Style = source;
        return (B) this;
    }

    /**
     * 建構{@link PopupControl}物件。
     *
     * @return 新的{@link PopupControl}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public PopupControl build()
    {
        PopupControl instance = new PopupControl();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
