// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link CheckBox}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class CheckBoxBuilder<Z extends CheckBox, B extends CheckBoxBuilder<Z, B>>
        extends javafx.scene.control.ButtonBaseBuilder<Z, B>
{

    protected boolean hasAllowIndeterminate;
    protected boolean valAllowIndeterminate;

    protected boolean hasIndeterminate;
    protected boolean valIndeterminate;

    protected boolean hasSelected;
    protected boolean valSelected;

    protected boolean boundAllowIndeterminate;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvAllowIndeterminate;

    protected boolean boundIndeterminate;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvIndeterminate;

    protected boolean boundSelected;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvSelected;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasAllowIndeterminate)
            instance.setAllowIndeterminate(this.valAllowIndeterminate);
        if (this.hasIndeterminate)
            instance.setIndeterminate(this.valIndeterminate);
        if (this.hasSelected)
            instance.setSelected(this.valSelected);
        if (this.boundAllowIndeterminate)
            instance.allowIndeterminateProperty().bind(this.obsrvAllowIndeterminate);
        if (this.boundIndeterminate)
            instance.indeterminateProperty().bind(this.obsrvIndeterminate);
        if (this.boundSelected)
            instance.selectedProperty().bind(this.obsrvSelected);
    }

    /**
     * 設定屬性{@link CheckBox#setAllowIndeterminate}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B allowIndeterminate(boolean value)
    {
        this.hasAllowIndeterminate = true;
        this.valAllowIndeterminate = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link CheckBox#setIndeterminate}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B indeterminate(boolean value)
    {
        this.hasIndeterminate = true;
        this.valIndeterminate = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link CheckBox#setSelected}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B selected(boolean value)
    {
        this.hasSelected = true;
        this.valSelected = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link CheckBox#allowIndeterminateProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindAllowIndeterminate(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundAllowIndeterminate = true;
        this.obsrvAllowIndeterminate = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link CheckBox#indeterminateProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindIndeterminate(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundIndeterminate = true;
        this.obsrvIndeterminate = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link CheckBox#selectedProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindSelected(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundSelected = true;
        this.obsrvSelected = source;
        return (B) this;
    }

    /**
     * 建構{@link CheckBox}物件
     *
     * @return 新的{@link CheckBox}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public CheckBox build()
    {
        CheckBox instance = new CheckBox();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
