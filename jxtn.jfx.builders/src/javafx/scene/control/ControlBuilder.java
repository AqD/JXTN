// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link Control}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class ControlBuilder<Z extends Control, B extends ControlBuilder<Z, B>>
        extends javafx.scene.layout.RegionBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasContextMenu;
    protected javafx.scene.control.ContextMenu valContextMenu;

    protected boolean hasSkin;
    protected javafx.scene.control.Skin<?> valSkin;

    protected boolean hasTooltip;
    protected javafx.scene.control.Tooltip valTooltip;

    protected boolean boundContextMenu;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.control.ContextMenu> obsrvContextMenu;

    protected boolean boundSkin;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.control.Skin<?>> obsrvSkin;

    protected boolean boundTooltip;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.control.Tooltip> obsrvTooltip;
    public void applyTo(Control instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasContextMenu)
            instance.setContextMenu(this.valContextMenu);
        if (this.hasSkin)
            instance.setSkin(this.valSkin);
        if (this.hasTooltip)
            instance.setTooltip(this.valTooltip);
        if (this.boundContextMenu)
            instance.contextMenuProperty().bind(this.obsrvContextMenu);
        if (this.boundSkin)
            instance.skinProperty().bind(this.obsrvSkin);
        if (this.boundTooltip)
            instance.tooltipProperty().bind(this.obsrvTooltip);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B contextMenu(javafx.scene.control.ContextMenu value)
    {
        this.hasContextMenu = true;
        this.valContextMenu = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B skin(javafx.scene.control.Skin<?> value)
    {
        this.hasSkin = true;
        this.valSkin = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B tooltip(javafx.scene.control.Tooltip value)
    {
        this.hasTooltip = true;
        this.valTooltip = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindContextMenu(javafx.beans.value.ObservableValue<? extends javafx.scene.control.ContextMenu> source)
    {
        assert (source != null);
        this.boundContextMenu = true;
        this.obsrvContextMenu = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindSkin(javafx.beans.value.ObservableValue<? extends javafx.scene.control.Skin<?>> source)
    {
        assert (source != null);
        this.boundSkin = true;
        this.obsrvSkin = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindTooltip(javafx.beans.value.ObservableValue<? extends javafx.scene.control.Tooltip> source)
    {
        assert (source != null);
        this.boundTooltip = true;
        this.obsrvTooltip = source;
        return (B) this;
    }
}
