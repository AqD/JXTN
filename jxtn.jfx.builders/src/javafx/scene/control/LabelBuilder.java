// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link Label}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link Label})
 * @param <B> 建構器本身的型態(需繼承{@link LabelBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class LabelBuilder<Z extends Label, B extends LabelBuilder<Z, B>>
        extends javafx.scene.control.LabeledBuilder<Z, B>
{

    private boolean hasLabelFor;
    private javafx.scene.Node valLabelFor;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasLabelFor)
            instance.setLabelFor(this.valLabelFor);
    }

    /**
     * 設定屬性{@link Label#setLabelFor(javafx.scene.Node)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B labelFor(javafx.scene.Node value)
    {
        this.hasLabelFor = true;
        this.valLabelFor = value;
        return (B) this;
    }

    /**
     * 建構{@link Label}物件
     *
     * @return 新的{@link Label}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public Label build()
    {
        Label instance = new Label();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
