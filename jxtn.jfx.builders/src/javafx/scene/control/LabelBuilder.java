// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link Label}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class LabelBuilder<Z extends Label, B extends LabelBuilder<Z, B>>
        extends javafx.scene.control.LabeledBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasLabelFor;
    protected javafx.scene.Node valLabelFor;
    public void applyTo(Label instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasLabelFor)
            instance.setLabelFor(this.valLabelFor);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B labelFor(javafx.scene.Node value)
    {
        this.hasLabelFor = true;
        this.valLabelFor = value;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Label build()
    {
        Label instance = new Label();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
