// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link Labeled}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link Labeled})
 * @param <B> 建構器本身的型態(需繼承{@link LabeledBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class LabeledBuilder<Z extends Labeled, B extends LabeledBuilder<Z, B>>
        extends javafx.scene.control.ControlBuilder<Z, B>
{

    private boolean hasAlignment;
    private javafx.geometry.Pos valAlignment;

    private boolean hasContentDisplay;
    private javafx.scene.control.ContentDisplay valContentDisplay;

    private boolean hasEllipsisString;
    private java.lang.String valEllipsisString;

    private boolean hasFont;
    private javafx.scene.text.Font valFont;

    private boolean hasGraphic;
    private javafx.scene.Node valGraphic;

    private boolean hasGraphicTextGap;
    private double valGraphicTextGap;

    private boolean hasLineSpacing;
    private double valLineSpacing;

    private boolean hasMnemonicParsing;
    private boolean valMnemonicParsing;

    private boolean hasText;
    private java.lang.String valText;

    private boolean hasTextAlignment;
    private javafx.scene.text.TextAlignment valTextAlignment;

    private boolean hasTextFill;
    private javafx.scene.paint.Paint valTextFill;

    private boolean hasTextOverrun;
    private javafx.scene.control.OverrunStyle valTextOverrun;

    private boolean hasUnderline;
    private boolean valUnderline;

    private boolean hasWrapText;
    private boolean valWrapText;

    private boolean boundAlignment;
    private javafx.beans.value.ObservableValue<? extends javafx.geometry.Pos> obsrvAlignment;

    private boolean boundContentDisplay;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.control.ContentDisplay> obsrvContentDisplay;

    private boolean boundEllipsisString;
    private javafx.beans.value.ObservableValue<? extends String> obsrvEllipsisString;

    private boolean boundFont;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.text.Font> obsrvFont;

    private boolean boundGraphic;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrvGraphic;

    private boolean boundGraphicTextGap;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvGraphicTextGap;

    private boolean boundLineSpacing;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvLineSpacing;

    private boolean boundMnemonicParsing;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrvMnemonicParsing;

    private boolean boundTextAlignment;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.text.TextAlignment> obsrvTextAlignment;

    private boolean boundTextFill;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.paint.Paint> obsrvTextFill;

    private boolean boundTextOverrun;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.control.OverrunStyle> obsrvTextOverrun;

    private boolean boundText;
    private javafx.beans.value.ObservableValue<? extends String> obsrvText;

    private boolean boundUnderline;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrvUnderline;

    private boolean boundWrapText;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrvWrapText;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasAlignment)
            instance.setAlignment(this.valAlignment);
        if (this.hasContentDisplay)
            instance.setContentDisplay(this.valContentDisplay);
        if (this.hasEllipsisString)
            instance.setEllipsisString(this.valEllipsisString);
        if (this.hasFont)
            instance.setFont(this.valFont);
        if (this.hasGraphic)
            instance.setGraphic(this.valGraphic);
        if (this.hasGraphicTextGap)
            instance.setGraphicTextGap(this.valGraphicTextGap);
        if (this.hasLineSpacing)
            instance.setLineSpacing(this.valLineSpacing);
        if (this.hasMnemonicParsing)
            instance.setMnemonicParsing(this.valMnemonicParsing);
        if (this.hasText)
            instance.setText(this.valText);
        if (this.hasTextAlignment)
            instance.setTextAlignment(this.valTextAlignment);
        if (this.hasTextFill)
            instance.setTextFill(this.valTextFill);
        if (this.hasTextOverrun)
            instance.setTextOverrun(this.valTextOverrun);
        if (this.hasUnderline)
            instance.setUnderline(this.valUnderline);
        if (this.hasWrapText)
            instance.setWrapText(this.valWrapText);
        if (this.boundAlignment)
            instance.alignmentProperty().bind(this.obsrvAlignment);
        if (this.boundContentDisplay)
            instance.contentDisplayProperty().bind(this.obsrvContentDisplay);
        if (this.boundEllipsisString)
            instance.ellipsisStringProperty().bind(this.obsrvEllipsisString);
        if (this.boundFont)
            instance.fontProperty().bind(this.obsrvFont);
        if (this.boundGraphic)
            instance.graphicProperty().bind(this.obsrvGraphic);
        if (this.boundGraphicTextGap)
            instance.graphicTextGapProperty().bind(this.obsrvGraphicTextGap);
        if (this.boundLineSpacing)
            instance.lineSpacingProperty().bind(this.obsrvLineSpacing);
        if (this.boundMnemonicParsing)
            instance.mnemonicParsingProperty().bind(this.obsrvMnemonicParsing);
        if (this.boundTextAlignment)
            instance.textAlignmentProperty().bind(this.obsrvTextAlignment);
        if (this.boundTextFill)
            instance.textFillProperty().bind(this.obsrvTextFill);
        if (this.boundTextOverrun)
            instance.textOverrunProperty().bind(this.obsrvTextOverrun);
        if (this.boundText)
            instance.textProperty().bind(this.obsrvText);
        if (this.boundUnderline)
            instance.underlineProperty().bind(this.obsrvUnderline);
        if (this.boundWrapText)
            instance.wrapTextProperty().bind(this.obsrvWrapText);
    }

    /**
     * 設定屬性{@link Labeled#setAlignment(javafx.geometry.Pos)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B alignment(javafx.geometry.Pos value)
    {
        this.hasAlignment = true;
        this.valAlignment = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#setContentDisplay(javafx.scene.control.ContentDisplay)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B contentDisplay(javafx.scene.control.ContentDisplay value)
    {
        this.hasContentDisplay = true;
        this.valContentDisplay = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#setEllipsisString(java.lang.String)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B ellipsisString(java.lang.String value)
    {
        this.hasEllipsisString = true;
        this.valEllipsisString = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#setFont(javafx.scene.text.Font)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B font(javafx.scene.text.Font value)
    {
        this.hasFont = true;
        this.valFont = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#setGraphic(javafx.scene.Node)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B graphic(javafx.scene.Node value)
    {
        this.hasGraphic = true;
        this.valGraphic = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#setGraphicTextGap(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B graphicTextGap(double value)
    {
        this.hasGraphicTextGap = true;
        this.valGraphicTextGap = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#setLineSpacing(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B lineSpacing(double value)
    {
        this.hasLineSpacing = true;
        this.valLineSpacing = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#setMnemonicParsing(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B mnemonicParsing(boolean value)
    {
        this.hasMnemonicParsing = true;
        this.valMnemonicParsing = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#setText(java.lang.String)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B text(java.lang.String value)
    {
        this.hasText = true;
        this.valText = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#setTextAlignment(javafx.scene.text.TextAlignment)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B textAlignment(javafx.scene.text.TextAlignment value)
    {
        this.hasTextAlignment = true;
        this.valTextAlignment = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#setTextFill(javafx.scene.paint.Paint)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B textFill(javafx.scene.paint.Paint value)
    {
        this.hasTextFill = true;
        this.valTextFill = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#setTextOverrun(javafx.scene.control.OverrunStyle)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B textOverrun(javafx.scene.control.OverrunStyle value)
    {
        this.hasTextOverrun = true;
        this.valTextOverrun = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#setUnderline(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B underline(boolean value)
    {
        this.hasUnderline = true;
        this.valUnderline = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#setWrapText(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B wrapText(boolean value)
    {
        this.hasWrapText = true;
        this.valWrapText = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#alignmentProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindAlignment(javafx.beans.value.ObservableValue<? extends javafx.geometry.Pos> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundAlignment = true;
        this.obsrvAlignment = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#contentDisplayProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindContentDisplay(javafx.beans.value.ObservableValue<? extends javafx.scene.control.ContentDisplay> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundContentDisplay = true;
        this.obsrvContentDisplay = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#ellipsisStringProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindEllipsisString(javafx.beans.value.ObservableValue<? extends String> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundEllipsisString = true;
        this.obsrvEllipsisString = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#fontProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindFont(javafx.beans.value.ObservableValue<? extends javafx.scene.text.Font> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundFont = true;
        this.obsrvFont = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#graphicProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindGraphic(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundGraphic = true;
        this.obsrvGraphic = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#graphicTextGapProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindGraphicTextGap(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundGraphicTextGap = true;
        this.obsrvGraphicTextGap = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#lineSpacingProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindLineSpacing(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundLineSpacing = true;
        this.obsrvLineSpacing = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#mnemonicParsingProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMnemonicParsing(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundMnemonicParsing = true;
        this.obsrvMnemonicParsing = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#textAlignmentProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindTextAlignment(javafx.beans.value.ObservableValue<? extends javafx.scene.text.TextAlignment> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundTextAlignment = true;
        this.obsrvTextAlignment = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#textFillProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindTextFill(javafx.beans.value.ObservableValue<? extends javafx.scene.paint.Paint> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundTextFill = true;
        this.obsrvTextFill = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#textOverrunProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindTextOverrun(javafx.beans.value.ObservableValue<? extends javafx.scene.control.OverrunStyle> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundTextOverrun = true;
        this.obsrvTextOverrun = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#textProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindText(javafx.beans.value.ObservableValue<? extends String> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundText = true;
        this.obsrvText = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#underlineProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindUnderline(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundUnderline = true;
        this.obsrvUnderline = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Labeled#wrapTextProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindWrapText(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundWrapText = true;
        this.obsrvWrapText = source;
        return (B) this;
    }
}
