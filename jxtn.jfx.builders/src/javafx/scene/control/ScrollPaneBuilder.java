// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link ScrollPane}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link ScrollPane})
 * @param <B> 建構器本身的型態(需繼承{@link ScrollPaneBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class ScrollPaneBuilder<Z extends ScrollPane, B extends ScrollPaneBuilder<Z, B>>
        extends javafx.scene.control.ControlBuilder<Z, B>
{

    private boolean hasContent;
    private javafx.scene.Node valContent;

    private boolean hasFitToHeight;
    private boolean valFitToHeight;

    private boolean hasFitToWidth;
    private boolean valFitToWidth;

    private boolean hasHbarPolicy;
    private javafx.scene.control.ScrollPane.ScrollBarPolicy valHbarPolicy;

    private boolean hasHmax;
    private double valHmax;

    private boolean hasHmin;
    private double valHmin;

    private boolean hasHvalue;
    private double valHvalue;

    private boolean hasPannable;
    private boolean valPannable;

    private boolean hasPrefViewportHeight;
    private double valPrefViewportHeight;

    private boolean hasPrefViewportWidth;
    private double valPrefViewportWidth;

    private boolean hasVbarPolicy;
    private javafx.scene.control.ScrollPane.ScrollBarPolicy valVbarPolicy;

    private boolean hasViewportBounds;
    private javafx.geometry.Bounds valViewportBounds;

    private boolean hasVmax;
    private double valVmax;

    private boolean hasVmin;
    private double valVmin;

    private boolean hasVvalue;
    private double valVvalue;

    private boolean boundContent;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrvContent;

    private boolean boundFitToHeight;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrvFitToHeight;

    private boolean boundFitToWidth;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrvFitToWidth;

    private boolean boundHbarPolicy;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.control.ScrollPane.ScrollBarPolicy> obsrvHbarPolicy;

    private boolean boundHmax;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvHmax;

    private boolean boundHmin;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvHmin;

    private boolean boundHvalue;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvHvalue;

    private boolean boundPannable;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrvPannable;

    private boolean boundPrefViewportHeight;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvPrefViewportHeight;

    private boolean boundPrefViewportWidth;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvPrefViewportWidth;

    private boolean boundVbarPolicy;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.control.ScrollPane.ScrollBarPolicy> obsrvVbarPolicy;

    private boolean boundViewportBounds;
    private javafx.beans.value.ObservableValue<? extends javafx.geometry.Bounds> obsrvViewportBounds;

    private boolean boundVmax;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvVmax;

    private boolean boundVmin;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvVmin;

    private boolean boundVvalue;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvVvalue;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasContent)
            instance.setContent(this.valContent);
        if (this.hasFitToHeight)
            instance.setFitToHeight(this.valFitToHeight);
        if (this.hasFitToWidth)
            instance.setFitToWidth(this.valFitToWidth);
        if (this.hasHbarPolicy)
            instance.setHbarPolicy(this.valHbarPolicy);
        if (this.hasHmax)
            instance.setHmax(this.valHmax);
        if (this.hasHmin)
            instance.setHmin(this.valHmin);
        if (this.hasHvalue)
            instance.setHvalue(this.valHvalue);
        if (this.hasPannable)
            instance.setPannable(this.valPannable);
        if (this.hasPrefViewportHeight)
            instance.setPrefViewportHeight(this.valPrefViewportHeight);
        if (this.hasPrefViewportWidth)
            instance.setPrefViewportWidth(this.valPrefViewportWidth);
        if (this.hasVbarPolicy)
            instance.setVbarPolicy(this.valVbarPolicy);
        if (this.hasViewportBounds)
            instance.setViewportBounds(this.valViewportBounds);
        if (this.hasVmax)
            instance.setVmax(this.valVmax);
        if (this.hasVmin)
            instance.setVmin(this.valVmin);
        if (this.hasVvalue)
            instance.setVvalue(this.valVvalue);
        if (this.boundContent)
            instance.contentProperty().bind(this.obsrvContent);
        if (this.boundFitToHeight)
            instance.fitToHeightProperty().bind(this.obsrvFitToHeight);
        if (this.boundFitToWidth)
            instance.fitToWidthProperty().bind(this.obsrvFitToWidth);
        if (this.boundHbarPolicy)
            instance.hbarPolicyProperty().bind(this.obsrvHbarPolicy);
        if (this.boundHmax)
            instance.hmaxProperty().bind(this.obsrvHmax);
        if (this.boundHmin)
            instance.hminProperty().bind(this.obsrvHmin);
        if (this.boundHvalue)
            instance.hvalueProperty().bind(this.obsrvHvalue);
        if (this.boundPannable)
            instance.pannableProperty().bind(this.obsrvPannable);
        if (this.boundPrefViewportHeight)
            instance.prefViewportHeightProperty().bind(this.obsrvPrefViewportHeight);
        if (this.boundPrefViewportWidth)
            instance.prefViewportWidthProperty().bind(this.obsrvPrefViewportWidth);
        if (this.boundVbarPolicy)
            instance.vbarPolicyProperty().bind(this.obsrvVbarPolicy);
        if (this.boundViewportBounds)
            instance.viewportBoundsProperty().bind(this.obsrvViewportBounds);
        if (this.boundVmax)
            instance.vmaxProperty().bind(this.obsrvVmax);
        if (this.boundVmin)
            instance.vminProperty().bind(this.obsrvVmin);
        if (this.boundVvalue)
            instance.vvalueProperty().bind(this.obsrvVvalue);
    }

    /**
     * 設定屬性{@link ScrollPane#setContent(javafx.scene.Node)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B content(javafx.scene.Node value)
    {
        this.hasContent = true;
        this.valContent = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#setFitToHeight(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B fitToHeight(boolean value)
    {
        this.hasFitToHeight = true;
        this.valFitToHeight = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#setFitToWidth(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B fitToWidth(boolean value)
    {
        this.hasFitToWidth = true;
        this.valFitToWidth = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#setHbarPolicy(javafx.scene.control.ScrollPane.ScrollBarPolicy)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B hbarPolicy(javafx.scene.control.ScrollPane.ScrollBarPolicy value)
    {
        this.hasHbarPolicy = true;
        this.valHbarPolicy = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#setHmax(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B hmax(double value)
    {
        this.hasHmax = true;
        this.valHmax = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#setHmin(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B hmin(double value)
    {
        this.hasHmin = true;
        this.valHmin = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#setHvalue(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B hvalue(double value)
    {
        this.hasHvalue = true;
        this.valHvalue = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#setPannable(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B pannable(boolean value)
    {
        this.hasPannable = true;
        this.valPannable = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#setPrefViewportHeight(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B prefViewportHeight(double value)
    {
        this.hasPrefViewportHeight = true;
        this.valPrefViewportHeight = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#setPrefViewportWidth(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B prefViewportWidth(double value)
    {
        this.hasPrefViewportWidth = true;
        this.valPrefViewportWidth = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#setVbarPolicy(javafx.scene.control.ScrollPane.ScrollBarPolicy)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B vbarPolicy(javafx.scene.control.ScrollPane.ScrollBarPolicy value)
    {
        this.hasVbarPolicy = true;
        this.valVbarPolicy = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#setViewportBounds(javafx.geometry.Bounds)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B viewportBounds(javafx.geometry.Bounds value)
    {
        this.hasViewportBounds = true;
        this.valViewportBounds = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#setVmax(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B vmax(double value)
    {
        this.hasVmax = true;
        this.valVmax = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#setVmin(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B vmin(double value)
    {
        this.hasVmin = true;
        this.valVmin = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#setVvalue(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B vvalue(double value)
    {
        this.hasVvalue = true;
        this.valVvalue = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#contentProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindContent(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundContent = true;
        this.obsrvContent = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#fitToHeightProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindFitToHeight(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundFitToHeight = true;
        this.obsrvFitToHeight = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#fitToWidthProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindFitToWidth(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundFitToWidth = true;
        this.obsrvFitToWidth = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#hbarPolicyProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindHbarPolicy(javafx.beans.value.ObservableValue<? extends javafx.scene.control.ScrollPane.ScrollBarPolicy> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundHbarPolicy = true;
        this.obsrvHbarPolicy = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#hmaxProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindHmax(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundHmax = true;
        this.obsrvHmax = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#hminProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindHmin(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundHmin = true;
        this.obsrvHmin = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#hvalueProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindHvalue(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundHvalue = true;
        this.obsrvHvalue = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#pannableProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindPannable(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundPannable = true;
        this.obsrvPannable = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#prefViewportHeightProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindPrefViewportHeight(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundPrefViewportHeight = true;
        this.obsrvPrefViewportHeight = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#prefViewportWidthProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindPrefViewportWidth(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundPrefViewportWidth = true;
        this.obsrvPrefViewportWidth = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#vbarPolicyProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindVbarPolicy(javafx.beans.value.ObservableValue<? extends javafx.scene.control.ScrollPane.ScrollBarPolicy> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundVbarPolicy = true;
        this.obsrvVbarPolicy = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#viewportBoundsProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindViewportBounds(javafx.beans.value.ObservableValue<? extends javafx.geometry.Bounds> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundViewportBounds = true;
        this.obsrvViewportBounds = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#vmaxProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindVmax(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundVmax = true;
        this.obsrvVmax = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#vminProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindVmin(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundVmin = true;
        this.obsrvVmin = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ScrollPane#vvalueProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindVvalue(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundVvalue = true;
        this.obsrvVvalue = source;
        return (B) this;
    }

    /**
     * 建構{@link ScrollPane}物件
     *
     * @return 新的{@link ScrollPane}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public ScrollPane build()
    {
        ScrollPane instance = new ScrollPane();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
