// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link ColorPicker}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class ColorPickerBuilder<Z extends ColorPicker, B extends ColorPickerBuilder<Z, B>>
        extends javafx.scene.control.ComboBoxBaseBuilder<javafx.scene.paint.Color, Z, B>
{
    private boolean applied;

    protected boolean hasCustomColors;
    protected java.util.Collection<javafx.scene.paint.Color> valCustomColors;
    public void applyTo(ColorPicker instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasCustomColors)
            instance.getCustomColors().setAll(this.valCustomColors);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B customColors(java.util.Collection<javafx.scene.paint.Color> value)
    {
        this.hasCustomColors = true;
        this.valCustomColors = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B customColors(javafx.scene.paint.Color... value)
    {
        this.hasCustomColors = true;
        this.valCustomColors = java.util.Arrays.asList(value);
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ColorPicker build()
    {
        ColorPicker instance = new ColorPicker();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
