// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link MenuItem}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class MenuItemBuilder<Z extends MenuItem, B extends MenuItemBuilder<Z, B>>
        extends jxtn.jfx.builders.AbstractBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasAccelerator;
    protected javafx.scene.input.KeyCombination valAccelerator;

    protected boolean hasDisable;
    protected boolean valDisable;

    protected boolean hasGraphic;
    protected javafx.scene.Node valGraphic;

    protected boolean hasId;
    protected java.lang.String valId;

    protected boolean hasMnemonicParsing;
    protected boolean valMnemonicParsing;

    protected boolean hasOnAction;
    protected javafx.event.EventHandler<javafx.event.ActionEvent> valOnAction;

    protected boolean hasOnMenuValidation;
    protected javafx.event.EventHandler<javafx.event.Event> valOnMenuValidation;

    protected boolean hasStyle;
    protected java.lang.String valStyle;

    protected boolean hasStyleClass;
    protected java.util.Collection<java.lang.String> valStyleClass;

    protected boolean hasText;
    protected java.lang.String valText;

    protected boolean hasUserData;
    protected java.lang.Object valUserData;

    protected boolean hasVisible;
    protected boolean valVisible;

    protected boolean boundAccelerator;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.input.KeyCombination> obsrvAccelerator;

    protected boolean boundDisable;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvDisable;

    protected boolean boundGraphic;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrvGraphic;

    protected boolean boundId;
    protected javafx.beans.value.ObservableValue<? extends String> obsrvId;

    protected boolean boundMnemonicParsing;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvMnemonicParsing;

    protected boolean boundOnAction;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.event.ActionEvent>> obsrvOnAction;

    protected boolean boundOnMenuValidation;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.event.Event>> obsrvOnMenuValidation;

    protected boolean boundStyle;
    protected javafx.beans.value.ObservableValue<? extends String> obsrvStyle;

    protected boolean boundText;
    protected javafx.beans.value.ObservableValue<? extends String> obsrvText;

    protected boolean boundVisible;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvVisible;
    public void applyTo(MenuItem instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasAccelerator)
            instance.setAccelerator(this.valAccelerator);
        if (this.hasDisable)
            instance.setDisable(this.valDisable);
        if (this.hasGraphic)
            instance.setGraphic(this.valGraphic);
        if (this.hasId)
            instance.setId(this.valId);
        if (this.hasMnemonicParsing)
            instance.setMnemonicParsing(this.valMnemonicParsing);
        if (this.hasOnAction)
            instance.setOnAction(this.valOnAction);
        if (this.hasOnMenuValidation)
            instance.setOnMenuValidation(this.valOnMenuValidation);
        if (this.hasStyle)
            instance.setStyle(this.valStyle);
        if (this.hasStyleClass)
            instance.getStyleClass().setAll(this.valStyleClass);
        if (this.hasText)
            instance.setText(this.valText);
        if (this.hasUserData)
            instance.setUserData(this.valUserData);
        if (this.hasVisible)
            instance.setVisible(this.valVisible);
        if (this.boundAccelerator)
            instance.acceleratorProperty().bind(this.obsrvAccelerator);
        if (this.boundDisable)
            instance.disableProperty().bind(this.obsrvDisable);
        if (this.boundGraphic)
            instance.graphicProperty().bind(this.obsrvGraphic);
        if (this.boundId)
            instance.idProperty().bind(this.obsrvId);
        if (this.boundMnemonicParsing)
            instance.mnemonicParsingProperty().bind(this.obsrvMnemonicParsing);
        if (this.boundOnAction)
            instance.onActionProperty().bind(this.obsrvOnAction);
        if (this.boundOnMenuValidation)
            instance.onMenuValidationProperty().bind(this.obsrvOnMenuValidation);
        if (this.boundStyle)
            instance.styleProperty().bind(this.obsrvStyle);
        if (this.boundText)
            instance.textProperty().bind(this.obsrvText);
        if (this.boundVisible)
            instance.visibleProperty().bind(this.obsrvVisible);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B accelerator(javafx.scene.input.KeyCombination value)
    {
        this.hasAccelerator = true;
        this.valAccelerator = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B disable(boolean value)
    {
        this.hasDisable = true;
        this.valDisable = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B graphic(javafx.scene.Node value)
    {
        this.hasGraphic = true;
        this.valGraphic = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B id(java.lang.String value)
    {
        this.hasId = true;
        this.valId = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B mnemonicParsing(boolean value)
    {
        this.hasMnemonicParsing = true;
        this.valMnemonicParsing = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B onAction(javafx.event.EventHandler<javafx.event.ActionEvent> value)
    {
        this.hasOnAction = true;
        this.valOnAction = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B onMenuValidation(javafx.event.EventHandler<javafx.event.Event> value)
    {
        this.hasOnMenuValidation = true;
        this.valOnMenuValidation = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B style(java.lang.String value)
    {
        this.hasStyle = true;
        this.valStyle = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B styleClass(java.util.Collection<java.lang.String> value)
    {
        this.hasStyleClass = true;
        this.valStyleClass = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B styleClass(java.lang.String... value)
    {
        this.hasStyleClass = true;
        this.valStyleClass = java.util.Arrays.asList(value);
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B text(java.lang.String value)
    {
        this.hasText = true;
        this.valText = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B userData(java.lang.Object value)
    {
        this.hasUserData = true;
        this.valUserData = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B visible(boolean value)
    {
        this.hasVisible = true;
        this.valVisible = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindAccelerator(javafx.beans.value.ObservableValue<? extends javafx.scene.input.KeyCombination> source)
    {
        assert (source != null);
        this.boundAccelerator = true;
        this.obsrvAccelerator = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindDisable(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundDisable = true;
        this.obsrvDisable = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindGraphic(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        assert (source != null);
        this.boundGraphic = true;
        this.obsrvGraphic = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindId(javafx.beans.value.ObservableValue<? extends String> source)
    {
        assert (source != null);
        this.boundId = true;
        this.obsrvId = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindMnemonicParsing(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundMnemonicParsing = true;
        this.obsrvMnemonicParsing = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindOnAction(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.event.ActionEvent>> source)
    {
        assert (source != null);
        this.boundOnAction = true;
        this.obsrvOnAction = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindOnMenuValidation(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.event.Event>> source)
    {
        assert (source != null);
        this.boundOnMenuValidation = true;
        this.obsrvOnMenuValidation = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindStyle(javafx.beans.value.ObservableValue<? extends String> source)
    {
        assert (source != null);
        this.boundStyle = true;
        this.obsrvStyle = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindText(javafx.beans.value.ObservableValue<? extends String> source)
    {
        assert (source != null);
        this.boundText = true;
        this.obsrvText = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindVisible(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundVisible = true;
        this.obsrvVisible = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MenuItem build()
    {
        MenuItem instance = new MenuItem();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
