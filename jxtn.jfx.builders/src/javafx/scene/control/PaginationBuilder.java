// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link Pagination}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link Pagination})
 * @param <B> 建構器本身的型態(需繼承{@link PaginationBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class PaginationBuilder<Z extends Pagination, B extends PaginationBuilder<Z, B>>
        extends javafx.scene.control.ControlBuilder<Z, B>
        implements PaginationBuilderExt<Z, B>
{

    private boolean hasCurrentPageIndex;
    private int valCurrentPageIndex;

    private boolean hasMaxPageIndicatorCount;
    private int valMaxPageIndicatorCount;

    private boolean hasPageCount;
    private int valPageCount;

    private boolean hasPageFactory;
    private javafx.util.Callback<java.lang.Integer, javafx.scene.Node> valPageFactory;

    private boolean bound1CurrentPageIndex;
    private boolean bound2CurrentPageIndex;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1CurrentPageIndex;
    private javafx.beans.property.Property<Number> obsrv2CurrentPageIndex;

    private boolean bound1MaxPageIndicatorCount;
    private boolean bound2MaxPageIndicatorCount;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1MaxPageIndicatorCount;
    private javafx.beans.property.Property<Number> obsrv2MaxPageIndicatorCount;

    private boolean bound1PageCount;
    private boolean bound2PageCount;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1PageCount;
    private javafx.beans.property.Property<Number> obsrv2PageCount;

    private boolean bound1PageFactory;
    private boolean bound2PageFactory;
    private javafx.beans.value.ObservableValue<? extends javafx.util.Callback<java.lang.Integer, javafx.scene.Node>> obsrv1PageFactory;
    private javafx.beans.property.Property<javafx.util.Callback<java.lang.Integer, javafx.scene.Node>> obsrv2PageFactory;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasCurrentPageIndex)
            instance.setCurrentPageIndex(this.valCurrentPageIndex);
        if (this.hasMaxPageIndicatorCount)
            instance.setMaxPageIndicatorCount(this.valMaxPageIndicatorCount);
        if (this.hasPageCount)
            instance.setPageCount(this.valPageCount);
        if (this.hasPageFactory)
            instance.setPageFactory(this.valPageFactory);
        if (this.bound1CurrentPageIndex)
            instance.currentPageIndexProperty().bind(this.obsrv1CurrentPageIndex);
        if (this.bound2CurrentPageIndex)
            instance.currentPageIndexProperty().bindBidirectional(this.obsrv2CurrentPageIndex);
        if (this.bound1MaxPageIndicatorCount)
            instance.maxPageIndicatorCountProperty().bind(this.obsrv1MaxPageIndicatorCount);
        if (this.bound2MaxPageIndicatorCount)
            instance.maxPageIndicatorCountProperty().bindBidirectional(this.obsrv2MaxPageIndicatorCount);
        if (this.bound1PageCount)
            instance.pageCountProperty().bind(this.obsrv1PageCount);
        if (this.bound2PageCount)
            instance.pageCountProperty().bindBidirectional(this.obsrv2PageCount);
        if (this.bound1PageFactory)
            instance.pageFactoryProperty().bind(this.obsrv1PageFactory);
        if (this.bound2PageFactory)
            instance.pageFactoryProperty().bindBidirectional(this.obsrv2PageFactory);
    }

    /**
     * 設定屬性{@link Pagination#setCurrentPageIndex(int)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B currentPageIndex(int value)
    {
        this.hasCurrentPageIndex = true;
        this.valCurrentPageIndex = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Pagination#setMaxPageIndicatorCount(int)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B maxPageIndicatorCount(int value)
    {
        this.hasMaxPageIndicatorCount = true;
        this.valMaxPageIndicatorCount = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Pagination#setPageCount(int)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B pageCount(int value)
    {
        this.hasPageCount = true;
        this.valPageCount = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Pagination#setPageFactory(javafx.util.Callback)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B pageFactory(javafx.util.Callback<java.lang.Integer, javafx.scene.Node> value)
    {
        this.hasPageFactory = true;
        this.valPageFactory = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Pagination#currentPageIndexProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindCurrentPageIndex(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1CurrentPageIndex = true;
        this.obsrv1CurrentPageIndex = source;
        this.bound2CurrentPageIndex = false;
        this.obsrv2CurrentPageIndex = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link Pagination#currentPageIndexProperty}的雙向連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalCurrentPageIndex(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1CurrentPageIndex = false;
        this.obsrv1CurrentPageIndex = null;
        this.bound2CurrentPageIndex = true;
        this.obsrv2CurrentPageIndex = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Pagination#maxPageIndicatorCountProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMaxPageIndicatorCount(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1MaxPageIndicatorCount = true;
        this.obsrv1MaxPageIndicatorCount = source;
        this.bound2MaxPageIndicatorCount = false;
        this.obsrv2MaxPageIndicatorCount = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link Pagination#maxPageIndicatorCountProperty}的雙向連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalMaxPageIndicatorCount(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1MaxPageIndicatorCount = false;
        this.obsrv1MaxPageIndicatorCount = null;
        this.bound2MaxPageIndicatorCount = true;
        this.obsrv2MaxPageIndicatorCount = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Pagination#pageCountProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindPageCount(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1PageCount = true;
        this.obsrv1PageCount = source;
        this.bound2PageCount = false;
        this.obsrv2PageCount = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link Pagination#pageCountProperty}的雙向連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalPageCount(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1PageCount = false;
        this.obsrv1PageCount = null;
        this.bound2PageCount = true;
        this.obsrv2PageCount = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Pagination#pageFactoryProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindPageFactory(javafx.beans.value.ObservableValue<? extends javafx.util.Callback<java.lang.Integer, javafx.scene.Node>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1PageFactory = true;
        this.obsrv1PageFactory = source;
        this.bound2PageFactory = false;
        this.obsrv2PageFactory = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link Pagination#pageFactoryProperty}的雙向連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalPageFactory(javafx.beans.property.Property<javafx.util.Callback<java.lang.Integer, javafx.scene.Node>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1PageFactory = false;
        this.obsrv1PageFactory = null;
        this.bound2PageFactory = true;
        this.obsrv2PageFactory = source;
        return (B) this;
    }

    /**
     * 建構{@link Pagination}物件
     *
     * @return 新的{@link Pagination}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public Pagination build()
    {
        Pagination instance = new Pagination();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link Pagination}物件
     *
     * @return 新的{@link Pagination}物件實體
     */
    @SuppressWarnings("unchecked")
    public Pagination build(int arg0)
    {
        Pagination instance = new Pagination(arg0);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link Pagination}物件
     *
     * @return 新的{@link Pagination}物件實體
     */
    @SuppressWarnings("unchecked")
    public Pagination build(int arg0, int arg1)
    {
        Pagination instance = new Pagination(arg0, arg1);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
