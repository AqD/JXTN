// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link Pagination}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class PaginationBuilder<Z extends Pagination, B extends PaginationBuilder<Z, B>>
        extends javafx.scene.control.ControlBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasCurrentPageIndex;
    protected int valCurrentPageIndex;

    protected boolean hasMaxPageIndicatorCount;
    protected int valMaxPageIndicatorCount;

    protected boolean hasPageCount;
    protected int valPageCount;

    protected boolean hasPageFactory;
    protected javafx.util.Callback<java.lang.Integer, javafx.scene.Node> valPageFactory;

    protected boolean boundCurrentPageIndex;
    protected javafx.beans.value.ObservableValue<? extends Integer> obsrvCurrentPageIndex;

    protected boolean boundMaxPageIndicatorCount;
    protected javafx.beans.value.ObservableValue<? extends Integer> obsrvMaxPageIndicatorCount;

    protected boolean boundPageCount;
    protected javafx.beans.value.ObservableValue<? extends Integer> obsrvPageCount;

    protected boolean boundPageFactory;
    protected javafx.beans.value.ObservableValue<? extends javafx.util.Callback<java.lang.Integer, javafx.scene.Node>> obsrvPageFactory;
    public void applyTo(Pagination instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasCurrentPageIndex)
            instance.setCurrentPageIndex(this.valCurrentPageIndex);
        if (this.hasMaxPageIndicatorCount)
            instance.setMaxPageIndicatorCount(this.valMaxPageIndicatorCount);
        if (this.hasPageCount)
            instance.setPageCount(this.valPageCount);
        if (this.hasPageFactory)
            instance.setPageFactory(this.valPageFactory);
        if (this.boundCurrentPageIndex)
            instance.currentPageIndexProperty().bind(this.obsrvCurrentPageIndex);
        if (this.boundMaxPageIndicatorCount)
            instance.maxPageIndicatorCountProperty().bind(this.obsrvMaxPageIndicatorCount);
        if (this.boundPageCount)
            instance.pageCountProperty().bind(this.obsrvPageCount);
        if (this.boundPageFactory)
            instance.pageFactoryProperty().bind(this.obsrvPageFactory);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B currentPageIndex(int value)
    {
        this.hasCurrentPageIndex = true;
        this.valCurrentPageIndex = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B maxPageIndicatorCount(int value)
    {
        this.hasMaxPageIndicatorCount = true;
        this.valMaxPageIndicatorCount = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B pageCount(int value)
    {
        this.hasPageCount = true;
        this.valPageCount = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B pageFactory(javafx.util.Callback<java.lang.Integer, javafx.scene.Node> value)
    {
        this.hasPageFactory = true;
        this.valPageFactory = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindCurrentPageIndex(javafx.beans.value.ObservableValue<? extends Integer> source)
    {
        assert (source != null);
        this.boundCurrentPageIndex = true;
        this.obsrvCurrentPageIndex = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindMaxPageIndicatorCount(javafx.beans.value.ObservableValue<? extends Integer> source)
    {
        assert (source != null);
        this.boundMaxPageIndicatorCount = true;
        this.obsrvMaxPageIndicatorCount = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindPageCount(javafx.beans.value.ObservableValue<? extends Integer> source)
    {
        assert (source != null);
        this.boundPageCount = true;
        this.obsrvPageCount = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindPageFactory(javafx.beans.value.ObservableValue<? extends javafx.util.Callback<java.lang.Integer, javafx.scene.Node>> source)
    {
        assert (source != null);
        this.boundPageFactory = true;
        this.obsrvPageFactory = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Pagination build()
    {
        Pagination instance = new Pagination();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
