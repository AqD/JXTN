// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link ContextMenu}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class ContextMenuBuilder<Z extends ContextMenu, B extends ContextMenuBuilder<Z, B>>
        extends javafx.scene.control.PopupControlBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasImpl_showRelativeToWindow;
    protected boolean valImpl_showRelativeToWindow;

    protected boolean hasItems;
    protected java.util.Collection<javafx.scene.control.MenuItem> valItems;

    protected boolean hasOnAction;
    protected javafx.event.EventHandler<javafx.event.ActionEvent> valOnAction;

    protected boolean boundImpl_showRelativeToWindow;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvImpl_showRelativeToWindow;

    protected boolean boundOnAction;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.event.ActionEvent>> obsrvOnAction;
    public void applyTo(ContextMenu instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasImpl_showRelativeToWindow)
            instance.setImpl_showRelativeToWindow(this.valImpl_showRelativeToWindow);
        if (this.hasItems)
            instance.getItems().setAll(this.valItems);
        if (this.hasOnAction)
            instance.setOnAction(this.valOnAction);
        if (this.boundImpl_showRelativeToWindow)
            instance.impl_showRelativeToWindowProperty().bind(this.obsrvImpl_showRelativeToWindow);
        if (this.boundOnAction)
            instance.onActionProperty().bind(this.obsrvOnAction);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B impl_showRelativeToWindow(boolean value)
    {
        this.hasImpl_showRelativeToWindow = true;
        this.valImpl_showRelativeToWindow = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B items(java.util.Collection<javafx.scene.control.MenuItem> value)
    {
        this.hasItems = true;
        this.valItems = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B items(javafx.scene.control.MenuItem... value)
    {
        this.hasItems = true;
        this.valItems = java.util.Arrays.asList(value);
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B onAction(javafx.event.EventHandler<javafx.event.ActionEvent> value)
    {
        this.hasOnAction = true;
        this.valOnAction = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindImpl_showRelativeToWindow(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundImpl_showRelativeToWindow = true;
        this.obsrvImpl_showRelativeToWindow = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindOnAction(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.event.ActionEvent>> source)
    {
        assert (source != null);
        this.boundOnAction = true;
        this.obsrvOnAction = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ContextMenu build()
    {
        ContextMenu instance = new ContextMenu();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
