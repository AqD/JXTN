// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control.cell;

/**
 * {@link CheckBoxTableCell}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class CheckBoxTableCellBuilder<S extends java.lang.Object, T extends java.lang.Object, Z extends CheckBoxTableCell<S, T>, B extends CheckBoxTableCellBuilder<S, T, Z, B>>
        extends javafx.scene.control.TableCellBuilder<S, T, Z, B>
{
    private boolean applied;

    protected boolean hasConverter;
    protected javafx.util.StringConverter<T> valConverter;

    protected boolean hasSelectedStateCallback;
    protected javafx.util.Callback<java.lang.Integer, javafx.beans.value.ObservableValue<java.lang.Boolean>> valSelectedStateCallback;

    protected boolean boundConverter;
    protected javafx.beans.value.ObservableValue<? extends javafx.util.StringConverter<T>> obsrvConverter;

    protected boolean boundSelectedStateCallback;
    protected javafx.beans.value.ObservableValue<? extends javafx.util.Callback<java.lang.Integer, javafx.beans.value.ObservableValue<java.lang.Boolean>>> obsrvSelectedStateCallback;
    public void applyTo(CheckBoxTableCell<S, T> instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasConverter)
            instance.setConverter(this.valConverter);
        if (this.hasSelectedStateCallback)
            instance.setSelectedStateCallback(this.valSelectedStateCallback);
        if (this.boundConverter)
            instance.converterProperty().bind(this.obsrvConverter);
        if (this.boundSelectedStateCallback)
            instance.selectedStateCallbackProperty().bind(this.obsrvSelectedStateCallback);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B converter(javafx.util.StringConverter<T> value)
    {
        this.hasConverter = true;
        this.valConverter = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B selectedStateCallback(javafx.util.Callback<java.lang.Integer, javafx.beans.value.ObservableValue<java.lang.Boolean>> value)
    {
        this.hasSelectedStateCallback = true;
        this.valSelectedStateCallback = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindConverter(javafx.beans.value.ObservableValue<? extends javafx.util.StringConverter<T>> source)
    {
        assert (source != null);
        this.boundConverter = true;
        this.obsrvConverter = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindSelectedStateCallback(javafx.beans.value.ObservableValue<? extends javafx.util.Callback<java.lang.Integer, javafx.beans.value.ObservableValue<java.lang.Boolean>>> source)
    {
        assert (source != null);
        this.boundSelectedStateCallback = true;
        this.obsrvSelectedStateCallback = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CheckBoxTableCell<S, T> build()
    {
        CheckBoxTableCell<S, T> instance = new CheckBoxTableCell<S, T>();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
