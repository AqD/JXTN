// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link ToolBar}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class ToolBarBuilder<Z extends ToolBar, B extends ToolBarBuilder<Z, B>>
        extends javafx.scene.control.ControlBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasItems;
    protected java.util.Collection<javafx.scene.Node> valItems;

    protected boolean hasOrientation;
    protected javafx.geometry.Orientation valOrientation;

    protected boolean boundOrientation;
    protected javafx.beans.value.ObservableValue<? extends javafx.geometry.Orientation> obsrvOrientation;
    public void applyTo(ToolBar instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasItems)
            instance.getItems().setAll(this.valItems);
        if (this.hasOrientation)
            instance.setOrientation(this.valOrientation);
        if (this.boundOrientation)
            instance.orientationProperty().bind(this.obsrvOrientation);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B items(java.util.Collection<javafx.scene.Node> value)
    {
        this.hasItems = true;
        this.valItems = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B items(javafx.scene.Node... value)
    {
        this.hasItems = true;
        this.valItems = java.util.Arrays.asList(value);
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B orientation(javafx.geometry.Orientation value)
    {
        this.hasOrientation = true;
        this.valOrientation = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindOrientation(javafx.beans.value.ObservableValue<? extends javafx.geometry.Orientation> source)
    {
        assert (source != null);
        this.boundOrientation = true;
        this.obsrvOrientation = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ToolBar build()
    {
        ToolBar instance = new ToolBar();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
