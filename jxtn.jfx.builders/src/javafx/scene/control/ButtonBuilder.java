// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link Button}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class ButtonBuilder<Z extends Button, B extends ButtonBuilder<Z, B>>
        extends javafx.scene.control.ButtonBaseBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasCancelButton;
    protected boolean valCancelButton;

    protected boolean hasDefaultButton;
    protected boolean valDefaultButton;

    protected boolean boundCancelButton;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvCancelButton;

    protected boolean boundDefaultButton;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvDefaultButton;
    public void applyTo(Button instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasCancelButton)
            instance.setCancelButton(this.valCancelButton);
        if (this.hasDefaultButton)
            instance.setDefaultButton(this.valDefaultButton);
        if (this.boundCancelButton)
            instance.cancelButtonProperty().bind(this.obsrvCancelButton);
        if (this.boundDefaultButton)
            instance.defaultButtonProperty().bind(this.obsrvDefaultButton);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B cancelButton(boolean value)
    {
        this.hasCancelButton = true;
        this.valCancelButton = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B defaultButton(boolean value)
    {
        this.hasDefaultButton = true;
        this.valDefaultButton = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindCancelButton(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundCancelButton = true;
        this.obsrvCancelButton = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindDefaultButton(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundDefaultButton = true;
        this.obsrvDefaultButton = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Button build()
    {
        Button instance = new Button();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
