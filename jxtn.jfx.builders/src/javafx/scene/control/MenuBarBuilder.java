// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link MenuBar}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class MenuBarBuilder<Z extends MenuBar, B extends MenuBarBuilder<Z, B>>
        extends javafx.scene.control.ControlBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasMenus;
    protected java.util.Collection<javafx.scene.control.Menu> valMenus;

    protected boolean hasUseSystemMenuBar;
    protected boolean valUseSystemMenuBar;

    protected boolean boundUseSystemMenuBar;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvUseSystemMenuBar;
    public void applyTo(MenuBar instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasMenus)
            instance.getMenus().setAll(this.valMenus);
        if (this.hasUseSystemMenuBar)
            instance.setUseSystemMenuBar(this.valUseSystemMenuBar);
        if (this.boundUseSystemMenuBar)
            instance.useSystemMenuBarProperty().bind(this.obsrvUseSystemMenuBar);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B menus(java.util.Collection<javafx.scene.control.Menu> value)
    {
        this.hasMenus = true;
        this.valMenus = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B menus(javafx.scene.control.Menu... value)
    {
        this.hasMenus = true;
        this.valMenus = java.util.Arrays.asList(value);
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B useSystemMenuBar(boolean value)
    {
        this.hasUseSystemMenuBar = true;
        this.valUseSystemMenuBar = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindUseSystemMenuBar(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundUseSystemMenuBar = true;
        this.obsrvUseSystemMenuBar = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MenuBar build()
    {
        MenuBar instance = new MenuBar();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
