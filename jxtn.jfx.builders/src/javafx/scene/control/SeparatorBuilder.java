// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link Separator}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class SeparatorBuilder<Z extends Separator, B extends SeparatorBuilder<Z, B>>
        extends javafx.scene.control.ControlBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasHalignment;
    protected javafx.geometry.HPos valHalignment;

    protected boolean hasOrientation;
    protected javafx.geometry.Orientation valOrientation;

    protected boolean hasValignment;
    protected javafx.geometry.VPos valValignment;

    protected boolean boundHalignment;
    protected javafx.beans.value.ObservableValue<? extends javafx.geometry.HPos> obsrvHalignment;

    protected boolean boundOrientation;
    protected javafx.beans.value.ObservableValue<? extends javafx.geometry.Orientation> obsrvOrientation;

    protected boolean boundValignment;
    protected javafx.beans.value.ObservableValue<? extends javafx.geometry.VPos> obsrvValignment;
    public void applyTo(Separator instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasHalignment)
            instance.setHalignment(this.valHalignment);
        if (this.hasOrientation)
            instance.setOrientation(this.valOrientation);
        if (this.hasValignment)
            instance.setValignment(this.valValignment);
        if (this.boundHalignment)
            instance.halignmentProperty().bind(this.obsrvHalignment);
        if (this.boundOrientation)
            instance.orientationProperty().bind(this.obsrvOrientation);
        if (this.boundValignment)
            instance.valignmentProperty().bind(this.obsrvValignment);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B halignment(javafx.geometry.HPos value)
    {
        this.hasHalignment = true;
        this.valHalignment = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B orientation(javafx.geometry.Orientation value)
    {
        this.hasOrientation = true;
        this.valOrientation = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B valignment(javafx.geometry.VPos value)
    {
        this.hasValignment = true;
        this.valValignment = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindHalignment(javafx.beans.value.ObservableValue<? extends javafx.geometry.HPos> source)
    {
        assert (source != null);
        this.boundHalignment = true;
        this.obsrvHalignment = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindOrientation(javafx.beans.value.ObservableValue<? extends javafx.geometry.Orientation> source)
    {
        assert (source != null);
        this.boundOrientation = true;
        this.obsrvOrientation = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindValignment(javafx.beans.value.ObservableValue<? extends javafx.geometry.VPos> source)
    {
        assert (source != null);
        this.boundValignment = true;
        this.obsrvValignment = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Separator build()
    {
        Separator instance = new Separator();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
