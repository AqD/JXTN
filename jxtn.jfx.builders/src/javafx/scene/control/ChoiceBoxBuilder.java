// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link ChoiceBox}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class ChoiceBoxBuilder<T extends java.lang.Object, Z extends ChoiceBox<T>, B extends ChoiceBoxBuilder<T, Z, B>>
        extends javafx.scene.control.ControlBuilder<Z, B>
{

    protected boolean hasConverter;
    protected javafx.util.StringConverter<T> valConverter;

    protected boolean hasItems;
    protected javafx.collections.ObservableList<T> valItems;

    protected boolean hasSelectionModel;
    protected javafx.scene.control.SingleSelectionModel<T> valSelectionModel;

    protected boolean hasValue;
    protected T valValue;

    protected boolean boundItems;
    protected javafx.beans.value.ObservableValue<? extends javafx.collections.ObservableList<T>> obsrvItems;

    protected boolean boundSelectionModel;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.control.SingleSelectionModel<T>> obsrvSelectionModel;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasConverter)
            instance.setConverter(this.valConverter);
        if (this.hasItems)
            instance.setItems(this.valItems);
        if (this.hasSelectionModel)
            instance.setSelectionModel(this.valSelectionModel);
        if (this.hasValue)
            instance.setValue(this.valValue);
        if (this.boundItems)
            instance.itemsProperty().bind(this.obsrvItems);
        if (this.boundSelectionModel)
            instance.selectionModelProperty().bind(this.obsrvSelectionModel);
    }

    /**
     * 設定屬性{@link ChoiceBox#setConverter(javafx.util.StringConverter)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B converter(javafx.util.StringConverter<T> value)
    {
        this.hasConverter = true;
        this.valConverter = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ChoiceBox#setItems(javafx.collections.ObservableList)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B items(javafx.collections.ObservableList<T> value)
    {
        this.hasItems = true;
        this.valItems = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ChoiceBox#setSelectionModel(javafx.scene.control.SingleSelectionModel)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B selectionModel(javafx.scene.control.SingleSelectionModel<T> value)
    {
        this.hasSelectionModel = true;
        this.valSelectionModel = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ChoiceBox#setValue(T)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B value(T value)
    {
        this.hasValue = true;
        this.valValue = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ChoiceBox#itemsProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindItems(javafx.beans.value.ObservableValue<? extends javafx.collections.ObservableList<T>> source)
    {
        assert (source != null);
        this.boundItems = true;
        this.obsrvItems = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ChoiceBox#selectionModelProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindSelectionModel(javafx.beans.value.ObservableValue<? extends javafx.scene.control.SingleSelectionModel<T>> source)
    {
        assert (source != null);
        this.boundSelectionModel = true;
        this.obsrvSelectionModel = source;
        return (B) this;
    }

    /**
     * 建構{@link ChoiceBox}物件
     *
     * @return 新的{@link ChoiceBox}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public ChoiceBox<T> build()
    {
        ChoiceBox<T> instance = new ChoiceBox<T>();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
