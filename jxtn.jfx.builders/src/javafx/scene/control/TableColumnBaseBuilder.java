// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link TableColumnBase}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class TableColumnBaseBuilder<S extends java.lang.Object, T extends java.lang.Object, Z extends TableColumnBase<S, T>, B extends TableColumnBaseBuilder<S, T, Z, B>>
        extends jxtn.jfx.builders.AbstractBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasComparator;
    protected java.util.Comparator<T> valComparator;

    protected boolean hasContextMenu;
    protected javafx.scene.control.ContextMenu valContextMenu;

    protected boolean hasEditable;
    protected boolean valEditable;

    protected boolean hasGraphic;
    protected javafx.scene.Node valGraphic;

    protected boolean hasId;
    protected java.lang.String valId;

    protected boolean hasMaxWidth;
    protected double valMaxWidth;

    protected boolean hasMinWidth;
    protected double valMinWidth;

    protected boolean hasPrefWidth;
    protected double valPrefWidth;

    protected boolean hasResizable;
    protected boolean valResizable;

    protected boolean hasSortNode;
    protected javafx.scene.Node valSortNode;

    protected boolean hasSortable;
    protected boolean valSortable;

    protected boolean hasStyle;
    protected java.lang.String valStyle;

    protected boolean hasStyleClass;
    protected java.util.Collection<java.lang.String> valStyleClass;

    protected boolean hasText;
    protected java.lang.String valText;

    protected boolean hasUserData;
    protected java.lang.Object valUserData;

    protected boolean hasVisible;
    protected boolean valVisible;

    protected boolean boundComparator;
    protected javafx.beans.value.ObservableValue<? extends java.util.Comparator<T>> obsrvComparator;

    protected boolean boundContextMenu;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.control.ContextMenu> obsrvContextMenu;

    protected boolean boundEditable;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvEditable;

    protected boolean boundGraphic;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrvGraphic;

    protected boolean boundId;
    protected javafx.beans.value.ObservableValue<? extends String> obsrvId;

    protected boolean boundMaxWidth;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvMaxWidth;

    protected boolean boundMinWidth;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvMinWidth;

    protected boolean boundPrefWidth;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvPrefWidth;

    protected boolean boundResizable;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvResizable;

    protected boolean boundSortNode;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrvSortNode;

    protected boolean boundSortable;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvSortable;

    protected boolean boundStyle;
    protected javafx.beans.value.ObservableValue<? extends String> obsrvStyle;

    protected boolean boundText;
    protected javafx.beans.value.ObservableValue<? extends String> obsrvText;

    protected boolean boundVisible;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvVisible;
    public void applyTo(TableColumnBase<S, T> instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasComparator)
            instance.setComparator(this.valComparator);
        if (this.hasContextMenu)
            instance.setContextMenu(this.valContextMenu);
        if (this.hasEditable)
            instance.setEditable(this.valEditable);
        if (this.hasGraphic)
            instance.setGraphic(this.valGraphic);
        if (this.hasId)
            instance.setId(this.valId);
        if (this.hasMaxWidth)
            instance.setMaxWidth(this.valMaxWidth);
        if (this.hasMinWidth)
            instance.setMinWidth(this.valMinWidth);
        if (this.hasPrefWidth)
            instance.setPrefWidth(this.valPrefWidth);
        if (this.hasResizable)
            instance.setResizable(this.valResizable);
        if (this.hasSortNode)
            instance.setSortNode(this.valSortNode);
        if (this.hasSortable)
            instance.setSortable(this.valSortable);
        if (this.hasStyle)
            instance.setStyle(this.valStyle);
        if (this.hasStyleClass)
            instance.getStyleClass().setAll(this.valStyleClass);
        if (this.hasText)
            instance.setText(this.valText);
        if (this.hasUserData)
            instance.setUserData(this.valUserData);
        if (this.hasVisible)
            instance.setVisible(this.valVisible);
        if (this.boundComparator)
            instance.comparatorProperty().bind(this.obsrvComparator);
        if (this.boundContextMenu)
            instance.contextMenuProperty().bind(this.obsrvContextMenu);
        if (this.boundEditable)
            instance.editableProperty().bind(this.obsrvEditable);
        if (this.boundGraphic)
            instance.graphicProperty().bind(this.obsrvGraphic);
        if (this.boundId)
            instance.idProperty().bind(this.obsrvId);
        if (this.boundMaxWidth)
            instance.maxWidthProperty().bind(this.obsrvMaxWidth);
        if (this.boundMinWidth)
            instance.minWidthProperty().bind(this.obsrvMinWidth);
        if (this.boundPrefWidth)
            instance.prefWidthProperty().bind(this.obsrvPrefWidth);
        if (this.boundResizable)
            instance.resizableProperty().bind(this.obsrvResizable);
        if (this.boundSortNode)
            instance.sortNodeProperty().bind(this.obsrvSortNode);
        if (this.boundSortable)
            instance.sortableProperty().bind(this.obsrvSortable);
        if (this.boundStyle)
            instance.styleProperty().bind(this.obsrvStyle);
        if (this.boundText)
            instance.textProperty().bind(this.obsrvText);
        if (this.boundVisible)
            instance.visibleProperty().bind(this.obsrvVisible);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B comparator(java.util.Comparator<T> value)
    {
        this.hasComparator = true;
        this.valComparator = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B contextMenu(javafx.scene.control.ContextMenu value)
    {
        this.hasContextMenu = true;
        this.valContextMenu = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B editable(boolean value)
    {
        this.hasEditable = true;
        this.valEditable = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B graphic(javafx.scene.Node value)
    {
        this.hasGraphic = true;
        this.valGraphic = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B id(java.lang.String value)
    {
        this.hasId = true;
        this.valId = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B maxWidth(double value)
    {
        this.hasMaxWidth = true;
        this.valMaxWidth = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B minWidth(double value)
    {
        this.hasMinWidth = true;
        this.valMinWidth = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B prefWidth(double value)
    {
        this.hasPrefWidth = true;
        this.valPrefWidth = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B resizable(boolean value)
    {
        this.hasResizable = true;
        this.valResizable = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B sortNode(javafx.scene.Node value)
    {
        this.hasSortNode = true;
        this.valSortNode = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B sortable(boolean value)
    {
        this.hasSortable = true;
        this.valSortable = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B style(java.lang.String value)
    {
        this.hasStyle = true;
        this.valStyle = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B styleClass(java.util.Collection<java.lang.String> value)
    {
        this.hasStyleClass = true;
        this.valStyleClass = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B styleClass(java.lang.String... value)
    {
        this.hasStyleClass = true;
        this.valStyleClass = java.util.Arrays.asList(value);
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B text(java.lang.String value)
    {
        this.hasText = true;
        this.valText = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B userData(java.lang.Object value)
    {
        this.hasUserData = true;
        this.valUserData = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B visible(boolean value)
    {
        this.hasVisible = true;
        this.valVisible = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindComparator(javafx.beans.value.ObservableValue<? extends java.util.Comparator<T>> source)
    {
        assert (source != null);
        this.boundComparator = true;
        this.obsrvComparator = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindContextMenu(javafx.beans.value.ObservableValue<? extends javafx.scene.control.ContextMenu> source)
    {
        assert (source != null);
        this.boundContextMenu = true;
        this.obsrvContextMenu = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindEditable(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundEditable = true;
        this.obsrvEditable = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindGraphic(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        assert (source != null);
        this.boundGraphic = true;
        this.obsrvGraphic = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindId(javafx.beans.value.ObservableValue<? extends String> source)
    {
        assert (source != null);
        this.boundId = true;
        this.obsrvId = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindMaxWidth(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundMaxWidth = true;
        this.obsrvMaxWidth = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindMinWidth(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundMinWidth = true;
        this.obsrvMinWidth = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindPrefWidth(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundPrefWidth = true;
        this.obsrvPrefWidth = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindResizable(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundResizable = true;
        this.obsrvResizable = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindSortNode(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        assert (source != null);
        this.boundSortNode = true;
        this.obsrvSortNode = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindSortable(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundSortable = true;
        this.obsrvSortable = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindStyle(javafx.beans.value.ObservableValue<? extends String> source)
    {
        assert (source != null);
        this.boundStyle = true;
        this.obsrvStyle = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindText(javafx.beans.value.ObservableValue<? extends String> source)
    {
        assert (source != null);
        this.boundText = true;
        this.obsrvText = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindVisible(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundVisible = true;
        this.obsrvVisible = source;
        return (B) this;
    }
}
