// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link TextArea}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class TextAreaBuilder<Z extends TextArea, B extends TextAreaBuilder<Z, B>>
        extends javafx.scene.control.TextInputControlBuilder<Z, B>
{

    protected boolean hasParagraphs;
    protected java.util.Collection<java.lang.CharSequence> valParagraphs;

    protected boolean hasPrefColumnCount;
    protected int valPrefColumnCount;

    protected boolean hasPrefRowCount;
    protected int valPrefRowCount;

    protected boolean hasScrollLeft;
    protected double valScrollLeft;

    protected boolean hasScrollTop;
    protected double valScrollTop;

    protected boolean hasWrapText;
    protected boolean valWrapText;

    protected boolean boundPrefColumnCount;
    protected javafx.beans.value.ObservableValue<? extends Integer> obsrvPrefColumnCount;

    protected boolean boundPrefRowCount;
    protected javafx.beans.value.ObservableValue<? extends Integer> obsrvPrefRowCount;

    protected boolean boundScrollLeft;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvScrollLeft;

    protected boolean boundScrollTop;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvScrollTop;

    protected boolean boundWrapText;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvWrapText;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasParagraphs)
            instance.getParagraphs().setAll(this.valParagraphs);
        if (this.hasPrefColumnCount)
            instance.setPrefColumnCount(this.valPrefColumnCount);
        if (this.hasPrefRowCount)
            instance.setPrefRowCount(this.valPrefRowCount);
        if (this.hasScrollLeft)
            instance.setScrollLeft(this.valScrollLeft);
        if (this.hasScrollTop)
            instance.setScrollTop(this.valScrollTop);
        if (this.hasWrapText)
            instance.setWrapText(this.valWrapText);
        if (this.boundPrefColumnCount)
            instance.prefColumnCountProperty().bind(this.obsrvPrefColumnCount);
        if (this.boundPrefRowCount)
            instance.prefRowCountProperty().bind(this.obsrvPrefRowCount);
        if (this.boundScrollLeft)
            instance.scrollLeftProperty().bind(this.obsrvScrollLeft);
        if (this.boundScrollTop)
            instance.scrollTopProperty().bind(this.obsrvScrollTop);
        if (this.boundWrapText)
            instance.wrapTextProperty().bind(this.obsrvWrapText);
    }

    /**
     * 設定集合屬性{@link TextArea#getParagraphs}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B paragraphs(java.util.Collection<java.lang.CharSequence> value)
    {
        this.hasParagraphs = true;
        this.valParagraphs = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link TextArea#getParagraphs}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B paragraphs(java.lang.CharSequence... value)
    {
        this.hasParagraphs = true;
        this.valParagraphs = java.util.Arrays.asList(value);
        return (B) this;
    }

    /**
     * 設定屬性{@link TextArea#setPrefColumnCount}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B prefColumnCount(int value)
    {
        this.hasPrefColumnCount = true;
        this.valPrefColumnCount = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TextArea#setPrefRowCount}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B prefRowCount(int value)
    {
        this.hasPrefRowCount = true;
        this.valPrefRowCount = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TextArea#setScrollLeft}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B scrollLeft(double value)
    {
        this.hasScrollLeft = true;
        this.valScrollLeft = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TextArea#setScrollTop}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B scrollTop(double value)
    {
        this.hasScrollTop = true;
        this.valScrollTop = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TextArea#setWrapText}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B wrapText(boolean value)
    {
        this.hasWrapText = true;
        this.valWrapText = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TextArea#prefColumnCountProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindPrefColumnCount(javafx.beans.value.ObservableValue<? extends Integer> source)
    {
        assert (source != null);
        this.boundPrefColumnCount = true;
        this.obsrvPrefColumnCount = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TextArea#prefRowCountProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindPrefRowCount(javafx.beans.value.ObservableValue<? extends Integer> source)
    {
        assert (source != null);
        this.boundPrefRowCount = true;
        this.obsrvPrefRowCount = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TextArea#scrollLeftProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindScrollLeft(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundScrollLeft = true;
        this.obsrvScrollLeft = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TextArea#scrollTopProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindScrollTop(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundScrollTop = true;
        this.obsrvScrollTop = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TextArea#wrapTextProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindWrapText(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundWrapText = true;
        this.obsrvWrapText = source;
        return (B) this;
    }

    /**
     * 建構{@link TextArea}物件
     *
     * @return 新的{@link TextArea}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public TextArea build()
    {
        TextArea instance = new TextArea();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
