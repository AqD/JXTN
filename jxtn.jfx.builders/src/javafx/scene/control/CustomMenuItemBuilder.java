// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link CustomMenuItem}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class CustomMenuItemBuilder<Z extends CustomMenuItem, B extends CustomMenuItemBuilder<Z, B>>
        extends javafx.scene.control.MenuItemBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasContent;
    protected javafx.scene.Node valContent;

    protected boolean hasHideOnClick;
    protected boolean valHideOnClick;

    protected boolean boundContent;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrvContent;

    protected boolean boundHideOnClick;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvHideOnClick;
    public void applyTo(CustomMenuItem instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasContent)
            instance.setContent(this.valContent);
        if (this.hasHideOnClick)
            instance.setHideOnClick(this.valHideOnClick);
        if (this.boundContent)
            instance.contentProperty().bind(this.obsrvContent);
        if (this.boundHideOnClick)
            instance.hideOnClickProperty().bind(this.obsrvHideOnClick);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B content(javafx.scene.Node value)
    {
        this.hasContent = true;
        this.valContent = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B hideOnClick(boolean value)
    {
        this.hasHideOnClick = true;
        this.valHideOnClick = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindContent(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        assert (source != null);
        this.boundContent = true;
        this.obsrvContent = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindHideOnClick(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundHideOnClick = true;
        this.obsrvHideOnClick = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CustomMenuItem build()
    {
        CustomMenuItem instance = new CustomMenuItem();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
