// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link TreeView}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class TreeViewBuilder<T extends java.lang.Object, Z extends TreeView<T>, B extends TreeViewBuilder<T, Z, B>>
        extends javafx.scene.control.ControlBuilder<Z, B>
{

    protected boolean hasCellFactory;
    protected javafx.util.Callback<javafx.scene.control.TreeView<T>, javafx.scene.control.TreeCell<T>> valCellFactory;

    protected boolean hasEditable;
    protected boolean valEditable;

    protected boolean hasFixedCellSize;
    protected double valFixedCellSize;

    protected boolean hasFocusModel;
    protected javafx.scene.control.FocusModel<javafx.scene.control.TreeItem<T>> valFocusModel;

    protected boolean hasOnEditCancel;
    protected javafx.event.EventHandler<javafx.scene.control.TreeView.EditEvent<T>> valOnEditCancel;

    protected boolean hasOnEditCommit;
    protected javafx.event.EventHandler<javafx.scene.control.TreeView.EditEvent<T>> valOnEditCommit;

    protected boolean hasOnEditStart;
    protected javafx.event.EventHandler<javafx.scene.control.TreeView.EditEvent<T>> valOnEditStart;

    protected boolean hasOnScrollTo;
    protected javafx.event.EventHandler<javafx.scene.control.ScrollToEvent<java.lang.Integer>> valOnScrollTo;

    protected boolean hasRoot;
    protected javafx.scene.control.TreeItem<T> valRoot;

    protected boolean hasSelectionModel;
    protected javafx.scene.control.MultipleSelectionModel<javafx.scene.control.TreeItem<T>> valSelectionModel;

    protected boolean hasShowRoot;
    protected boolean valShowRoot;

    protected boolean boundCellFactory;
    protected javafx.beans.value.ObservableValue<? extends javafx.util.Callback<javafx.scene.control.TreeView<T>, javafx.scene.control.TreeCell<T>>> obsrvCellFactory;

    protected boolean boundEditable;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvEditable;

    protected boolean boundFixedCellSize;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvFixedCellSize;

    protected boolean boundFocusModel;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.control.FocusModel<javafx.scene.control.TreeItem<T>>> obsrvFocusModel;

    protected boolean boundOnEditCancel;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.control.TreeView.EditEvent<T>>> obsrvOnEditCancel;

    protected boolean boundOnEditCommit;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.control.TreeView.EditEvent<T>>> obsrvOnEditCommit;

    protected boolean boundOnEditStart;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.control.TreeView.EditEvent<T>>> obsrvOnEditStart;

    protected boolean boundRoot;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.control.TreeItem<T>> obsrvRoot;

    protected boolean boundSelectionModel;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.control.MultipleSelectionModel<javafx.scene.control.TreeItem<T>>> obsrvSelectionModel;

    protected boolean boundShowRoot;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvShowRoot;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasCellFactory)
            instance.setCellFactory(this.valCellFactory);
        if (this.hasEditable)
            instance.setEditable(this.valEditable);
        if (this.hasFixedCellSize)
            instance.setFixedCellSize(this.valFixedCellSize);
        if (this.hasFocusModel)
            instance.setFocusModel(this.valFocusModel);
        if (this.hasOnEditCancel)
            instance.setOnEditCancel(this.valOnEditCancel);
        if (this.hasOnEditCommit)
            instance.setOnEditCommit(this.valOnEditCommit);
        if (this.hasOnEditStart)
            instance.setOnEditStart(this.valOnEditStart);
        if (this.hasOnScrollTo)
            instance.setOnScrollTo(this.valOnScrollTo);
        if (this.hasRoot)
            instance.setRoot(this.valRoot);
        if (this.hasSelectionModel)
            instance.setSelectionModel(this.valSelectionModel);
        if (this.hasShowRoot)
            instance.setShowRoot(this.valShowRoot);
        if (this.boundCellFactory)
            instance.cellFactoryProperty().bind(this.obsrvCellFactory);
        if (this.boundEditable)
            instance.editableProperty().bind(this.obsrvEditable);
        if (this.boundFixedCellSize)
            instance.fixedCellSizeProperty().bind(this.obsrvFixedCellSize);
        if (this.boundFocusModel)
            instance.focusModelProperty().bind(this.obsrvFocusModel);
        if (this.boundOnEditCancel)
            instance.onEditCancelProperty().bind(this.obsrvOnEditCancel);
        if (this.boundOnEditCommit)
            instance.onEditCommitProperty().bind(this.obsrvOnEditCommit);
        if (this.boundOnEditStart)
            instance.onEditStartProperty().bind(this.obsrvOnEditStart);
        if (this.boundRoot)
            instance.rootProperty().bind(this.obsrvRoot);
        if (this.boundSelectionModel)
            instance.selectionModelProperty().bind(this.obsrvSelectionModel);
        if (this.boundShowRoot)
            instance.showRootProperty().bind(this.obsrvShowRoot);
    }

    /**
     * 設定屬性{@link TreeView#setCellFactory(javafx.util.Callback)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B cellFactory(javafx.util.Callback<javafx.scene.control.TreeView<T>, javafx.scene.control.TreeCell<T>> value)
    {
        this.hasCellFactory = true;
        this.valCellFactory = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeView#setEditable(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B editable(boolean value)
    {
        this.hasEditable = true;
        this.valEditable = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeView#setFixedCellSize(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B fixedCellSize(double value)
    {
        this.hasFixedCellSize = true;
        this.valFixedCellSize = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeView#setFocusModel(javafx.scene.control.FocusModel)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B focusModel(javafx.scene.control.FocusModel<javafx.scene.control.TreeItem<T>> value)
    {
        this.hasFocusModel = true;
        this.valFocusModel = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeView#setOnEditCancel(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onEditCancel(javafx.event.EventHandler<javafx.scene.control.TreeView.EditEvent<T>> value)
    {
        this.hasOnEditCancel = true;
        this.valOnEditCancel = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeView#setOnEditCommit(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onEditCommit(javafx.event.EventHandler<javafx.scene.control.TreeView.EditEvent<T>> value)
    {
        this.hasOnEditCommit = true;
        this.valOnEditCommit = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeView#setOnEditStart(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onEditStart(javafx.event.EventHandler<javafx.scene.control.TreeView.EditEvent<T>> value)
    {
        this.hasOnEditStart = true;
        this.valOnEditStart = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeView#setOnScrollTo(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onScrollTo(javafx.event.EventHandler<javafx.scene.control.ScrollToEvent<java.lang.Integer>> value)
    {
        this.hasOnScrollTo = true;
        this.valOnScrollTo = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeView#setRoot(javafx.scene.control.TreeItem)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B root(javafx.scene.control.TreeItem<T> value)
    {
        this.hasRoot = true;
        this.valRoot = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeView#setSelectionModel(javafx.scene.control.MultipleSelectionModel)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B selectionModel(javafx.scene.control.MultipleSelectionModel<javafx.scene.control.TreeItem<T>> value)
    {
        this.hasSelectionModel = true;
        this.valSelectionModel = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeView#setShowRoot(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B showRoot(boolean value)
    {
        this.hasShowRoot = true;
        this.valShowRoot = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeView#cellFactoryProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindCellFactory(javafx.beans.value.ObservableValue<? extends javafx.util.Callback<javafx.scene.control.TreeView<T>, javafx.scene.control.TreeCell<T>>> source)
    {
        assert (source != null);
        this.boundCellFactory = true;
        this.obsrvCellFactory = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeView#editableProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindEditable(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundEditable = true;
        this.obsrvEditable = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeView#fixedCellSizeProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindFixedCellSize(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundFixedCellSize = true;
        this.obsrvFixedCellSize = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeView#focusModelProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindFocusModel(javafx.beans.value.ObservableValue<? extends javafx.scene.control.FocusModel<javafx.scene.control.TreeItem<T>>> source)
    {
        assert (source != null);
        this.boundFocusModel = true;
        this.obsrvFocusModel = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeView#onEditCancelProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnEditCancel(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.control.TreeView.EditEvent<T>>> source)
    {
        assert (source != null);
        this.boundOnEditCancel = true;
        this.obsrvOnEditCancel = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeView#onEditCommitProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnEditCommit(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.control.TreeView.EditEvent<T>>> source)
    {
        assert (source != null);
        this.boundOnEditCommit = true;
        this.obsrvOnEditCommit = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeView#onEditStartProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindOnEditStart(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.control.TreeView.EditEvent<T>>> source)
    {
        assert (source != null);
        this.boundOnEditStart = true;
        this.obsrvOnEditStart = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeView#rootProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindRoot(javafx.beans.value.ObservableValue<? extends javafx.scene.control.TreeItem<T>> source)
    {
        assert (source != null);
        this.boundRoot = true;
        this.obsrvRoot = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeView#selectionModelProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindSelectionModel(javafx.beans.value.ObservableValue<? extends javafx.scene.control.MultipleSelectionModel<javafx.scene.control.TreeItem<T>>> source)
    {
        assert (source != null);
        this.boundSelectionModel = true;
        this.obsrvSelectionModel = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeView#showRootProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindShowRoot(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundShowRoot = true;
        this.obsrvShowRoot = source;
        return (B) this;
    }

    /**
     * 建構{@link TreeView}物件
     *
     * @return 新的{@link TreeView}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public TreeView<T> build()
    {
        TreeView<T> instance = new TreeView<T>();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
