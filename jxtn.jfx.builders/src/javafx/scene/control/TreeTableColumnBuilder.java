// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link TreeTableColumn}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class TreeTableColumnBuilder<S extends java.lang.Object, T extends java.lang.Object, Z extends TreeTableColumn<S, T>, B extends TreeTableColumnBuilder<S, T, Z, B>>
        extends javafx.scene.control.TableColumnBaseBuilder<javafx.scene.control.TreeItem<S>, T, Z, B>
{

    protected boolean hasCellFactory;
    protected javafx.util.Callback<javafx.scene.control.TreeTableColumn<S, T>, javafx.scene.control.TreeTableCell<S, T>> valCellFactory;

    protected boolean hasCellValueFactory;
    protected javafx.util.Callback<javafx.scene.control.TreeTableColumn.CellDataFeatures<S, T>, javafx.beans.value.ObservableValue<T>> valCellValueFactory;

    protected boolean hasColumns;
    protected java.util.Collection<javafx.scene.control.TreeTableColumn<S, ?>> valColumns;

    protected boolean hasOnEditCancel;
    protected javafx.event.EventHandler<javafx.scene.control.TreeTableColumn.CellEditEvent<S, T>> valOnEditCancel;

    protected boolean hasOnEditCommit;
    protected javafx.event.EventHandler<javafx.scene.control.TreeTableColumn.CellEditEvent<S, T>> valOnEditCommit;

    protected boolean hasOnEditStart;
    protected javafx.event.EventHandler<javafx.scene.control.TreeTableColumn.CellEditEvent<S, T>> valOnEditStart;

    protected boolean hasSortType;
    protected javafx.scene.control.TreeTableColumn.SortType valSortType;

    protected boolean boundCellFactory;
    protected javafx.beans.value.ObservableValue<? extends javafx.util.Callback<javafx.scene.control.TreeTableColumn<S, T>, javafx.scene.control.TreeTableCell<S, T>>> obsrvCellFactory;

    protected boolean boundCellValueFactory;
    protected javafx.beans.value.ObservableValue<? extends javafx.util.Callback<javafx.scene.control.TreeTableColumn.CellDataFeatures<S, T>, javafx.beans.value.ObservableValue<T>>> obsrvCellValueFactory;

    protected boolean boundOnEditCancel;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.control.TreeTableColumn.CellEditEvent<S, T>>> obsrvOnEditCancel;

    protected boolean boundOnEditCommit;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.control.TreeTableColumn.CellEditEvent<S, T>>> obsrvOnEditCommit;

    protected boolean boundOnEditStart;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.control.TreeTableColumn.CellEditEvent<S, T>>> obsrvOnEditStart;

    protected boolean boundSortType;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.control.TreeTableColumn.SortType> obsrvSortType;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasCellFactory)
            instance.setCellFactory(this.valCellFactory);
        if (this.hasCellValueFactory)
            instance.setCellValueFactory(this.valCellValueFactory);
        if (this.hasColumns)
            instance.getColumns().setAll(this.valColumns);
        if (this.hasOnEditCancel)
            instance.setOnEditCancel(this.valOnEditCancel);
        if (this.hasOnEditCommit)
            instance.setOnEditCommit(this.valOnEditCommit);
        if (this.hasOnEditStart)
            instance.setOnEditStart(this.valOnEditStart);
        if (this.hasSortType)
            instance.setSortType(this.valSortType);
        if (this.boundCellFactory)
            instance.cellFactoryProperty().bind(this.obsrvCellFactory);
        if (this.boundCellValueFactory)
            instance.cellValueFactoryProperty().bind(this.obsrvCellValueFactory);
        if (this.boundOnEditCancel)
            instance.onEditCancelProperty().bind(this.obsrvOnEditCancel);
        if (this.boundOnEditCommit)
            instance.onEditCommitProperty().bind(this.obsrvOnEditCommit);
        if (this.boundOnEditStart)
            instance.onEditStartProperty().bind(this.obsrvOnEditStart);
        if (this.boundSortType)
            instance.sortTypeProperty().bind(this.obsrvSortType);
    }

    /**
     * 設定屬性{@link TreeTableColumn#setCellFactory(javafx.util.Callback)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B cellFactory(javafx.util.Callback<javafx.scene.control.TreeTableColumn<S, T>, javafx.scene.control.TreeTableCell<S, T>> value)
    {
        this.hasCellFactory = true;
        this.valCellFactory = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeTableColumn#setCellValueFactory(javafx.util.Callback)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B cellValueFactory(javafx.util.Callback<javafx.scene.control.TreeTableColumn.CellDataFeatures<S, T>, javafx.beans.value.ObservableValue<T>> value)
    {
        this.hasCellValueFactory = true;
        this.valCellValueFactory = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link TreeTableColumn#getColumns}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B columns(java.util.Collection<javafx.scene.control.TreeTableColumn<S, ?>> value)
    {
        this.hasColumns = true;
        this.valColumns = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link TreeTableColumn#getColumns}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B columns(javafx.scene.control.TreeTableColumn<S, ?>... value)
    {
        this.hasColumns = true;
        this.valColumns = java.util.Arrays.asList(value);
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeTableColumn#setOnEditCancel(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onEditCancel(javafx.event.EventHandler<javafx.scene.control.TreeTableColumn.CellEditEvent<S, T>> value)
    {
        this.hasOnEditCancel = true;
        this.valOnEditCancel = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeTableColumn#setOnEditCommit(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onEditCommit(javafx.event.EventHandler<javafx.scene.control.TreeTableColumn.CellEditEvent<S, T>> value)
    {
        this.hasOnEditCommit = true;
        this.valOnEditCommit = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeTableColumn#setOnEditStart(javafx.event.EventHandler)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onEditStart(javafx.event.EventHandler<javafx.scene.control.TreeTableColumn.CellEditEvent<S, T>> value)
    {
        this.hasOnEditStart = true;
        this.valOnEditStart = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeTableColumn#setSortType(javafx.scene.control.TreeTableColumn.SortType)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B sortType(javafx.scene.control.TreeTableColumn.SortType value)
    {
        this.hasSortType = true;
        this.valSortType = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeTableColumn#cellFactoryProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindCellFactory(javafx.beans.value.ObservableValue<? extends javafx.util.Callback<javafx.scene.control.TreeTableColumn<S, T>, javafx.scene.control.TreeTableCell<S, T>>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundCellFactory = true;
        this.obsrvCellFactory = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeTableColumn#cellValueFactoryProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindCellValueFactory(javafx.beans.value.ObservableValue<? extends javafx.util.Callback<javafx.scene.control.TreeTableColumn.CellDataFeatures<S, T>, javafx.beans.value.ObservableValue<T>>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundCellValueFactory = true;
        this.obsrvCellValueFactory = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeTableColumn#onEditCancelProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnEditCancel(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.control.TreeTableColumn.CellEditEvent<S, T>>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnEditCancel = true;
        this.obsrvOnEditCancel = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeTableColumn#onEditCommitProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnEditCommit(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.control.TreeTableColumn.CellEditEvent<S, T>>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnEditCommit = true;
        this.obsrvOnEditCommit = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeTableColumn#onEditStartProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnEditStart(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.control.TreeTableColumn.CellEditEvent<S, T>>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOnEditStart = true;
        this.obsrvOnEditStart = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TreeTableColumn#sortTypeProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindSortType(javafx.beans.value.ObservableValue<? extends javafx.scene.control.TreeTableColumn.SortType> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundSortType = true;
        this.obsrvSortType = source;
        return (B) this;
    }

    /**
     * 建構{@link TreeTableColumn}物件
     *
     * @return 新的{@link TreeTableColumn}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public TreeTableColumn<S, T> build()
    {
        TreeTableColumn<S, T> instance = new TreeTableColumn<S, T>();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
