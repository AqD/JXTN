// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link Tab}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class TabBuilder<Z extends Tab, B extends TabBuilder<Z, B>>
        extends jxtn.jfx.builders.AbstractBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasClosable;
    protected boolean valClosable;

    protected boolean hasContent;
    protected javafx.scene.Node valContent;

    protected boolean hasContextMenu;
    protected javafx.scene.control.ContextMenu valContextMenu;

    protected boolean hasDisable;
    protected boolean valDisable;

    protected boolean hasGraphic;
    protected javafx.scene.Node valGraphic;

    protected boolean hasId;
    protected java.lang.String valId;

    protected boolean hasOnCloseRequest;
    protected javafx.event.EventHandler<javafx.event.Event> valOnCloseRequest;

    protected boolean hasOnClosed;
    protected javafx.event.EventHandler<javafx.event.Event> valOnClosed;

    protected boolean hasOnSelectionChanged;
    protected javafx.event.EventHandler<javafx.event.Event> valOnSelectionChanged;

    protected boolean hasStyle;
    protected java.lang.String valStyle;

    protected boolean hasStyleClass;
    protected java.util.Collection<java.lang.String> valStyleClass;

    protected boolean hasText;
    protected java.lang.String valText;

    protected boolean hasTooltip;
    protected javafx.scene.control.Tooltip valTooltip;

    protected boolean hasUserData;
    protected java.lang.Object valUserData;

    protected boolean boundClosable;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvClosable;

    protected boolean boundContent;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrvContent;

    protected boolean boundContextMenu;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.control.ContextMenu> obsrvContextMenu;

    protected boolean boundDisable;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvDisable;

    protected boolean boundGraphic;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrvGraphic;

    protected boolean boundId;
    protected javafx.beans.value.ObservableValue<? extends String> obsrvId;

    protected boolean boundOnCloseRequest;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.event.Event>> obsrvOnCloseRequest;

    protected boolean boundOnClosed;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.event.Event>> obsrvOnClosed;

    protected boolean boundOnSelectionChanged;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.event.Event>> obsrvOnSelectionChanged;

    protected boolean boundStyle;
    protected javafx.beans.value.ObservableValue<? extends String> obsrvStyle;

    protected boolean boundText;
    protected javafx.beans.value.ObservableValue<? extends String> obsrvText;

    protected boolean boundTooltip;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.control.Tooltip> obsrvTooltip;
    public void applyTo(Tab instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasClosable)
            instance.setClosable(this.valClosable);
        if (this.hasContent)
            instance.setContent(this.valContent);
        if (this.hasContextMenu)
            instance.setContextMenu(this.valContextMenu);
        if (this.hasDisable)
            instance.setDisable(this.valDisable);
        if (this.hasGraphic)
            instance.setGraphic(this.valGraphic);
        if (this.hasId)
            instance.setId(this.valId);
        if (this.hasOnCloseRequest)
            instance.setOnCloseRequest(this.valOnCloseRequest);
        if (this.hasOnClosed)
            instance.setOnClosed(this.valOnClosed);
        if (this.hasOnSelectionChanged)
            instance.setOnSelectionChanged(this.valOnSelectionChanged);
        if (this.hasStyle)
            instance.setStyle(this.valStyle);
        if (this.hasStyleClass)
            instance.getStyleClass().setAll(this.valStyleClass);
        if (this.hasText)
            instance.setText(this.valText);
        if (this.hasTooltip)
            instance.setTooltip(this.valTooltip);
        if (this.hasUserData)
            instance.setUserData(this.valUserData);
        if (this.boundClosable)
            instance.closableProperty().bind(this.obsrvClosable);
        if (this.boundContent)
            instance.contentProperty().bind(this.obsrvContent);
        if (this.boundContextMenu)
            instance.contextMenuProperty().bind(this.obsrvContextMenu);
        if (this.boundDisable)
            instance.disableProperty().bind(this.obsrvDisable);
        if (this.boundGraphic)
            instance.graphicProperty().bind(this.obsrvGraphic);
        if (this.boundId)
            instance.idProperty().bind(this.obsrvId);
        if (this.boundOnCloseRequest)
            instance.onCloseRequestProperty().bind(this.obsrvOnCloseRequest);
        if (this.boundOnClosed)
            instance.onClosedProperty().bind(this.obsrvOnClosed);
        if (this.boundOnSelectionChanged)
            instance.onSelectionChangedProperty().bind(this.obsrvOnSelectionChanged);
        if (this.boundStyle)
            instance.styleProperty().bind(this.obsrvStyle);
        if (this.boundText)
            instance.textProperty().bind(this.obsrvText);
        if (this.boundTooltip)
            instance.tooltipProperty().bind(this.obsrvTooltip);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B closable(boolean value)
    {
        this.hasClosable = true;
        this.valClosable = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B content(javafx.scene.Node value)
    {
        this.hasContent = true;
        this.valContent = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B contextMenu(javafx.scene.control.ContextMenu value)
    {
        this.hasContextMenu = true;
        this.valContextMenu = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B disable(boolean value)
    {
        this.hasDisable = true;
        this.valDisable = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B graphic(javafx.scene.Node value)
    {
        this.hasGraphic = true;
        this.valGraphic = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B id(java.lang.String value)
    {
        this.hasId = true;
        this.valId = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B onCloseRequest(javafx.event.EventHandler<javafx.event.Event> value)
    {
        this.hasOnCloseRequest = true;
        this.valOnCloseRequest = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B onClosed(javafx.event.EventHandler<javafx.event.Event> value)
    {
        this.hasOnClosed = true;
        this.valOnClosed = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B onSelectionChanged(javafx.event.EventHandler<javafx.event.Event> value)
    {
        this.hasOnSelectionChanged = true;
        this.valOnSelectionChanged = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B style(java.lang.String value)
    {
        this.hasStyle = true;
        this.valStyle = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B styleClass(java.util.Collection<java.lang.String> value)
    {
        this.hasStyleClass = true;
        this.valStyleClass = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B styleClass(java.lang.String... value)
    {
        this.hasStyleClass = true;
        this.valStyleClass = java.util.Arrays.asList(value);
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B text(java.lang.String value)
    {
        this.hasText = true;
        this.valText = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B tooltip(javafx.scene.control.Tooltip value)
    {
        this.hasTooltip = true;
        this.valTooltip = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B userData(java.lang.Object value)
    {
        this.hasUserData = true;
        this.valUserData = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindClosable(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundClosable = true;
        this.obsrvClosable = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindContent(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        assert (source != null);
        this.boundContent = true;
        this.obsrvContent = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindContextMenu(javafx.beans.value.ObservableValue<? extends javafx.scene.control.ContextMenu> source)
    {
        assert (source != null);
        this.boundContextMenu = true;
        this.obsrvContextMenu = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindDisable(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundDisable = true;
        this.obsrvDisable = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindGraphic(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        assert (source != null);
        this.boundGraphic = true;
        this.obsrvGraphic = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindId(javafx.beans.value.ObservableValue<? extends String> source)
    {
        assert (source != null);
        this.boundId = true;
        this.obsrvId = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindOnCloseRequest(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.event.Event>> source)
    {
        assert (source != null);
        this.boundOnCloseRequest = true;
        this.obsrvOnCloseRequest = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindOnClosed(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.event.Event>> source)
    {
        assert (source != null);
        this.boundOnClosed = true;
        this.obsrvOnClosed = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindOnSelectionChanged(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.event.Event>> source)
    {
        assert (source != null);
        this.boundOnSelectionChanged = true;
        this.obsrvOnSelectionChanged = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindStyle(javafx.beans.value.ObservableValue<? extends String> source)
    {
        assert (source != null);
        this.boundStyle = true;
        this.obsrvStyle = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindText(javafx.beans.value.ObservableValue<? extends String> source)
    {
        assert (source != null);
        this.boundText = true;
        this.obsrvText = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindTooltip(javafx.beans.value.ObservableValue<? extends javafx.scene.control.Tooltip> source)
    {
        assert (source != null);
        this.boundTooltip = true;
        this.obsrvTooltip = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Tab build()
    {
        Tab instance = new Tab();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
