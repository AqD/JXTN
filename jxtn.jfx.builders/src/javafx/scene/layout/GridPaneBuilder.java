// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.layout;

/**
 * {@link GridPane}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class GridPaneBuilder<Z extends GridPane, B extends GridPaneBuilder<Z, B>>
        extends javafx.scene.layout.PaneBuilder<Z, B>
{

    protected boolean hasAlignment;
    protected javafx.geometry.Pos valAlignment;

    protected boolean hasColumnConstraints;
    protected java.util.Collection<javafx.scene.layout.ColumnConstraints> valColumnConstraints;

    protected boolean hasGridLinesVisible;
    protected boolean valGridLinesVisible;

    protected boolean hasHgap;
    protected double valHgap;

    protected boolean hasRowConstraints;
    protected java.util.Collection<javafx.scene.layout.RowConstraints> valRowConstraints;

    protected boolean hasVgap;
    protected double valVgap;

    protected boolean boundAlignment;
    protected javafx.beans.value.ObservableValue<? extends javafx.geometry.Pos> obsrvAlignment;

    protected boolean boundGridLinesVisible;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvGridLinesVisible;

    protected boolean boundHgap;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvHgap;

    protected boolean boundVgap;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvVgap;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasAlignment)
            instance.setAlignment(this.valAlignment);
        if (this.hasColumnConstraints)
            instance.getColumnConstraints().setAll(this.valColumnConstraints);
        if (this.hasGridLinesVisible)
            instance.setGridLinesVisible(this.valGridLinesVisible);
        if (this.hasHgap)
            instance.setHgap(this.valHgap);
        if (this.hasRowConstraints)
            instance.getRowConstraints().setAll(this.valRowConstraints);
        if (this.hasVgap)
            instance.setVgap(this.valVgap);
        if (this.boundAlignment)
            instance.alignmentProperty().bind(this.obsrvAlignment);
        if (this.boundGridLinesVisible)
            instance.gridLinesVisibleProperty().bind(this.obsrvGridLinesVisible);
        if (this.boundHgap)
            instance.hgapProperty().bind(this.obsrvHgap);
        if (this.boundVgap)
            instance.vgapProperty().bind(this.obsrvVgap);
    }

    /**
     * 設定屬性{@link GridPane#setAlignment(javafx.geometry.Pos)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B alignment(javafx.geometry.Pos value)
    {
        this.hasAlignment = true;
        this.valAlignment = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link GridPane#getColumnConstraints}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B columnConstraints(java.util.Collection<javafx.scene.layout.ColumnConstraints> value)
    {
        this.hasColumnConstraints = true;
        this.valColumnConstraints = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link GridPane#getColumnConstraints}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B columnConstraints(javafx.scene.layout.ColumnConstraints... value)
    {
        this.hasColumnConstraints = true;
        this.valColumnConstraints = java.util.Arrays.asList(value);
        return (B) this;
    }

    /**
     * 設定屬性{@link GridPane#setGridLinesVisible(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B gridLinesVisible(boolean value)
    {
        this.hasGridLinesVisible = true;
        this.valGridLinesVisible = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link GridPane#setHgap(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B hgap(double value)
    {
        this.hasHgap = true;
        this.valHgap = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link GridPane#getRowConstraints}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B rowConstraints(java.util.Collection<javafx.scene.layout.RowConstraints> value)
    {
        this.hasRowConstraints = true;
        this.valRowConstraints = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link GridPane#getRowConstraints}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B rowConstraints(javafx.scene.layout.RowConstraints... value)
    {
        this.hasRowConstraints = true;
        this.valRowConstraints = java.util.Arrays.asList(value);
        return (B) this;
    }

    /**
     * 設定屬性{@link GridPane#setVgap(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B vgap(double value)
    {
        this.hasVgap = true;
        this.valVgap = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link GridPane#alignmentProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindAlignment(javafx.beans.value.ObservableValue<? extends javafx.geometry.Pos> source)
    {
        assert (source != null);
        this.boundAlignment = true;
        this.obsrvAlignment = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link GridPane#gridLinesVisibleProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindGridLinesVisible(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundGridLinesVisible = true;
        this.obsrvGridLinesVisible = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link GridPane#hgapProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindHgap(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundHgap = true;
        this.obsrvHgap = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link GridPane#vgapProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindVgap(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundVgap = true;
        this.obsrvVgap = source;
        return (B) this;
    }

    /**
     * 建構{@link GridPane}物件
     *
     * @return 新的{@link GridPane}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public GridPane build()
    {
        GridPane instance = new GridPane();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
