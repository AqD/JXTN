// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.layout;

/**
 * {@link Pane}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class PaneBuilder<Z extends Pane, B extends PaneBuilder<Z, B>>
        extends javafx.scene.layout.RegionBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasChildren;
    protected java.util.Collection<javafx.scene.Node> valChildren;
    public void applyTo(Pane instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasChildren)
            instance.getChildren().setAll(this.valChildren);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B children(java.util.Collection<javafx.scene.Node> value)
    {
        this.hasChildren = true;
        this.valChildren = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B children(javafx.scene.Node... value)
    {
        this.hasChildren = true;
        this.valChildren = java.util.Arrays.asList(value);
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Pane build()
    {
        Pane instance = new Pane();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
