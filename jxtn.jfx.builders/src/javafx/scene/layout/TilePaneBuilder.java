// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.layout;

/**
 * {@link TilePane}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link TilePane})
 * @param <B> 建構器本身的型態(需繼承{@link TilePaneBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class TilePaneBuilder<Z extends TilePane, B extends TilePaneBuilder<Z, B>>
        extends javafx.scene.layout.PaneBuilder<Z, B>
{

    private boolean hasAlignment;
    private javafx.geometry.Pos valAlignment;

    private boolean hasHgap;
    private double valHgap;

    private boolean hasOrientation;
    private javafx.geometry.Orientation valOrientation;

    private boolean hasPrefColumns;
    private int valPrefColumns;

    private boolean hasPrefRows;
    private int valPrefRows;

    private boolean hasPrefTileHeight;
    private double valPrefTileHeight;

    private boolean hasPrefTileWidth;
    private double valPrefTileWidth;

    private boolean hasTileAlignment;
    private javafx.geometry.Pos valTileAlignment;

    private boolean hasVgap;
    private double valVgap;

    private boolean boundAlignment;
    private javafx.beans.value.ObservableValue<? extends javafx.geometry.Pos> obsrvAlignment;

    private boolean boundHgap;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvHgap;

    private boolean boundOrientation;
    private javafx.beans.value.ObservableValue<? extends javafx.geometry.Orientation> obsrvOrientation;

    private boolean boundPrefColumns;
    private javafx.beans.value.ObservableValue<? extends Integer> obsrvPrefColumns;

    private boolean boundPrefRows;
    private javafx.beans.value.ObservableValue<? extends Integer> obsrvPrefRows;

    private boolean boundPrefTileHeight;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvPrefTileHeight;

    private boolean boundPrefTileWidth;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvPrefTileWidth;

    private boolean boundTileAlignment;
    private javafx.beans.value.ObservableValue<? extends javafx.geometry.Pos> obsrvTileAlignment;

    private boolean boundVgap;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvVgap;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasAlignment)
            instance.setAlignment(this.valAlignment);
        if (this.hasHgap)
            instance.setHgap(this.valHgap);
        if (this.hasOrientation)
            instance.setOrientation(this.valOrientation);
        if (this.hasPrefColumns)
            instance.setPrefColumns(this.valPrefColumns);
        if (this.hasPrefRows)
            instance.setPrefRows(this.valPrefRows);
        if (this.hasPrefTileHeight)
            instance.setPrefTileHeight(this.valPrefTileHeight);
        if (this.hasPrefTileWidth)
            instance.setPrefTileWidth(this.valPrefTileWidth);
        if (this.hasTileAlignment)
            instance.setTileAlignment(this.valTileAlignment);
        if (this.hasVgap)
            instance.setVgap(this.valVgap);
        if (this.boundAlignment)
            instance.alignmentProperty().bind(this.obsrvAlignment);
        if (this.boundHgap)
            instance.hgapProperty().bind(this.obsrvHgap);
        if (this.boundOrientation)
            instance.orientationProperty().bind(this.obsrvOrientation);
        if (this.boundPrefColumns)
            instance.prefColumnsProperty().bind(this.obsrvPrefColumns);
        if (this.boundPrefRows)
            instance.prefRowsProperty().bind(this.obsrvPrefRows);
        if (this.boundPrefTileHeight)
            instance.prefTileHeightProperty().bind(this.obsrvPrefTileHeight);
        if (this.boundPrefTileWidth)
            instance.prefTileWidthProperty().bind(this.obsrvPrefTileWidth);
        if (this.boundTileAlignment)
            instance.tileAlignmentProperty().bind(this.obsrvTileAlignment);
        if (this.boundVgap)
            instance.vgapProperty().bind(this.obsrvVgap);
    }

    /**
     * 設定屬性{@link TilePane#setAlignment(javafx.geometry.Pos)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B alignment(javafx.geometry.Pos value)
    {
        this.hasAlignment = true;
        this.valAlignment = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TilePane#setHgap(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B hgap(double value)
    {
        this.hasHgap = true;
        this.valHgap = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TilePane#setOrientation(javafx.geometry.Orientation)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B orientation(javafx.geometry.Orientation value)
    {
        this.hasOrientation = true;
        this.valOrientation = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TilePane#setPrefColumns(int)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B prefColumns(int value)
    {
        this.hasPrefColumns = true;
        this.valPrefColumns = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TilePane#setPrefRows(int)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B prefRows(int value)
    {
        this.hasPrefRows = true;
        this.valPrefRows = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TilePane#setPrefTileHeight(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B prefTileHeight(double value)
    {
        this.hasPrefTileHeight = true;
        this.valPrefTileHeight = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TilePane#setPrefTileWidth(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B prefTileWidth(double value)
    {
        this.hasPrefTileWidth = true;
        this.valPrefTileWidth = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TilePane#setTileAlignment(javafx.geometry.Pos)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B tileAlignment(javafx.geometry.Pos value)
    {
        this.hasTileAlignment = true;
        this.valTileAlignment = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TilePane#setVgap(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B vgap(double value)
    {
        this.hasVgap = true;
        this.valVgap = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link TilePane#alignmentProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindAlignment(javafx.beans.value.ObservableValue<? extends javafx.geometry.Pos> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundAlignment = true;
        this.obsrvAlignment = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TilePane#hgapProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindHgap(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundHgap = true;
        this.obsrvHgap = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TilePane#orientationProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOrientation(javafx.beans.value.ObservableValue<? extends javafx.geometry.Orientation> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundOrientation = true;
        this.obsrvOrientation = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TilePane#prefColumnsProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindPrefColumns(javafx.beans.value.ObservableValue<? extends Integer> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundPrefColumns = true;
        this.obsrvPrefColumns = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TilePane#prefRowsProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindPrefRows(javafx.beans.value.ObservableValue<? extends Integer> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundPrefRows = true;
        this.obsrvPrefRows = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TilePane#prefTileHeightProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindPrefTileHeight(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundPrefTileHeight = true;
        this.obsrvPrefTileHeight = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TilePane#prefTileWidthProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindPrefTileWidth(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundPrefTileWidth = true;
        this.obsrvPrefTileWidth = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TilePane#tileAlignmentProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindTileAlignment(javafx.beans.value.ObservableValue<? extends javafx.geometry.Pos> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundTileAlignment = true;
        this.obsrvTileAlignment = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link TilePane#vgapProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindVgap(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundVgap = true;
        this.obsrvVgap = source;
        return (B) this;
    }

    /**
     * 建構{@link TilePane}物件
     *
     * @return 新的{@link TilePane}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public TilePane build()
    {
        TilePane instance = new TilePane();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
