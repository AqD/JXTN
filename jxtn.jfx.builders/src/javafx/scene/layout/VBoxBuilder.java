// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.layout;

/**
 * {@link VBox}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class VBoxBuilder<Z extends VBox, B extends VBoxBuilder<Z, B>>
        extends javafx.scene.layout.PaneBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasAlignment;
    protected javafx.geometry.Pos valAlignment;

    protected boolean hasFillWidth;
    protected boolean valFillWidth;

    protected boolean hasSpacing;
    protected double valSpacing;

    protected boolean boundAlignment;
    protected javafx.beans.value.ObservableValue<? extends javafx.geometry.Pos> obsrvAlignment;

    protected boolean boundFillWidth;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvFillWidth;

    protected boolean boundSpacing;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvSpacing;
    public void applyTo(VBox instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasAlignment)
            instance.setAlignment(this.valAlignment);
        if (this.hasFillWidth)
            instance.setFillWidth(this.valFillWidth);
        if (this.hasSpacing)
            instance.setSpacing(this.valSpacing);
        if (this.boundAlignment)
            instance.alignmentProperty().bind(this.obsrvAlignment);
        if (this.boundFillWidth)
            instance.fillWidthProperty().bind(this.obsrvFillWidth);
        if (this.boundSpacing)
            instance.spacingProperty().bind(this.obsrvSpacing);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B alignment(javafx.geometry.Pos value)
    {
        this.hasAlignment = true;
        this.valAlignment = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B fillWidth(boolean value)
    {
        this.hasFillWidth = true;
        this.valFillWidth = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B spacing(double value)
    {
        this.hasSpacing = true;
        this.valSpacing = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindAlignment(javafx.beans.value.ObservableValue<? extends javafx.geometry.Pos> source)
    {
        assert (source != null);
        this.boundAlignment = true;
        this.obsrvAlignment = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindFillWidth(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundFillWidth = true;
        this.obsrvFillWidth = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindSpacing(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundSpacing = true;
        this.obsrvSpacing = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public VBox build()
    {
        VBox instance = new VBox();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
