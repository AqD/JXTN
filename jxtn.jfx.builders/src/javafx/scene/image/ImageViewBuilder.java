// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.image;

/**
 * {@link ImageView}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class ImageViewBuilder<Z extends ImageView, B extends ImageViewBuilder<Z, B>>
        extends javafx.scene.NodeBuilder<Z, B>
{

    protected boolean hasFitHeight;
    protected double valFitHeight;

    protected boolean hasFitWidth;
    protected double valFitWidth;

    protected boolean hasImage;
    protected javafx.scene.image.Image valImage;

    protected boolean hasPreserveRatio;
    protected boolean valPreserveRatio;

    protected boolean hasSmooth;
    protected boolean valSmooth;

    protected boolean hasViewport;
    protected javafx.geometry.Rectangle2D valViewport;

    protected boolean hasX;
    protected double valX;

    protected boolean hasY;
    protected double valY;

    protected boolean boundFitHeight;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvFitHeight;

    protected boolean boundFitWidth;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvFitWidth;

    protected boolean boundImage;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.image.Image> obsrvImage;

    protected boolean boundPreserveRatio;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvPreserveRatio;

    protected boolean boundSmooth;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvSmooth;

    protected boolean boundViewport;
    protected javafx.beans.value.ObservableValue<? extends javafx.geometry.Rectangle2D> obsrvViewport;

    protected boolean boundX;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvX;

    protected boolean boundY;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvY;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasFitHeight)
            instance.setFitHeight(this.valFitHeight);
        if (this.hasFitWidth)
            instance.setFitWidth(this.valFitWidth);
        if (this.hasImage)
            instance.setImage(this.valImage);
        if (this.hasPreserveRatio)
            instance.setPreserveRatio(this.valPreserveRatio);
        if (this.hasSmooth)
            instance.setSmooth(this.valSmooth);
        if (this.hasViewport)
            instance.setViewport(this.valViewport);
        if (this.hasX)
            instance.setX(this.valX);
        if (this.hasY)
            instance.setY(this.valY);
        if (this.boundFitHeight)
            instance.fitHeightProperty().bind(this.obsrvFitHeight);
        if (this.boundFitWidth)
            instance.fitWidthProperty().bind(this.obsrvFitWidth);
        if (this.boundImage)
            instance.imageProperty().bind(this.obsrvImage);
        if (this.boundPreserveRatio)
            instance.preserveRatioProperty().bind(this.obsrvPreserveRatio);
        if (this.boundSmooth)
            instance.smoothProperty().bind(this.obsrvSmooth);
        if (this.boundViewport)
            instance.viewportProperty().bind(this.obsrvViewport);
        if (this.boundX)
            instance.xProperty().bind(this.obsrvX);
        if (this.boundY)
            instance.yProperty().bind(this.obsrvY);
    }

    /**
     * 設定屬性{@link ImageView#setFitHeight(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B fitHeight(double value)
    {
        this.hasFitHeight = true;
        this.valFitHeight = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ImageView#setFitWidth(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B fitWidth(double value)
    {
        this.hasFitWidth = true;
        this.valFitWidth = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ImageView#setImage(javafx.scene.image.Image)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B image(javafx.scene.image.Image value)
    {
        this.hasImage = true;
        this.valImage = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ImageView#setPreserveRatio(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B preserveRatio(boolean value)
    {
        this.hasPreserveRatio = true;
        this.valPreserveRatio = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ImageView#setSmooth(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B smooth(boolean value)
    {
        this.hasSmooth = true;
        this.valSmooth = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ImageView#setViewport(javafx.geometry.Rectangle2D)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B viewport(javafx.geometry.Rectangle2D value)
    {
        this.hasViewport = true;
        this.valViewport = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ImageView#setX(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B x(double value)
    {
        this.hasX = true;
        this.valX = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ImageView#setY(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B y(double value)
    {
        this.hasY = true;
        this.valY = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ImageView#fitHeightProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindFitHeight(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundFitHeight = true;
        this.obsrvFitHeight = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ImageView#fitWidthProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindFitWidth(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundFitWidth = true;
        this.obsrvFitWidth = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ImageView#imageProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindImage(javafx.beans.value.ObservableValue<? extends javafx.scene.image.Image> source)
    {
        assert (source != null);
        this.boundImage = true;
        this.obsrvImage = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ImageView#preserveRatioProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindPreserveRatio(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundPreserveRatio = true;
        this.obsrvPreserveRatio = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ImageView#smoothProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindSmooth(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundSmooth = true;
        this.obsrvSmooth = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ImageView#viewportProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindViewport(javafx.beans.value.ObservableValue<? extends javafx.geometry.Rectangle2D> source)
    {
        assert (source != null);
        this.boundViewport = true;
        this.obsrvViewport = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ImageView#xProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindX(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundX = true;
        this.obsrvX = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ImageView#yProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindY(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundY = true;
        this.obsrvY = source;
        return (B) this;
    }

    /**
     * 建構{@link ImageView}物件
     *
     * @return 新的{@link ImageView}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public ImageView build()
    {
        ImageView instance = new ImageView();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
