// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.shape;

/**
 * {@link HLineTo}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class HLineToBuilder<Z extends HLineTo, B extends HLineToBuilder<Z, B>>
        extends javafx.scene.shape.PathElementBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasX;
    protected double valX;

    protected boolean boundX;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvX;
    public void applyTo(HLineTo instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasX)
            instance.setX(this.valX);
        if (this.boundX)
            instance.xProperty().bind(this.obsrvX);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B x(double value)
    {
        this.hasX = true;
        this.valX = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindX(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundX = true;
        this.obsrvX = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public HLineTo build()
    {
        HLineTo instance = new HLineTo();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
