// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.shape;

/**
 * {@link PathElement}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class PathElementBuilder<Z extends PathElement, B extends PathElementBuilder<Z, B>>
        extends jxtn.jfx.builders.AbstractBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasAbsolute;
    protected boolean valAbsolute;

    protected boolean boundAbsolute;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvAbsolute;
    public void applyTo(PathElement instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasAbsolute)
            instance.setAbsolute(this.valAbsolute);
        if (this.boundAbsolute)
            instance.absoluteProperty().bind(this.obsrvAbsolute);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B absolute(boolean value)
    {
        this.hasAbsolute = true;
        this.valAbsolute = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindAbsolute(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundAbsolute = true;
        this.obsrvAbsolute = source;
        return (B) this;
    }
}
