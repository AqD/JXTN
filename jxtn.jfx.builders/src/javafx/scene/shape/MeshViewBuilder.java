// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.shape;

/**
 * {@link MeshView}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link MeshView})
 * @param <B> 建構器本身的型態(需繼承{@link MeshViewBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class MeshViewBuilder<Z extends MeshView, B extends MeshViewBuilder<Z, B>>
        extends javafx.scene.shape.Shape3DBuilder<Z, B>
        implements MeshViewBuilderExt<Z, B>
{

    private boolean hasMesh;
    private javafx.scene.shape.Mesh valMesh;

    private boolean bound1Mesh;
    private boolean bound2Mesh;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.shape.Mesh> obsrv1Mesh;
    private javafx.beans.property.Property<javafx.scene.shape.Mesh> obsrv2Mesh;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasMesh)
            instance.setMesh(this.valMesh);
        if (this.bound1Mesh)
            instance.meshProperty().bind(this.obsrv1Mesh);
        if (this.bound2Mesh)
            instance.meshProperty().bindBidirectional(this.obsrv2Mesh);
    }

    /**
     * 設定屬性{@link MeshView#setMesh(javafx.scene.shape.Mesh)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B mesh(javafx.scene.shape.Mesh value)
    {
        this.hasMesh = true;
        this.valMesh = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MeshView#meshProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMesh(javafx.beans.value.ObservableValue<? extends javafx.scene.shape.Mesh> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Mesh = true;
        this.obsrv1Mesh = source;
        this.bound2Mesh = false;
        this.obsrv2Mesh = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MeshView#meshProperty}的雙向連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalMesh(javafx.beans.property.Property<javafx.scene.shape.Mesh> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Mesh = false;
        this.obsrv1Mesh = null;
        this.bound2Mesh = true;
        this.obsrv2Mesh = source;
        return (B) this;
    }

    /**
     * 建構{@link MeshView}物件
     *
     * @return 新的{@link MeshView}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public MeshView build()
    {
        MeshView instance = new MeshView();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link MeshView}物件
     *
     * @return 新的{@link MeshView}物件實體
     */
    @SuppressWarnings("unchecked")
    public MeshView build(javafx.scene.shape.Mesh arg0)
    {
        MeshView instance = new MeshView(arg0);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
