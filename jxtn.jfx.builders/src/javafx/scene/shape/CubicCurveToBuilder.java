// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.shape;

/**
 * {@link CubicCurveTo}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class CubicCurveToBuilder<Z extends CubicCurveTo, B extends CubicCurveToBuilder<Z, B>>
        extends javafx.scene.shape.PathElementBuilder<Z, B>
{

    protected boolean hasControlX1;
    protected double valControlX1;

    protected boolean hasControlX2;
    protected double valControlX2;

    protected boolean hasControlY1;
    protected double valControlY1;

    protected boolean hasControlY2;
    protected double valControlY2;

    protected boolean hasX;
    protected double valX;

    protected boolean hasY;
    protected double valY;

    protected boolean boundControlX1;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvControlX1;

    protected boolean boundControlX2;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvControlX2;

    protected boolean boundControlY1;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvControlY1;

    protected boolean boundControlY2;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvControlY2;

    protected boolean boundX;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvX;

    protected boolean boundY;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvY;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasControlX1)
            instance.setControlX1(this.valControlX1);
        if (this.hasControlX2)
            instance.setControlX2(this.valControlX2);
        if (this.hasControlY1)
            instance.setControlY1(this.valControlY1);
        if (this.hasControlY2)
            instance.setControlY2(this.valControlY2);
        if (this.hasX)
            instance.setX(this.valX);
        if (this.hasY)
            instance.setY(this.valY);
        if (this.boundControlX1)
            instance.controlX1Property().bind(this.obsrvControlX1);
        if (this.boundControlX2)
            instance.controlX2Property().bind(this.obsrvControlX2);
        if (this.boundControlY1)
            instance.controlY1Property().bind(this.obsrvControlY1);
        if (this.boundControlY2)
            instance.controlY2Property().bind(this.obsrvControlY2);
        if (this.boundX)
            instance.xProperty().bind(this.obsrvX);
        if (this.boundY)
            instance.yProperty().bind(this.obsrvY);
    }

    /**
     * 設定屬性{@link CubicCurveTo#setControlX1}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B controlX1(double value)
    {
        this.hasControlX1 = true;
        this.valControlX1 = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link CubicCurveTo#setControlX2}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B controlX2(double value)
    {
        this.hasControlX2 = true;
        this.valControlX2 = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link CubicCurveTo#setControlY1}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B controlY1(double value)
    {
        this.hasControlY1 = true;
        this.valControlY1 = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link CubicCurveTo#setControlY2}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B controlY2(double value)
    {
        this.hasControlY2 = true;
        this.valControlY2 = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link CubicCurveTo#setX}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B x(double value)
    {
        this.hasX = true;
        this.valX = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link CubicCurveTo#setY}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B y(double value)
    {
        this.hasY = true;
        this.valY = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link CubicCurveTo#controlX1Property}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindControlX1(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundControlX1 = true;
        this.obsrvControlX1 = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link CubicCurveTo#controlX2Property}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindControlX2(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundControlX2 = true;
        this.obsrvControlX2 = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link CubicCurveTo#controlY1Property}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindControlY1(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundControlY1 = true;
        this.obsrvControlY1 = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link CubicCurveTo#controlY2Property}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindControlY2(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundControlY2 = true;
        this.obsrvControlY2 = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link CubicCurveTo#xProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindX(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundX = true;
        this.obsrvX = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link CubicCurveTo#yProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindY(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundY = true;
        this.obsrvY = source;
        return (B) this;
    }

    /**
     * 建構{@link CubicCurveTo}物件
     *
     * @return 新的{@link CubicCurveTo}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public CubicCurveTo build()
    {
        CubicCurveTo instance = new CubicCurveTo();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
