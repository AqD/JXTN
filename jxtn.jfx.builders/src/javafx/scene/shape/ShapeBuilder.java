// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.shape;

/**
 * {@link Shape}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link Shape})
 * @param <B> 建構器本身的型態(需繼承{@link ShapeBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class ShapeBuilder<Z extends Shape, B extends ShapeBuilder<Z, B>>
        extends javafx.scene.NodeBuilder<Z, B>
{

    private boolean hasFill;
    private javafx.scene.paint.Paint valFill;

    private boolean hasSmooth;
    private boolean valSmooth;

    private boolean hasStroke;
    private javafx.scene.paint.Paint valStroke;

    private boolean hasStrokeDashArray;
    private java.util.Collection<java.lang.Double> valStrokeDashArray;

    private boolean hasStrokeDashOffset;
    private double valStrokeDashOffset;

    private boolean hasStrokeLineCap;
    private javafx.scene.shape.StrokeLineCap valStrokeLineCap;

    private boolean hasStrokeLineJoin;
    private javafx.scene.shape.StrokeLineJoin valStrokeLineJoin;

    private boolean hasStrokeMiterLimit;
    private double valStrokeMiterLimit;

    private boolean hasStrokeType;
    private javafx.scene.shape.StrokeType valStrokeType;

    private boolean hasStrokeWidth;
    private double valStrokeWidth;

    private boolean boundFill;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.paint.Paint> obsrvFill;

    private boolean boundSmooth;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrvSmooth;

    private boolean boundStrokeDashOffset;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvStrokeDashOffset;

    private boolean boundStrokeLineCap;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.shape.StrokeLineCap> obsrvStrokeLineCap;

    private boolean boundStrokeLineJoin;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.shape.StrokeLineJoin> obsrvStrokeLineJoin;

    private boolean boundStrokeMiterLimit;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvStrokeMiterLimit;

    private boolean boundStroke;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.paint.Paint> obsrvStroke;

    private boolean boundStrokeType;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.shape.StrokeType> obsrvStrokeType;

    private boolean boundStrokeWidth;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvStrokeWidth;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasFill)
            instance.setFill(this.valFill);
        if (this.hasSmooth)
            instance.setSmooth(this.valSmooth);
        if (this.hasStroke)
            instance.setStroke(this.valStroke);
        if (this.hasStrokeDashArray)
            instance.getStrokeDashArray().setAll(this.valStrokeDashArray);
        if (this.hasStrokeDashOffset)
            instance.setStrokeDashOffset(this.valStrokeDashOffset);
        if (this.hasStrokeLineCap)
            instance.setStrokeLineCap(this.valStrokeLineCap);
        if (this.hasStrokeLineJoin)
            instance.setStrokeLineJoin(this.valStrokeLineJoin);
        if (this.hasStrokeMiterLimit)
            instance.setStrokeMiterLimit(this.valStrokeMiterLimit);
        if (this.hasStrokeType)
            instance.setStrokeType(this.valStrokeType);
        if (this.hasStrokeWidth)
            instance.setStrokeWidth(this.valStrokeWidth);
        if (this.boundFill)
            instance.fillProperty().bind(this.obsrvFill);
        if (this.boundSmooth)
            instance.smoothProperty().bind(this.obsrvSmooth);
        if (this.boundStrokeDashOffset)
            instance.strokeDashOffsetProperty().bind(this.obsrvStrokeDashOffset);
        if (this.boundStrokeLineCap)
            instance.strokeLineCapProperty().bind(this.obsrvStrokeLineCap);
        if (this.boundStrokeLineJoin)
            instance.strokeLineJoinProperty().bind(this.obsrvStrokeLineJoin);
        if (this.boundStrokeMiterLimit)
            instance.strokeMiterLimitProperty().bind(this.obsrvStrokeMiterLimit);
        if (this.boundStroke)
            instance.strokeProperty().bind(this.obsrvStroke);
        if (this.boundStrokeType)
            instance.strokeTypeProperty().bind(this.obsrvStrokeType);
        if (this.boundStrokeWidth)
            instance.strokeWidthProperty().bind(this.obsrvStrokeWidth);
    }

    /**
     * 設定屬性{@link Shape#setFill(javafx.scene.paint.Paint)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B fill(javafx.scene.paint.Paint value)
    {
        this.hasFill = true;
        this.valFill = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Shape#setSmooth(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B smooth(boolean value)
    {
        this.hasSmooth = true;
        this.valSmooth = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Shape#setStroke(javafx.scene.paint.Paint)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B stroke(javafx.scene.paint.Paint value)
    {
        this.hasStroke = true;
        this.valStroke = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link Shape#getStrokeDashArray}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B strokeDashArray(java.util.Collection<java.lang.Double> value)
    {
        this.hasStrokeDashArray = true;
        this.valStrokeDashArray = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link Shape#getStrokeDashArray}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B strokeDashArray(java.lang.Double... value)
    {
        this.hasStrokeDashArray = true;
        this.valStrokeDashArray = java.util.Arrays.asList(value);
        return (B) this;
    }

    /**
     * 設定屬性{@link Shape#setStrokeDashOffset(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B strokeDashOffset(double value)
    {
        this.hasStrokeDashOffset = true;
        this.valStrokeDashOffset = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Shape#setStrokeLineCap(javafx.scene.shape.StrokeLineCap)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B strokeLineCap(javafx.scene.shape.StrokeLineCap value)
    {
        this.hasStrokeLineCap = true;
        this.valStrokeLineCap = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Shape#setStrokeLineJoin(javafx.scene.shape.StrokeLineJoin)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B strokeLineJoin(javafx.scene.shape.StrokeLineJoin value)
    {
        this.hasStrokeLineJoin = true;
        this.valStrokeLineJoin = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Shape#setStrokeMiterLimit(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B strokeMiterLimit(double value)
    {
        this.hasStrokeMiterLimit = true;
        this.valStrokeMiterLimit = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Shape#setStrokeType(javafx.scene.shape.StrokeType)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B strokeType(javafx.scene.shape.StrokeType value)
    {
        this.hasStrokeType = true;
        this.valStrokeType = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Shape#setStrokeWidth(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B strokeWidth(double value)
    {
        this.hasStrokeWidth = true;
        this.valStrokeWidth = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Shape#fillProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindFill(javafx.beans.value.ObservableValue<? extends javafx.scene.paint.Paint> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundFill = true;
        this.obsrvFill = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Shape#smoothProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindSmooth(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundSmooth = true;
        this.obsrvSmooth = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Shape#strokeDashOffsetProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindStrokeDashOffset(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundStrokeDashOffset = true;
        this.obsrvStrokeDashOffset = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Shape#strokeLineCapProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindStrokeLineCap(javafx.beans.value.ObservableValue<? extends javafx.scene.shape.StrokeLineCap> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundStrokeLineCap = true;
        this.obsrvStrokeLineCap = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Shape#strokeLineJoinProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindStrokeLineJoin(javafx.beans.value.ObservableValue<? extends javafx.scene.shape.StrokeLineJoin> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundStrokeLineJoin = true;
        this.obsrvStrokeLineJoin = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Shape#strokeMiterLimitProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindStrokeMiterLimit(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundStrokeMiterLimit = true;
        this.obsrvStrokeMiterLimit = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Shape#strokeProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindStroke(javafx.beans.value.ObservableValue<? extends javafx.scene.paint.Paint> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundStroke = true;
        this.obsrvStroke = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Shape#strokeTypeProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindStrokeType(javafx.beans.value.ObservableValue<? extends javafx.scene.shape.StrokeType> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundStrokeType = true;
        this.obsrvStrokeType = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Shape#strokeWidthProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindStrokeWidth(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundStrokeWidth = true;
        this.obsrvStrokeWidth = source;
        return (B) this;
    }
}
