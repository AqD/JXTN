// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.shape;

/**
 * {@link Arc}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class ArcBuilder<Z extends Arc, B extends ArcBuilder<Z, B>>
        extends javafx.scene.shape.ShapeBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasCenterX;
    protected double valCenterX;

    protected boolean hasCenterY;
    protected double valCenterY;

    protected boolean hasLength;
    protected double valLength;

    protected boolean hasRadiusX;
    protected double valRadiusX;

    protected boolean hasRadiusY;
    protected double valRadiusY;

    protected boolean hasStartAngle;
    protected double valStartAngle;

    protected boolean hasType;
    protected javafx.scene.shape.ArcType valType;

    protected boolean boundCenterX;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvCenterX;

    protected boolean boundCenterY;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvCenterY;

    protected boolean boundLength;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvLength;

    protected boolean boundRadiusX;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvRadiusX;

    protected boolean boundRadiusY;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvRadiusY;

    protected boolean boundStartAngle;
    protected javafx.beans.value.ObservableValue<? extends Double> obsrvStartAngle;

    protected boolean boundType;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.shape.ArcType> obsrvType;
    public void applyTo(Arc instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasCenterX)
            instance.setCenterX(this.valCenterX);
        if (this.hasCenterY)
            instance.setCenterY(this.valCenterY);
        if (this.hasLength)
            instance.setLength(this.valLength);
        if (this.hasRadiusX)
            instance.setRadiusX(this.valRadiusX);
        if (this.hasRadiusY)
            instance.setRadiusY(this.valRadiusY);
        if (this.hasStartAngle)
            instance.setStartAngle(this.valStartAngle);
        if (this.hasType)
            instance.setType(this.valType);
        if (this.boundCenterX)
            instance.centerXProperty().bind(this.obsrvCenterX);
        if (this.boundCenterY)
            instance.centerYProperty().bind(this.obsrvCenterY);
        if (this.boundLength)
            instance.lengthProperty().bind(this.obsrvLength);
        if (this.boundRadiusX)
            instance.radiusXProperty().bind(this.obsrvRadiusX);
        if (this.boundRadiusY)
            instance.radiusYProperty().bind(this.obsrvRadiusY);
        if (this.boundStartAngle)
            instance.startAngleProperty().bind(this.obsrvStartAngle);
        if (this.boundType)
            instance.typeProperty().bind(this.obsrvType);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B centerX(double value)
    {
        this.hasCenterX = true;
        this.valCenterX = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B centerY(double value)
    {
        this.hasCenterY = true;
        this.valCenterY = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B length(double value)
    {
        this.hasLength = true;
        this.valLength = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B radiusX(double value)
    {
        this.hasRadiusX = true;
        this.valRadiusX = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B radiusY(double value)
    {
        this.hasRadiusY = true;
        this.valRadiusY = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B startAngle(double value)
    {
        this.hasStartAngle = true;
        this.valStartAngle = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B type(javafx.scene.shape.ArcType value)
    {
        this.hasType = true;
        this.valType = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindCenterX(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundCenterX = true;
        this.obsrvCenterX = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindCenterY(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundCenterY = true;
        this.obsrvCenterY = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindLength(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundLength = true;
        this.obsrvLength = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindRadiusX(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundRadiusX = true;
        this.obsrvRadiusX = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindRadiusY(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundRadiusY = true;
        this.obsrvRadiusY = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindStartAngle(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        assert (source != null);
        this.boundStartAngle = true;
        this.obsrvStartAngle = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindType(javafx.beans.value.ObservableValue<? extends javafx.scene.shape.ArcType> source)
    {
        assert (source != null);
        this.boundType = true;
        this.obsrvType = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Arc build()
    {
        Arc instance = new Arc();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
