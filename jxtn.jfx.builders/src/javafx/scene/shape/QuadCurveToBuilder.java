// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.shape;

/**
 * {@link QuadCurveTo}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link QuadCurveTo})
 * @param <B> 建構器本身的型態(需繼承{@link QuadCurveToBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class QuadCurveToBuilder<Z extends QuadCurveTo, B extends QuadCurveToBuilder<Z, B>>
        extends javafx.scene.shape.PathElementBuilder<Z, B>
{

    private boolean hasControlX;
    private double valControlX;

    private boolean hasControlY;
    private double valControlY;

    private boolean hasX;
    private double valX;

    private boolean hasY;
    private double valY;

    private boolean boundControlX;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvControlX;

    private boolean boundControlY;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvControlY;

    private boolean boundX;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvX;

    private boolean boundY;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvY;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasControlX)
            instance.setControlX(this.valControlX);
        if (this.hasControlY)
            instance.setControlY(this.valControlY);
        if (this.hasX)
            instance.setX(this.valX);
        if (this.hasY)
            instance.setY(this.valY);
        if (this.boundControlX)
            instance.controlXProperty().bind(this.obsrvControlX);
        if (this.boundControlY)
            instance.controlYProperty().bind(this.obsrvControlY);
        if (this.boundX)
            instance.xProperty().bind(this.obsrvX);
        if (this.boundY)
            instance.yProperty().bind(this.obsrvY);
    }

    /**
     * 設定屬性{@link QuadCurveTo#setControlX(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B controlX(double value)
    {
        this.hasControlX = true;
        this.valControlX = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link QuadCurveTo#setControlY(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B controlY(double value)
    {
        this.hasControlY = true;
        this.valControlY = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link QuadCurveTo#setX(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B x(double value)
    {
        this.hasX = true;
        this.valX = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link QuadCurveTo#setY(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B y(double value)
    {
        this.hasY = true;
        this.valY = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link QuadCurveTo#controlXProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindControlX(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundControlX = true;
        this.obsrvControlX = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link QuadCurveTo#controlYProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindControlY(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundControlY = true;
        this.obsrvControlY = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link QuadCurveTo#xProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindX(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundX = true;
        this.obsrvX = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link QuadCurveTo#yProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindY(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundY = true;
        this.obsrvY = source;
        return (B) this;
    }

    /**
     * 建構{@link QuadCurveTo}物件
     *
     * @return 新的{@link QuadCurveTo}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public QuadCurveTo build()
    {
        QuadCurveTo instance = new QuadCurveTo();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
