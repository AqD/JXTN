// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.shape;

/**
 * {@link Polygon}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class PolygonBuilder<Z extends Polygon, B extends PolygonBuilder<Z, B>>
        extends javafx.scene.shape.ShapeBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasPoints;
    protected java.util.Collection<java.lang.Double> valPoints;
    public void applyTo(Polygon instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasPoints)
            instance.getPoints().setAll(this.valPoints);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B points(java.util.Collection<java.lang.Double> value)
    {
        this.hasPoints = true;
        this.valPoints = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B points(java.lang.Double... value)
    {
        this.hasPoints = true;
        this.valPoints = java.util.Arrays.asList(value);
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Polygon build()
    {
        Polygon instance = new Polygon();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
