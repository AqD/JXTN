// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.shape;

/**
 * {@link Path}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class PathBuilder<Z extends Path, B extends PathBuilder<Z, B>>
        extends javafx.scene.shape.ShapeBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasElements;
    protected java.util.Collection<javafx.scene.shape.PathElement> valElements;

    protected boolean hasFillRule;
    protected javafx.scene.shape.FillRule valFillRule;

    protected boolean boundFillRule;
    protected javafx.beans.value.ObservableValue<? extends javafx.scene.shape.FillRule> obsrvFillRule;
    public void applyTo(Path instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasElements)
            instance.getElements().setAll(this.valElements);
        if (this.hasFillRule)
            instance.setFillRule(this.valFillRule);
        if (this.boundFillRule)
            instance.fillRuleProperty().bind(this.obsrvFillRule);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B elements(java.util.Collection<javafx.scene.shape.PathElement> value)
    {
        this.hasElements = true;
        this.valElements = value;
        return (B) this;
    }

    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B elements(javafx.scene.shape.PathElement... value)
    {
        this.hasElements = true;
        this.valElements = java.util.Arrays.asList(value);
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B fillRule(javafx.scene.shape.FillRule value)
    {
        this.hasFillRule = true;
        this.valFillRule = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindFillRule(javafx.beans.value.ObservableValue<? extends javafx.scene.shape.FillRule> source)
    {
        assert (source != null);
        this.boundFillRule = true;
        this.obsrvFillRule = source;
        return (B) this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Path build()
    {
        Path instance = new Path();
        this.applyTo(instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
