// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.stage;

/**
 * {@link Stage}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link Stage})
 * @param <B> 建構器本身的型態(需繼承{@link StageBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class StageBuilder<Z extends Stage, B extends StageBuilder<Z, B>>
        extends javafx.stage.WindowBuilder<Z, B>
{

    private boolean hasAlwaysOnTop;
    private boolean valAlwaysOnTop;

    private boolean hasFullScreen;
    private boolean valFullScreen;

    private boolean hasFullScreenExitHint;
    private java.lang.String valFullScreenExitHint;

    private boolean hasFullScreenExitKeyCombination;
    private javafx.scene.input.KeyCombination valFullScreenExitKeyCombination;

    private boolean hasIconified;
    private boolean valIconified;

    private boolean hasIcons;
    private java.util.Collection<javafx.scene.image.Image> valIcons;

    private boolean hasMaxHeight;
    private double valMaxHeight;

    private boolean hasMaxWidth;
    private double valMaxWidth;

    private boolean hasMaximized;
    private boolean valMaximized;

    private boolean hasMinHeight;
    private double valMinHeight;

    private boolean hasMinWidth;
    private double valMinWidth;

    private boolean hasResizable;
    private boolean valResizable;

    private boolean hasScene;
    private javafx.scene.Scene valScene;

    private boolean hasTitle;
    private java.lang.String valTitle;

    private boolean boundFullScreenExitHint;
    private javafx.beans.value.ObservableValue<? extends java.lang.String> obsrvFullScreenExitHint;

    private boolean boundFullScreenExitKey;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.input.KeyCombination> obsrvFullScreenExitKey;

    private boolean boundMaxHeight;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvMaxHeight;

    private boolean boundMaxWidth;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvMaxWidth;

    private boolean boundMinHeight;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvMinHeight;

    private boolean boundMinWidth;
    private javafx.beans.value.ObservableValue<? extends Double> obsrvMinWidth;

    private boolean boundResizable;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrvResizable;

    private boolean boundTitle;
    private javafx.beans.value.ObservableValue<? extends String> obsrvTitle;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasAlwaysOnTop)
            instance.setAlwaysOnTop(this.valAlwaysOnTop);
        if (this.hasFullScreen)
            instance.setFullScreen(this.valFullScreen);
        if (this.hasFullScreenExitHint)
            instance.setFullScreenExitHint(this.valFullScreenExitHint);
        if (this.hasFullScreenExitKeyCombination)
            instance.setFullScreenExitKeyCombination(this.valFullScreenExitKeyCombination);
        if (this.hasIconified)
            instance.setIconified(this.valIconified);
        if (this.hasIcons)
            instance.getIcons().setAll(this.valIcons);
        if (this.hasMaxHeight)
            instance.setMaxHeight(this.valMaxHeight);
        if (this.hasMaxWidth)
            instance.setMaxWidth(this.valMaxWidth);
        if (this.hasMaximized)
            instance.setMaximized(this.valMaximized);
        if (this.hasMinHeight)
            instance.setMinHeight(this.valMinHeight);
        if (this.hasMinWidth)
            instance.setMinWidth(this.valMinWidth);
        if (this.hasResizable)
            instance.setResizable(this.valResizable);
        if (this.hasScene)
            instance.setScene(this.valScene);
        if (this.hasTitle)
            instance.setTitle(this.valTitle);
        if (this.boundFullScreenExitHint)
            instance.fullScreenExitHintProperty().bind(this.obsrvFullScreenExitHint);
        if (this.boundFullScreenExitKey)
            instance.fullScreenExitKeyProperty().bind(this.obsrvFullScreenExitKey);
        if (this.boundMaxHeight)
            instance.maxHeightProperty().bind(this.obsrvMaxHeight);
        if (this.boundMaxWidth)
            instance.maxWidthProperty().bind(this.obsrvMaxWidth);
        if (this.boundMinHeight)
            instance.minHeightProperty().bind(this.obsrvMinHeight);
        if (this.boundMinWidth)
            instance.minWidthProperty().bind(this.obsrvMinWidth);
        if (this.boundResizable)
            instance.resizableProperty().bind(this.obsrvResizable);
        if (this.boundTitle)
            instance.titleProperty().bind(this.obsrvTitle);
    }

    /**
     * 設定屬性{@link Stage#setAlwaysOnTop(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B alwaysOnTop(boolean value)
    {
        this.hasAlwaysOnTop = true;
        this.valAlwaysOnTop = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Stage#setFullScreen(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B fullScreen(boolean value)
    {
        this.hasFullScreen = true;
        this.valFullScreen = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Stage#setFullScreenExitHint(java.lang.String)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B fullScreenExitHint(java.lang.String value)
    {
        this.hasFullScreenExitHint = true;
        this.valFullScreenExitHint = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Stage#setFullScreenExitKeyCombination(javafx.scene.input.KeyCombination)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B fullScreenExitKeyCombination(javafx.scene.input.KeyCombination value)
    {
        this.hasFullScreenExitKeyCombination = true;
        this.valFullScreenExitKeyCombination = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Stage#setIconified(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B iconified(boolean value)
    {
        this.hasIconified = true;
        this.valIconified = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link Stage#getIcons}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B icons(java.util.Collection<javafx.scene.image.Image> value)
    {
        this.hasIcons = true;
        this.valIcons = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link Stage#getIcons}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B icons(javafx.scene.image.Image... value)
    {
        this.hasIcons = true;
        this.valIcons = java.util.Arrays.asList(value);
        return (B) this;
    }

    /**
     * 設定屬性{@link Stage#setMaxHeight(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B maxHeight(double value)
    {
        this.hasMaxHeight = true;
        this.valMaxHeight = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Stage#setMaxWidth(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B maxWidth(double value)
    {
        this.hasMaxWidth = true;
        this.valMaxWidth = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Stage#setMaximized(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B maximized(boolean value)
    {
        this.hasMaximized = true;
        this.valMaximized = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Stage#setMinHeight(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B minHeight(double value)
    {
        this.hasMinHeight = true;
        this.valMinHeight = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Stage#setMinWidth(double)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B minWidth(double value)
    {
        this.hasMinWidth = true;
        this.valMinWidth = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Stage#setResizable(boolean)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B resizable(boolean value)
    {
        this.hasResizable = true;
        this.valResizable = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Stage#setScene(javafx.scene.Scene)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B scene(javafx.scene.Scene value)
    {
        this.hasScene = true;
        this.valScene = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Stage#setTitle(java.lang.String)}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B title(java.lang.String value)
    {
        this.hasTitle = true;
        this.valTitle = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Stage#fullScreenExitHintProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindFullScreenExitHint(javafx.beans.value.ObservableValue<? extends java.lang.String> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundFullScreenExitHint = true;
        this.obsrvFullScreenExitHint = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Stage#fullScreenExitKeyProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindFullScreenExitKey(javafx.beans.value.ObservableValue<? extends javafx.scene.input.KeyCombination> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundFullScreenExitKey = true;
        this.obsrvFullScreenExitKey = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Stage#maxHeightProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMaxHeight(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundMaxHeight = true;
        this.obsrvMaxHeight = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Stage#maxWidthProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMaxWidth(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundMaxWidth = true;
        this.obsrvMaxWidth = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Stage#minHeightProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMinHeight(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundMinHeight = true;
        this.obsrvMinHeight = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Stage#minWidthProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMinWidth(javafx.beans.value.ObservableValue<? extends Double> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundMinWidth = true;
        this.obsrvMinWidth = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Stage#resizableProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindResizable(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundResizable = true;
        this.obsrvResizable = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Stage#titleProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindTitle(javafx.beans.value.ObservableValue<? extends String> source)
    {
        java.util.Objects.requireNonNull(source);
        this.boundTitle = true;
        this.obsrvTitle = source;
        return (B) this;
    }

    /**
     * 建構{@link Stage}物件
     *
     * @return 新的{@link Stage}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public Stage build()
    {
        Stage instance = new Stage();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
