// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.stage;

/**
 * {@link PopupWindow}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link PopupWindow})
 * @param <B> 建構器本身的型態(需繼承{@link PopupWindowBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class PopupWindowBuilder<Z extends PopupWindow, B extends PopupWindowBuilder<Z, B>>
        extends javafx.stage.WindowBuilder<Z, B>
        implements PopupWindowBuilderExt<Z, B>
{

    private boolean hasAnchorLocation;
    private javafx.stage.PopupWindow.AnchorLocation valAnchorLocation;

    private boolean hasAnchorX;
    private double valAnchorX;

    private boolean hasAnchorY;
    private double valAnchorY;

    private boolean hasAutoFix;
    private boolean valAutoFix;

    private boolean hasAutoHide;
    private boolean valAutoHide;

    private boolean hasConsumeAutoHidingEvents;
    private boolean valConsumeAutoHidingEvents;

    private boolean hasHideOnEscape;
    private boolean valHideOnEscape;

    private boolean hasOnAutoHide;
    private javafx.event.EventHandler<javafx.event.Event> valOnAutoHide;

    private boolean bound1AnchorLocation;
    private boolean bound2AnchorLocation;
    private javafx.beans.value.ObservableValue<? extends javafx.stage.PopupWindow.AnchorLocation> obsrv1AnchorLocation;
    private javafx.beans.property.Property<javafx.stage.PopupWindow.AnchorLocation> obsrv2AnchorLocation;

    private boolean bound1AutoFix;
    private boolean bound2AutoFix;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrv1AutoFix;
    private javafx.beans.property.Property<Boolean> obsrv2AutoFix;

    private boolean bound1AutoHide;
    private boolean bound2AutoHide;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrv1AutoHide;
    private javafx.beans.property.Property<Boolean> obsrv2AutoHide;

    private boolean bound1ConsumeAutoHidingEvents;
    private boolean bound2ConsumeAutoHidingEvents;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrv1ConsumeAutoHidingEvents;
    private javafx.beans.property.Property<Boolean> obsrv2ConsumeAutoHidingEvents;

    private boolean bound1HideOnEscape;
    private boolean bound2HideOnEscape;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrv1HideOnEscape;
    private javafx.beans.property.Property<Boolean> obsrv2HideOnEscape;

    private boolean bound1OnAutoHide;
    private boolean bound2OnAutoHide;
    private javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.event.Event>> obsrv1OnAutoHide;
    private javafx.beans.property.Property<javafx.event.EventHandler<javafx.event.Event>> obsrv2OnAutoHide;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasAnchorLocation)
            instance.setAnchorLocation(this.valAnchorLocation);
        if (this.hasAnchorX)
            instance.setAnchorX(this.valAnchorX);
        if (this.hasAnchorY)
            instance.setAnchorY(this.valAnchorY);
        if (this.hasAutoFix)
            instance.setAutoFix(this.valAutoFix);
        if (this.hasAutoHide)
            instance.setAutoHide(this.valAutoHide);
        if (this.hasConsumeAutoHidingEvents)
            instance.setConsumeAutoHidingEvents(this.valConsumeAutoHidingEvents);
        if (this.hasHideOnEscape)
            instance.setHideOnEscape(this.valHideOnEscape);
        if (this.hasOnAutoHide)
            instance.setOnAutoHide(this.valOnAutoHide);
        if (this.bound1AnchorLocation)
            instance.anchorLocationProperty().bind(this.obsrv1AnchorLocation);
        if (this.bound2AnchorLocation)
            instance.anchorLocationProperty().bindBidirectional(this.obsrv2AnchorLocation);
        if (this.bound1AutoFix)
            instance.autoFixProperty().bind(this.obsrv1AutoFix);
        if (this.bound2AutoFix)
            instance.autoFixProperty().bindBidirectional(this.obsrv2AutoFix);
        if (this.bound1AutoHide)
            instance.autoHideProperty().bind(this.obsrv1AutoHide);
        if (this.bound2AutoHide)
            instance.autoHideProperty().bindBidirectional(this.obsrv2AutoHide);
        if (this.bound1ConsumeAutoHidingEvents)
            instance.consumeAutoHidingEventsProperty().bind(this.obsrv1ConsumeAutoHidingEvents);
        if (this.bound2ConsumeAutoHidingEvents)
            instance.consumeAutoHidingEventsProperty().bindBidirectional(this.obsrv2ConsumeAutoHidingEvents);
        if (this.bound1HideOnEscape)
            instance.hideOnEscapeProperty().bind(this.obsrv1HideOnEscape);
        if (this.bound2HideOnEscape)
            instance.hideOnEscapeProperty().bindBidirectional(this.obsrv2HideOnEscape);
        if (this.bound1OnAutoHide)
            instance.onAutoHideProperty().bind(this.obsrv1OnAutoHide);
        if (this.bound2OnAutoHide)
            instance.onAutoHideProperty().bindBidirectional(this.obsrv2OnAutoHide);
    }

    /**
     * 設定屬性{@link PopupWindow#setAnchorLocation(javafx.stage.PopupWindow.AnchorLocation)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B anchorLocation(javafx.stage.PopupWindow.AnchorLocation value)
    {
        this.hasAnchorLocation = true;
        this.valAnchorLocation = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupWindow#setAnchorX(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B anchorX(double value)
    {
        this.hasAnchorX = true;
        this.valAnchorX = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupWindow#setAnchorY(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B anchorY(double value)
    {
        this.hasAnchorY = true;
        this.valAnchorY = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupWindow#setAutoFix(boolean)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B autoFix(boolean value)
    {
        this.hasAutoFix = true;
        this.valAutoFix = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupWindow#setAutoHide(boolean)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B autoHide(boolean value)
    {
        this.hasAutoHide = true;
        this.valAutoHide = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupWindow#setConsumeAutoHidingEvents(boolean)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B consumeAutoHidingEvents(boolean value)
    {
        this.hasConsumeAutoHidingEvents = true;
        this.valConsumeAutoHidingEvents = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupWindow#setHideOnEscape(boolean)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B hideOnEscape(boolean value)
    {
        this.hasHideOnEscape = true;
        this.valHideOnEscape = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupWindow#setOnAutoHide(javafx.event.EventHandler)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onAutoHide(javafx.event.EventHandler<javafx.event.Event> value)
    {
        this.hasOnAutoHide = true;
        this.valOnAutoHide = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupWindow#anchorLocationProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindAnchorLocation(javafx.beans.value.ObservableValue<? extends javafx.stage.PopupWindow.AnchorLocation> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1AnchorLocation = true;
        this.obsrv1AnchorLocation = source;
        this.bound2AnchorLocation = false;
        this.obsrv2AnchorLocation = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupWindow#anchorLocationProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalAnchorLocation(javafx.beans.property.Property<javafx.stage.PopupWindow.AnchorLocation> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1AnchorLocation = false;
        this.obsrv1AnchorLocation = null;
        this.bound2AnchorLocation = true;
        this.obsrv2AnchorLocation = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupWindow#autoFixProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindAutoFix(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1AutoFix = true;
        this.obsrv1AutoFix = source;
        this.bound2AutoFix = false;
        this.obsrv2AutoFix = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupWindow#autoFixProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalAutoFix(javafx.beans.property.Property<Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1AutoFix = false;
        this.obsrv1AutoFix = null;
        this.bound2AutoFix = true;
        this.obsrv2AutoFix = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupWindow#autoHideProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindAutoHide(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1AutoHide = true;
        this.obsrv1AutoHide = source;
        this.bound2AutoHide = false;
        this.obsrv2AutoHide = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupWindow#autoHideProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalAutoHide(javafx.beans.property.Property<Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1AutoHide = false;
        this.obsrv1AutoHide = null;
        this.bound2AutoHide = true;
        this.obsrv2AutoHide = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupWindow#consumeAutoHidingEventsProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindConsumeAutoHidingEvents(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ConsumeAutoHidingEvents = true;
        this.obsrv1ConsumeAutoHidingEvents = source;
        this.bound2ConsumeAutoHidingEvents = false;
        this.obsrv2ConsumeAutoHidingEvents = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupWindow#consumeAutoHidingEventsProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalConsumeAutoHidingEvents(javafx.beans.property.Property<Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ConsumeAutoHidingEvents = false;
        this.obsrv1ConsumeAutoHidingEvents = null;
        this.bound2ConsumeAutoHidingEvents = true;
        this.obsrv2ConsumeAutoHidingEvents = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupWindow#hideOnEscapeProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindHideOnEscape(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1HideOnEscape = true;
        this.obsrv1HideOnEscape = source;
        this.bound2HideOnEscape = false;
        this.obsrv2HideOnEscape = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupWindow#hideOnEscapeProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalHideOnEscape(javafx.beans.property.Property<Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1HideOnEscape = false;
        this.obsrv1HideOnEscape = null;
        this.bound2HideOnEscape = true;
        this.obsrv2HideOnEscape = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupWindow#onAutoHideProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnAutoHide(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.event.Event>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnAutoHide = true;
        this.obsrv1OnAutoHide = source;
        this.bound2OnAutoHide = false;
        this.obsrv2OnAutoHide = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link PopupWindow#onAutoHideProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOnAutoHide(javafx.beans.property.Property<javafx.event.EventHandler<javafx.event.Event>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnAutoHide = false;
        this.obsrv1OnAutoHide = null;
        this.bound2OnAutoHide = true;
        this.obsrv2OnAutoHide = source;
        return (B) this;
    }
}
