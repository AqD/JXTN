// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.stage;

/**
 * {@link PopupWindow}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class PopupWindowBuilder<Z extends PopupWindow, B extends PopupWindowBuilder<Z, B>>
        extends javafx.stage.WindowBuilder<Z, B>
{
    private boolean applied;

    protected boolean hasAnchorLocation;
    protected javafx.stage.PopupWindow.AnchorLocation valAnchorLocation;

    protected boolean hasAnchorX;
    protected double valAnchorX;

    protected boolean hasAnchorY;
    protected double valAnchorY;

    protected boolean hasAutoFix;
    protected boolean valAutoFix;

    protected boolean hasAutoHide;
    protected boolean valAutoHide;

    protected boolean hasConsumeAutoHidingEvents;
    protected boolean valConsumeAutoHidingEvents;

    protected boolean hasHideOnEscape;
    protected boolean valHideOnEscape;

    protected boolean hasOnAutoHide;
    protected javafx.event.EventHandler<javafx.event.Event> valOnAutoHide;

    protected boolean boundAnchorLocation;
    protected javafx.beans.value.ObservableValue<? extends javafx.stage.PopupWindow.AnchorLocation> obsrvAnchorLocation;

    protected boolean boundAutoFix;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvAutoFix;

    protected boolean boundAutoHide;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvAutoHide;

    protected boolean boundConsumeAutoHidingEvents;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvConsumeAutoHidingEvents;

    protected boolean boundHideOnEscape;
    protected javafx.beans.value.ObservableValue<? extends Boolean> obsrvHideOnEscape;

    protected boolean boundOnAutoHide;
    protected javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.event.Event>> obsrvOnAutoHide;
    public void applyTo(PopupWindow instance)
    {
        super.applyTo(instance);
        if (this.applied)
            throw new IllegalStateException();
        if (this.hasAnchorLocation)
            instance.setAnchorLocation(this.valAnchorLocation);
        if (this.hasAnchorX)
            instance.setAnchorX(this.valAnchorX);
        if (this.hasAnchorY)
            instance.setAnchorY(this.valAnchorY);
        if (this.hasAutoFix)
            instance.setAutoFix(this.valAutoFix);
        if (this.hasAutoHide)
            instance.setAutoHide(this.valAutoHide);
        if (this.hasConsumeAutoHidingEvents)
            instance.setConsumeAutoHidingEvents(this.valConsumeAutoHidingEvents);
        if (this.hasHideOnEscape)
            instance.setHideOnEscape(this.valHideOnEscape);
        if (this.hasOnAutoHide)
            instance.setOnAutoHide(this.valOnAutoHide);
        if (this.boundAnchorLocation)
            instance.anchorLocationProperty().bind(this.obsrvAnchorLocation);
        if (this.boundAutoFix)
            instance.autoFixProperty().bind(this.obsrvAutoFix);
        if (this.boundAutoHide)
            instance.autoHideProperty().bind(this.obsrvAutoHide);
        if (this.boundConsumeAutoHidingEvents)
            instance.consumeAutoHidingEventsProperty().bind(this.obsrvConsumeAutoHidingEvents);
        if (this.boundHideOnEscape)
            instance.hideOnEscapeProperty().bind(this.obsrvHideOnEscape);
        if (this.boundOnAutoHide)
            instance.onAutoHideProperty().bind(this.obsrvOnAutoHide);
        //
        this.applied = true;
    }

    @SuppressWarnings("unchecked")
    public B anchorLocation(javafx.stage.PopupWindow.AnchorLocation value)
    {
        this.hasAnchorLocation = true;
        this.valAnchorLocation = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B anchorX(double value)
    {
        this.hasAnchorX = true;
        this.valAnchorX = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B anchorY(double value)
    {
        this.hasAnchorY = true;
        this.valAnchorY = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B autoFix(boolean value)
    {
        this.hasAutoFix = true;
        this.valAutoFix = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B autoHide(boolean value)
    {
        this.hasAutoHide = true;
        this.valAutoHide = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B consumeAutoHidingEvents(boolean value)
    {
        this.hasConsumeAutoHidingEvents = true;
        this.valConsumeAutoHidingEvents = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B hideOnEscape(boolean value)
    {
        this.hasHideOnEscape = true;
        this.valHideOnEscape = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B onAutoHide(javafx.event.EventHandler<javafx.event.Event> value)
    {
        this.hasOnAutoHide = true;
        this.valOnAutoHide = value;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindAnchorLocation(javafx.beans.value.ObservableValue<? extends javafx.stage.PopupWindow.AnchorLocation> source)
    {
        assert (source != null);
        this.boundAnchorLocation = true;
        this.obsrvAnchorLocation = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindAutoFix(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundAutoFix = true;
        this.obsrvAutoFix = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindAutoHide(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundAutoHide = true;
        this.obsrvAutoHide = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindConsumeAutoHidingEvents(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundConsumeAutoHidingEvents = true;
        this.obsrvConsumeAutoHidingEvents = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindHideOnEscape(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        assert (source != null);
        this.boundHideOnEscape = true;
        this.obsrvHideOnEscape = source;
        return (B) this;
    }

    @SuppressWarnings("unchecked")
    public B bindOnAutoHide(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.event.Event>> source)
    {
        assert (source != null);
        this.boundOnAutoHide = true;
        this.obsrvOnAutoHide = source;
        return (B) this;
    }
}
