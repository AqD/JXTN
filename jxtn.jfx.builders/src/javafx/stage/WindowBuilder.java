// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.stage;

/**
 * {@link Window}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link Window})
 * @param <B> 建構器本身的型態(需繼承{@link WindowBuilder})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class WindowBuilder<Z extends Window, B extends WindowBuilder<Z, B>>
        extends jxtn.jfx.builders.AbstractBuilder<Z, B>
        implements WindowBuilderExt<Z, B>
{

    private boolean hasEventDispatcher;
    private javafx.event.EventDispatcher valEventDispatcher;

    private boolean hasHeight;
    private double valHeight;

    private boolean hasOnCloseRequest;
    private javafx.event.EventHandler<javafx.stage.WindowEvent> valOnCloseRequest;

    private boolean hasOnHidden;
    private javafx.event.EventHandler<javafx.stage.WindowEvent> valOnHidden;

    private boolean hasOnHiding;
    private javafx.event.EventHandler<javafx.stage.WindowEvent> valOnHiding;

    private boolean hasOnShowing;
    private javafx.event.EventHandler<javafx.stage.WindowEvent> valOnShowing;

    private boolean hasOnShown;
    private javafx.event.EventHandler<javafx.stage.WindowEvent> valOnShown;

    private boolean hasOpacity;
    private double valOpacity;

    private boolean hasWidth;
    private double valWidth;

    private boolean hasX;
    private double valX;

    private boolean hasY;
    private double valY;

    private boolean bound1EventDispatcher;
    private boolean bound2EventDispatcher;
    private javafx.beans.value.ObservableValue<? extends javafx.event.EventDispatcher> obsrv1EventDispatcher;
    private javafx.beans.property.Property<javafx.event.EventDispatcher> obsrv2EventDispatcher;

    private boolean bound1OnCloseRequest;
    private boolean bound2OnCloseRequest;
    private javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.stage.WindowEvent>> obsrv1OnCloseRequest;
    private javafx.beans.property.Property<javafx.event.EventHandler<javafx.stage.WindowEvent>> obsrv2OnCloseRequest;

    private boolean bound1OnHidden;
    private boolean bound2OnHidden;
    private javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.stage.WindowEvent>> obsrv1OnHidden;
    private javafx.beans.property.Property<javafx.event.EventHandler<javafx.stage.WindowEvent>> obsrv2OnHidden;

    private boolean bound1OnHiding;
    private boolean bound2OnHiding;
    private javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.stage.WindowEvent>> obsrv1OnHiding;
    private javafx.beans.property.Property<javafx.event.EventHandler<javafx.stage.WindowEvent>> obsrv2OnHiding;

    private boolean bound1OnShowing;
    private boolean bound2OnShowing;
    private javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.stage.WindowEvent>> obsrv1OnShowing;
    private javafx.beans.property.Property<javafx.event.EventHandler<javafx.stage.WindowEvent>> obsrv2OnShowing;

    private boolean bound1OnShown;
    private boolean bound2OnShown;
    private javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.stage.WindowEvent>> obsrv1OnShown;
    private javafx.beans.property.Property<javafx.event.EventHandler<javafx.stage.WindowEvent>> obsrv2OnShown;

    private boolean bound1Opacity;
    private boolean bound2Opacity;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1Opacity;
    private javafx.beans.property.Property<Number> obsrv2Opacity;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasEventDispatcher)
            instance.setEventDispatcher(this.valEventDispatcher);
        if (this.hasHeight)
            instance.setHeight(this.valHeight);
        if (this.hasOnCloseRequest)
            instance.setOnCloseRequest(this.valOnCloseRequest);
        if (this.hasOnHidden)
            instance.setOnHidden(this.valOnHidden);
        if (this.hasOnHiding)
            instance.setOnHiding(this.valOnHiding);
        if (this.hasOnShowing)
            instance.setOnShowing(this.valOnShowing);
        if (this.hasOnShown)
            instance.setOnShown(this.valOnShown);
        if (this.hasOpacity)
            instance.setOpacity(this.valOpacity);
        if (this.hasWidth)
            instance.setWidth(this.valWidth);
        if (this.hasX)
            instance.setX(this.valX);
        if (this.hasY)
            instance.setY(this.valY);
        if (this.bound1EventDispatcher)
            instance.eventDispatcherProperty().bind(this.obsrv1EventDispatcher);
        if (this.bound2EventDispatcher)
            instance.eventDispatcherProperty().bindBidirectional(this.obsrv2EventDispatcher);
        if (this.bound1OnCloseRequest)
            instance.onCloseRequestProperty().bind(this.obsrv1OnCloseRequest);
        if (this.bound2OnCloseRequest)
            instance.onCloseRequestProperty().bindBidirectional(this.obsrv2OnCloseRequest);
        if (this.bound1OnHidden)
            instance.onHiddenProperty().bind(this.obsrv1OnHidden);
        if (this.bound2OnHidden)
            instance.onHiddenProperty().bindBidirectional(this.obsrv2OnHidden);
        if (this.bound1OnHiding)
            instance.onHidingProperty().bind(this.obsrv1OnHiding);
        if (this.bound2OnHiding)
            instance.onHidingProperty().bindBidirectional(this.obsrv2OnHiding);
        if (this.bound1OnShowing)
            instance.onShowingProperty().bind(this.obsrv1OnShowing);
        if (this.bound2OnShowing)
            instance.onShowingProperty().bindBidirectional(this.obsrv2OnShowing);
        if (this.bound1OnShown)
            instance.onShownProperty().bind(this.obsrv1OnShown);
        if (this.bound2OnShown)
            instance.onShownProperty().bindBidirectional(this.obsrv2OnShown);
        if (this.bound1Opacity)
            instance.opacityProperty().bind(this.obsrv1Opacity);
        if (this.bound2Opacity)
            instance.opacityProperty().bindBidirectional(this.obsrv2Opacity);
    }

    /**
     * 設定屬性{@link Window#setEventDispatcher(javafx.event.EventDispatcher)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B eventDispatcher(javafx.event.EventDispatcher value)
    {
        this.hasEventDispatcher = true;
        this.valEventDispatcher = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#setHeight(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B height(double value)
    {
        this.hasHeight = true;
        this.valHeight = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#setOnCloseRequest(javafx.event.EventHandler)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onCloseRequest(javafx.event.EventHandler<javafx.stage.WindowEvent> value)
    {
        this.hasOnCloseRequest = true;
        this.valOnCloseRequest = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#setOnHidden(javafx.event.EventHandler)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onHidden(javafx.event.EventHandler<javafx.stage.WindowEvent> value)
    {
        this.hasOnHidden = true;
        this.valOnHidden = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#setOnHiding(javafx.event.EventHandler)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onHiding(javafx.event.EventHandler<javafx.stage.WindowEvent> value)
    {
        this.hasOnHiding = true;
        this.valOnHiding = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#setOnShowing(javafx.event.EventHandler)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onShowing(javafx.event.EventHandler<javafx.stage.WindowEvent> value)
    {
        this.hasOnShowing = true;
        this.valOnShowing = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#setOnShown(javafx.event.EventHandler)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onShown(javafx.event.EventHandler<javafx.stage.WindowEvent> value)
    {
        this.hasOnShown = true;
        this.valOnShown = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#setOpacity(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B opacity(double value)
    {
        this.hasOpacity = true;
        this.valOpacity = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#setWidth(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B width(double value)
    {
        this.hasWidth = true;
        this.valWidth = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#setX(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B x(double value)
    {
        this.hasX = true;
        this.valX = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#setY(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B y(double value)
    {
        this.hasY = true;
        this.valY = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#eventDispatcherProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindEventDispatcher(javafx.beans.value.ObservableValue<? extends javafx.event.EventDispatcher> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1EventDispatcher = true;
        this.obsrv1EventDispatcher = source;
        this.bound2EventDispatcher = false;
        this.obsrv2EventDispatcher = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#eventDispatcherProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalEventDispatcher(javafx.beans.property.Property<javafx.event.EventDispatcher> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1EventDispatcher = false;
        this.obsrv1EventDispatcher = null;
        this.bound2EventDispatcher = true;
        this.obsrv2EventDispatcher = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#onCloseRequestProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnCloseRequest(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.stage.WindowEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnCloseRequest = true;
        this.obsrv1OnCloseRequest = source;
        this.bound2OnCloseRequest = false;
        this.obsrv2OnCloseRequest = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#onCloseRequestProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOnCloseRequest(javafx.beans.property.Property<javafx.event.EventHandler<javafx.stage.WindowEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnCloseRequest = false;
        this.obsrv1OnCloseRequest = null;
        this.bound2OnCloseRequest = true;
        this.obsrv2OnCloseRequest = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#onHiddenProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnHidden(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.stage.WindowEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnHidden = true;
        this.obsrv1OnHidden = source;
        this.bound2OnHidden = false;
        this.obsrv2OnHidden = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#onHiddenProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOnHidden(javafx.beans.property.Property<javafx.event.EventHandler<javafx.stage.WindowEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnHidden = false;
        this.obsrv1OnHidden = null;
        this.bound2OnHidden = true;
        this.obsrv2OnHidden = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#onHidingProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnHiding(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.stage.WindowEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnHiding = true;
        this.obsrv1OnHiding = source;
        this.bound2OnHiding = false;
        this.obsrv2OnHiding = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#onHidingProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOnHiding(javafx.beans.property.Property<javafx.event.EventHandler<javafx.stage.WindowEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnHiding = false;
        this.obsrv1OnHiding = null;
        this.bound2OnHiding = true;
        this.obsrv2OnHiding = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#onShowingProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnShowing(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.stage.WindowEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnShowing = true;
        this.obsrv1OnShowing = source;
        this.bound2OnShowing = false;
        this.obsrv2OnShowing = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#onShowingProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOnShowing(javafx.beans.property.Property<javafx.event.EventHandler<javafx.stage.WindowEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnShowing = false;
        this.obsrv1OnShowing = null;
        this.bound2OnShowing = true;
        this.obsrv2OnShowing = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#onShownProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnShown(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.stage.WindowEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnShown = true;
        this.obsrv1OnShown = source;
        this.bound2OnShown = false;
        this.obsrv2OnShown = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#onShownProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOnShown(javafx.beans.property.Property<javafx.event.EventHandler<javafx.stage.WindowEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnShown = false;
        this.obsrv1OnShown = null;
        this.bound2OnShown = true;
        this.obsrv2OnShown = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#opacityProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOpacity(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Opacity = true;
        this.obsrv1Opacity = source;
        this.bound2Opacity = false;
        this.obsrv2Opacity = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link Window#opacityProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOpacity(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Opacity = false;
        this.obsrv1Opacity = null;
        this.bound2Opacity = true;
        this.obsrv2Opacity = source;
        return (B) this;
    }
}
