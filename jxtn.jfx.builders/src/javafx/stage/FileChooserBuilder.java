// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.stage;

/**
 * {@link FileChooser}建構器
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class FileChooserBuilder<Z extends FileChooser, B extends FileChooserBuilder<Z, B>>
        extends jxtn.jfx.builders.AbstractBuilder<Z, B>
{

    protected boolean hasExtensionFilters;
    protected java.util.Collection<javafx.stage.FileChooser.ExtensionFilter> valExtensionFilters;

    protected boolean hasInitialDirectory;
    protected java.io.File valInitialDirectory;

    protected boolean hasInitialFileName;
    protected java.lang.String valInitialFileName;

    protected boolean hasSelectedExtensionFilter;
    protected javafx.stage.FileChooser.ExtensionFilter valSelectedExtensionFilter;

    protected boolean hasTitle;
    protected java.lang.String valTitle;

    protected boolean boundInitialDirectory;
    protected javafx.beans.value.ObservableValue<? extends java.io.File> obsrvInitialDirectory;

    protected boolean boundInitialFileName;
    protected javafx.beans.value.ObservableValue<? extends java.lang.String> obsrvInitialFileName;

    protected boolean boundSelectedExtensionFilter;
    protected javafx.beans.value.ObservableValue<? extends javafx.stage.FileChooser.ExtensionFilter> obsrvSelectedExtensionFilter;

    protected boolean boundTitle;
    protected javafx.beans.value.ObservableValue<? extends String> obsrvTitle;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasExtensionFilters)
            instance.getExtensionFilters().setAll(this.valExtensionFilters);
        if (this.hasInitialDirectory)
            instance.setInitialDirectory(this.valInitialDirectory);
        if (this.hasInitialFileName)
            instance.setInitialFileName(this.valInitialFileName);
        if (this.hasSelectedExtensionFilter)
            instance.setSelectedExtensionFilter(this.valSelectedExtensionFilter);
        if (this.hasTitle)
            instance.setTitle(this.valTitle);
        if (this.boundInitialDirectory)
            instance.initialDirectoryProperty().bind(this.obsrvInitialDirectory);
        if (this.boundInitialFileName)
            instance.initialFileNameProperty().bind(this.obsrvInitialFileName);
        if (this.boundSelectedExtensionFilter)
            instance.selectedExtensionFilterProperty().bind(this.obsrvSelectedExtensionFilter);
        if (this.boundTitle)
            instance.titleProperty().bind(this.obsrvTitle);
    }

    /**
     * 設定集合屬性{@link FileChooser#getExtensionFilters}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B extensionFilters(java.util.Collection<javafx.stage.FileChooser.ExtensionFilter> value)
    {
        this.hasExtensionFilters = true;
        this.valExtensionFilters = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link FileChooser#getExtensionFilters}的內容
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B extensionFilters(javafx.stage.FileChooser.ExtensionFilter... value)
    {
        this.hasExtensionFilters = true;
        this.valExtensionFilters = java.util.Arrays.asList(value);
        return (B) this;
    }

    /**
     * 設定屬性{@link FileChooser#setInitialDirectory}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B initialDirectory(java.io.File value)
    {
        this.hasInitialDirectory = true;
        this.valInitialDirectory = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link FileChooser#setInitialFileName}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B initialFileName(java.lang.String value)
    {
        this.hasInitialFileName = true;
        this.valInitialFileName = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link FileChooser#setSelectedExtensionFilter}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B selectedExtensionFilter(javafx.stage.FileChooser.ExtensionFilter value)
    {
        this.hasSelectedExtensionFilter = true;
        this.valSelectedExtensionFilter = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link FileChooser#setTitle}
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B title(java.lang.String value)
    {
        this.hasTitle = true;
        this.valTitle = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link FileChooser#initialDirectoryProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindInitialDirectory(javafx.beans.value.ObservableValue<? extends java.io.File> source)
    {
        assert (source != null);
        this.boundInitialDirectory = true;
        this.obsrvInitialDirectory = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link FileChooser#initialFileNameProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindInitialFileName(javafx.beans.value.ObservableValue<? extends java.lang.String> source)
    {
        assert (source != null);
        this.boundInitialFileName = true;
        this.obsrvInitialFileName = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link FileChooser#selectedExtensionFilterProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindSelectedExtensionFilter(javafx.beans.value.ObservableValue<? extends javafx.stage.FileChooser.ExtensionFilter> source)
    {
        assert (source != null);
        this.boundSelectedExtensionFilter = true;
        this.obsrvSelectedExtensionFilter = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link FileChooser#titleProperty}的連結
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bindTitle(javafx.beans.value.ObservableValue<? extends String> source)
    {
        assert (source != null);
        this.boundTitle = true;
        this.obsrvTitle = source;
        return (B) this;
    }

    /**
     * 建構{@link FileChooser}物件
     *
     * @return 新的{@link FileChooser}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public FileChooser build()
    {
        FileChooser instance = new FileChooser();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
