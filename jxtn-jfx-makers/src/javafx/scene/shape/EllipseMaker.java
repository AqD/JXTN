// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.shape;

/**
 * {@link Ellipse}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link Ellipse})
 * @param <B> 建構器本身的型態(需繼承{@link EllipseMaker})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class EllipseMaker<Z extends Ellipse, B extends EllipseMaker<Z, B>>
        extends javafx.scene.shape.ShapeMaker<Z, B>
        implements EllipseMakerExt<Z, B>
{

    private boolean hasCenterX;
    private double valCenterX;

    private boolean hasCenterY;
    private double valCenterY;

    private boolean hasRadiusX;
    private double valRadiusX;

    private boolean hasRadiusY;
    private double valRadiusY;

    private boolean bound1CenterX;
    private boolean bound2CenterX;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1CenterX;
    private javafx.beans.property.Property<Number> obsrv2CenterX;

    private boolean bound1CenterY;
    private boolean bound2CenterY;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1CenterY;
    private javafx.beans.property.Property<Number> obsrv2CenterY;

    private boolean bound1RadiusX;
    private boolean bound2RadiusX;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1RadiusX;
    private javafx.beans.property.Property<Number> obsrv2RadiusX;

    private boolean bound1RadiusY;
    private boolean bound2RadiusY;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1RadiusY;
    private javafx.beans.property.Property<Number> obsrv2RadiusY;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasCenterX)
            instance.setCenterX(this.valCenterX);
        if (this.hasCenterY)
            instance.setCenterY(this.valCenterY);
        if (this.hasRadiusX)
            instance.setRadiusX(this.valRadiusX);
        if (this.hasRadiusY)
            instance.setRadiusY(this.valRadiusY);
        if (this.bound1CenterX)
            instance.centerXProperty().bind(this.obsrv1CenterX);
        if (this.bound2CenterX)
            instance.centerXProperty().bindBidirectional(this.obsrv2CenterX);
        if (this.bound1CenterY)
            instance.centerYProperty().bind(this.obsrv1CenterY);
        if (this.bound2CenterY)
            instance.centerYProperty().bindBidirectional(this.obsrv2CenterY);
        if (this.bound1RadiusX)
            instance.radiusXProperty().bind(this.obsrv1RadiusX);
        if (this.bound2RadiusX)
            instance.radiusXProperty().bindBidirectional(this.obsrv2RadiusX);
        if (this.bound1RadiusY)
            instance.radiusYProperty().bind(this.obsrv1RadiusY);
        if (this.bound2RadiusY)
            instance.radiusYProperty().bindBidirectional(this.obsrv2RadiusY);
    }

    /**
     * 設定屬性{@link Ellipse#setCenterX(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B centerX(double value)
    {
        this.hasCenterX = true;
        this.valCenterX = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Ellipse#setCenterY(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B centerY(double value)
    {
        this.hasCenterY = true;
        this.valCenterY = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Ellipse#setRadiusX(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B radiusX(double value)
    {
        this.hasRadiusX = true;
        this.valRadiusX = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Ellipse#setRadiusY(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B radiusY(double value)
    {
        this.hasRadiusY = true;
        this.valRadiusY = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Ellipse#centerXProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindCenterX(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1CenterX = true;
        this.obsrv1CenterX = source;
        this.bound2CenterX = false;
        this.obsrv2CenterX = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link Ellipse#centerXProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalCenterX(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1CenterX = false;
        this.obsrv1CenterX = null;
        this.bound2CenterX = true;
        this.obsrv2CenterX = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Ellipse#centerYProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindCenterY(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1CenterY = true;
        this.obsrv1CenterY = source;
        this.bound2CenterY = false;
        this.obsrv2CenterY = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link Ellipse#centerYProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalCenterY(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1CenterY = false;
        this.obsrv1CenterY = null;
        this.bound2CenterY = true;
        this.obsrv2CenterY = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Ellipse#radiusXProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindRadiusX(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1RadiusX = true;
        this.obsrv1RadiusX = source;
        this.bound2RadiusX = false;
        this.obsrv2RadiusX = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link Ellipse#radiusXProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalRadiusX(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1RadiusX = false;
        this.obsrv1RadiusX = null;
        this.bound2RadiusX = true;
        this.obsrv2RadiusX = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Ellipse#radiusYProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindRadiusY(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1RadiusY = true;
        this.obsrv1RadiusY = source;
        this.bound2RadiusY = false;
        this.obsrv2RadiusY = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link Ellipse#radiusYProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalRadiusY(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1RadiusY = false;
        this.obsrv1RadiusY = null;
        this.bound2RadiusY = true;
        this.obsrv2RadiusY = source;
        return (B) this;
    }

    /**
     * 建構{@link Ellipse}物件。
     *
     * @return 新的{@link Ellipse}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public Ellipse build()
    {
        Ellipse instance = new Ellipse();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link Ellipse}物件。
     *
     * @return 新的{@link Ellipse}物件實體
     */
    @SuppressWarnings("unchecked")
    public Ellipse build(double arg0, double arg1)
    {
        Ellipse instance = new Ellipse(arg0, arg1);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link Ellipse}物件。
     *
     * @return 新的{@link Ellipse}物件實體
     */
    @SuppressWarnings("unchecked")
    public Ellipse build(double arg0, double arg1, double arg2, double arg3)
    {
        Ellipse instance = new Ellipse(arg0, arg1, arg2, arg3);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
