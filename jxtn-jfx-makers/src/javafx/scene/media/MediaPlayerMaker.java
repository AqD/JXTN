// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.media;

/**
 * {@link MediaPlayer}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link MediaPlayer})
 * @param <B> 建構器本身的型態(需繼承{@link MediaPlayerMaker})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class MediaPlayerMaker<Z extends MediaPlayer, B extends MediaPlayerMaker<Z, B>>
        extends jxtn.jfx.makers.AbstractMaker<Z, B>
        implements MediaPlayerMakerExt<Z, B>
{

    private boolean hasAudioSpectrumInterval;
    private double valAudioSpectrumInterval;

    private boolean hasAudioSpectrumListener;
    private javafx.scene.media.AudioSpectrumListener valAudioSpectrumListener;

    private boolean hasAudioSpectrumNumBands;
    private int valAudioSpectrumNumBands;

    private boolean hasAudioSpectrumThreshold;
    private int valAudioSpectrumThreshold;

    private boolean hasAutoPlay;
    private boolean valAutoPlay;

    private boolean hasBalance;
    private double valBalance;

    private boolean hasCycleCount;
    private int valCycleCount;

    private boolean hasMute;
    private boolean valMute;

    private boolean hasOnEndOfMedia;
    private java.lang.Runnable valOnEndOfMedia;

    private boolean hasOnError;
    private java.lang.Runnable valOnError;

    private boolean hasOnHalted;
    private java.lang.Runnable valOnHalted;

    private boolean hasOnMarker;
    private javafx.event.EventHandler<javafx.scene.media.MediaMarkerEvent> valOnMarker;

    private boolean hasOnPaused;
    private java.lang.Runnable valOnPaused;

    private boolean hasOnPlaying;
    private java.lang.Runnable valOnPlaying;

    private boolean hasOnReady;
    private java.lang.Runnable valOnReady;

    private boolean hasOnRepeat;
    private java.lang.Runnable valOnRepeat;

    private boolean hasOnStalled;
    private java.lang.Runnable valOnStalled;

    private boolean hasOnStopped;
    private java.lang.Runnable valOnStopped;

    private boolean hasRate;
    private double valRate;

    private boolean hasStartTime;
    private javafx.util.Duration valStartTime;

    private boolean hasStopTime;
    private javafx.util.Duration valStopTime;

    private boolean hasVolume;
    private double valVolume;

    private boolean bound1AudioSpectrumInterval;
    private boolean bound2AudioSpectrumInterval;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1AudioSpectrumInterval;
    private javafx.beans.property.Property<Number> obsrv2AudioSpectrumInterval;

    private boolean bound1AudioSpectrumListener;
    private boolean bound2AudioSpectrumListener;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.media.AudioSpectrumListener> obsrv1AudioSpectrumListener;
    private javafx.beans.property.Property<javafx.scene.media.AudioSpectrumListener> obsrv2AudioSpectrumListener;

    private boolean bound1AudioSpectrumNumBands;
    private boolean bound2AudioSpectrumNumBands;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1AudioSpectrumNumBands;
    private javafx.beans.property.Property<Number> obsrv2AudioSpectrumNumBands;

    private boolean bound1AudioSpectrumThreshold;
    private boolean bound2AudioSpectrumThreshold;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1AudioSpectrumThreshold;
    private javafx.beans.property.Property<Number> obsrv2AudioSpectrumThreshold;

    private boolean bound1AutoPlay;
    private boolean bound2AutoPlay;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrv1AutoPlay;
    private javafx.beans.property.Property<Boolean> obsrv2AutoPlay;

    private boolean bound1Balance;
    private boolean bound2Balance;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1Balance;
    private javafx.beans.property.Property<Number> obsrv2Balance;

    private boolean bound1CycleCount;
    private boolean bound2CycleCount;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1CycleCount;
    private javafx.beans.property.Property<Number> obsrv2CycleCount;

    private boolean bound1Mute;
    private boolean bound2Mute;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrv1Mute;
    private javafx.beans.property.Property<Boolean> obsrv2Mute;

    private boolean bound1OnEndOfMedia;
    private boolean bound2OnEndOfMedia;
    private javafx.beans.value.ObservableValue<? extends java.lang.Runnable> obsrv1OnEndOfMedia;
    private javafx.beans.property.Property<java.lang.Runnable> obsrv2OnEndOfMedia;

    private boolean bound1OnError;
    private boolean bound2OnError;
    private javafx.beans.value.ObservableValue<? extends java.lang.Runnable> obsrv1OnError;
    private javafx.beans.property.Property<java.lang.Runnable> obsrv2OnError;

    private boolean bound1OnHalted;
    private boolean bound2OnHalted;
    private javafx.beans.value.ObservableValue<? extends java.lang.Runnable> obsrv1OnHalted;
    private javafx.beans.property.Property<java.lang.Runnable> obsrv2OnHalted;

    private boolean bound1OnMarker;
    private boolean bound2OnMarker;
    private javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.media.MediaMarkerEvent>> obsrv1OnMarker;
    private javafx.beans.property.Property<javafx.event.EventHandler<javafx.scene.media.MediaMarkerEvent>> obsrv2OnMarker;

    private boolean bound1OnPaused;
    private boolean bound2OnPaused;
    private javafx.beans.value.ObservableValue<? extends java.lang.Runnable> obsrv1OnPaused;
    private javafx.beans.property.Property<java.lang.Runnable> obsrv2OnPaused;

    private boolean bound1OnPlaying;
    private boolean bound2OnPlaying;
    private javafx.beans.value.ObservableValue<? extends java.lang.Runnable> obsrv1OnPlaying;
    private javafx.beans.property.Property<java.lang.Runnable> obsrv2OnPlaying;

    private boolean bound1OnReady;
    private boolean bound2OnReady;
    private javafx.beans.value.ObservableValue<? extends java.lang.Runnable> obsrv1OnReady;
    private javafx.beans.property.Property<java.lang.Runnable> obsrv2OnReady;

    private boolean bound1OnRepeat;
    private boolean bound2OnRepeat;
    private javafx.beans.value.ObservableValue<? extends java.lang.Runnable> obsrv1OnRepeat;
    private javafx.beans.property.Property<java.lang.Runnable> obsrv2OnRepeat;

    private boolean bound1OnStalled;
    private boolean bound2OnStalled;
    private javafx.beans.value.ObservableValue<? extends java.lang.Runnable> obsrv1OnStalled;
    private javafx.beans.property.Property<java.lang.Runnable> obsrv2OnStalled;

    private boolean bound1OnStopped;
    private boolean bound2OnStopped;
    private javafx.beans.value.ObservableValue<? extends java.lang.Runnable> obsrv1OnStopped;
    private javafx.beans.property.Property<java.lang.Runnable> obsrv2OnStopped;

    private boolean bound1Rate;
    private boolean bound2Rate;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1Rate;
    private javafx.beans.property.Property<Number> obsrv2Rate;

    private boolean bound1StartTime;
    private boolean bound2StartTime;
    private javafx.beans.value.ObservableValue<? extends javafx.util.Duration> obsrv1StartTime;
    private javafx.beans.property.Property<javafx.util.Duration> obsrv2StartTime;

    private boolean bound1StopTime;
    private boolean bound2StopTime;
    private javafx.beans.value.ObservableValue<? extends javafx.util.Duration> obsrv1StopTime;
    private javafx.beans.property.Property<javafx.util.Duration> obsrv2StopTime;

    private boolean bound1Volume;
    private boolean bound2Volume;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1Volume;
    private javafx.beans.property.Property<Number> obsrv2Volume;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasAudioSpectrumInterval)
            instance.setAudioSpectrumInterval(this.valAudioSpectrumInterval);
        if (this.hasAudioSpectrumListener)
            instance.setAudioSpectrumListener(this.valAudioSpectrumListener);
        if (this.hasAudioSpectrumNumBands)
            instance.setAudioSpectrumNumBands(this.valAudioSpectrumNumBands);
        if (this.hasAudioSpectrumThreshold)
            instance.setAudioSpectrumThreshold(this.valAudioSpectrumThreshold);
        if (this.hasAutoPlay)
            instance.setAutoPlay(this.valAutoPlay);
        if (this.hasBalance)
            instance.setBalance(this.valBalance);
        if (this.hasCycleCount)
            instance.setCycleCount(this.valCycleCount);
        if (this.hasMute)
            instance.setMute(this.valMute);
        if (this.hasOnEndOfMedia)
            instance.setOnEndOfMedia(this.valOnEndOfMedia);
        if (this.hasOnError)
            instance.setOnError(this.valOnError);
        if (this.hasOnHalted)
            instance.setOnHalted(this.valOnHalted);
        if (this.hasOnMarker)
            instance.setOnMarker(this.valOnMarker);
        if (this.hasOnPaused)
            instance.setOnPaused(this.valOnPaused);
        if (this.hasOnPlaying)
            instance.setOnPlaying(this.valOnPlaying);
        if (this.hasOnReady)
            instance.setOnReady(this.valOnReady);
        if (this.hasOnRepeat)
            instance.setOnRepeat(this.valOnRepeat);
        if (this.hasOnStalled)
            instance.setOnStalled(this.valOnStalled);
        if (this.hasOnStopped)
            instance.setOnStopped(this.valOnStopped);
        if (this.hasRate)
            instance.setRate(this.valRate);
        if (this.hasStartTime)
            instance.setStartTime(this.valStartTime);
        if (this.hasStopTime)
            instance.setStopTime(this.valStopTime);
        if (this.hasVolume)
            instance.setVolume(this.valVolume);
        if (this.bound1AudioSpectrumInterval)
            instance.audioSpectrumIntervalProperty().bind(this.obsrv1AudioSpectrumInterval);
        if (this.bound2AudioSpectrumInterval)
            instance.audioSpectrumIntervalProperty().bindBidirectional(this.obsrv2AudioSpectrumInterval);
        if (this.bound1AudioSpectrumListener)
            instance.audioSpectrumListenerProperty().bind(this.obsrv1AudioSpectrumListener);
        if (this.bound2AudioSpectrumListener)
            instance.audioSpectrumListenerProperty().bindBidirectional(this.obsrv2AudioSpectrumListener);
        if (this.bound1AudioSpectrumNumBands)
            instance.audioSpectrumNumBandsProperty().bind(this.obsrv1AudioSpectrumNumBands);
        if (this.bound2AudioSpectrumNumBands)
            instance.audioSpectrumNumBandsProperty().bindBidirectional(this.obsrv2AudioSpectrumNumBands);
        if (this.bound1AudioSpectrumThreshold)
            instance.audioSpectrumThresholdProperty().bind(this.obsrv1AudioSpectrumThreshold);
        if (this.bound2AudioSpectrumThreshold)
            instance.audioSpectrumThresholdProperty().bindBidirectional(this.obsrv2AudioSpectrumThreshold);
        if (this.bound1AutoPlay)
            instance.autoPlayProperty().bind(this.obsrv1AutoPlay);
        if (this.bound2AutoPlay)
            instance.autoPlayProperty().bindBidirectional(this.obsrv2AutoPlay);
        if (this.bound1Balance)
            instance.balanceProperty().bind(this.obsrv1Balance);
        if (this.bound2Balance)
            instance.balanceProperty().bindBidirectional(this.obsrv2Balance);
        if (this.bound1CycleCount)
            instance.cycleCountProperty().bind(this.obsrv1CycleCount);
        if (this.bound2CycleCount)
            instance.cycleCountProperty().bindBidirectional(this.obsrv2CycleCount);
        if (this.bound1Mute)
            instance.muteProperty().bind(this.obsrv1Mute);
        if (this.bound2Mute)
            instance.muteProperty().bindBidirectional(this.obsrv2Mute);
        if (this.bound1OnEndOfMedia)
            instance.onEndOfMediaProperty().bind(this.obsrv1OnEndOfMedia);
        if (this.bound2OnEndOfMedia)
            instance.onEndOfMediaProperty().bindBidirectional(this.obsrv2OnEndOfMedia);
        if (this.bound1OnError)
            instance.onErrorProperty().bind(this.obsrv1OnError);
        if (this.bound2OnError)
            instance.onErrorProperty().bindBidirectional(this.obsrv2OnError);
        if (this.bound1OnHalted)
            instance.onHaltedProperty().bind(this.obsrv1OnHalted);
        if (this.bound2OnHalted)
            instance.onHaltedProperty().bindBidirectional(this.obsrv2OnHalted);
        if (this.bound1OnMarker)
            instance.onMarkerProperty().bind(this.obsrv1OnMarker);
        if (this.bound2OnMarker)
            instance.onMarkerProperty().bindBidirectional(this.obsrv2OnMarker);
        if (this.bound1OnPaused)
            instance.onPausedProperty().bind(this.obsrv1OnPaused);
        if (this.bound2OnPaused)
            instance.onPausedProperty().bindBidirectional(this.obsrv2OnPaused);
        if (this.bound1OnPlaying)
            instance.onPlayingProperty().bind(this.obsrv1OnPlaying);
        if (this.bound2OnPlaying)
            instance.onPlayingProperty().bindBidirectional(this.obsrv2OnPlaying);
        if (this.bound1OnReady)
            instance.onReadyProperty().bind(this.obsrv1OnReady);
        if (this.bound2OnReady)
            instance.onReadyProperty().bindBidirectional(this.obsrv2OnReady);
        if (this.bound1OnRepeat)
            instance.onRepeatProperty().bind(this.obsrv1OnRepeat);
        if (this.bound2OnRepeat)
            instance.onRepeatProperty().bindBidirectional(this.obsrv2OnRepeat);
        if (this.bound1OnStalled)
            instance.onStalledProperty().bind(this.obsrv1OnStalled);
        if (this.bound2OnStalled)
            instance.onStalledProperty().bindBidirectional(this.obsrv2OnStalled);
        if (this.bound1OnStopped)
            instance.onStoppedProperty().bind(this.obsrv1OnStopped);
        if (this.bound2OnStopped)
            instance.onStoppedProperty().bindBidirectional(this.obsrv2OnStopped);
        if (this.bound1Rate)
            instance.rateProperty().bind(this.obsrv1Rate);
        if (this.bound2Rate)
            instance.rateProperty().bindBidirectional(this.obsrv2Rate);
        if (this.bound1StartTime)
            instance.startTimeProperty().bind(this.obsrv1StartTime);
        if (this.bound2StartTime)
            instance.startTimeProperty().bindBidirectional(this.obsrv2StartTime);
        if (this.bound1StopTime)
            instance.stopTimeProperty().bind(this.obsrv1StopTime);
        if (this.bound2StopTime)
            instance.stopTimeProperty().bindBidirectional(this.obsrv2StopTime);
        if (this.bound1Volume)
            instance.volumeProperty().bind(this.obsrv1Volume);
        if (this.bound2Volume)
            instance.volumeProperty().bindBidirectional(this.obsrv2Volume);
    }

    /**
     * 設定屬性{@link MediaPlayer#setAudioSpectrumInterval(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B audioSpectrumInterval(double value)
    {
        this.hasAudioSpectrumInterval = true;
        this.valAudioSpectrumInterval = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#setAudioSpectrumListener(javafx.scene.media.AudioSpectrumListener)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B audioSpectrumListener(javafx.scene.media.AudioSpectrumListener value)
    {
        this.hasAudioSpectrumListener = true;
        this.valAudioSpectrumListener = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#setAudioSpectrumNumBands(int)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B audioSpectrumNumBands(int value)
    {
        this.hasAudioSpectrumNumBands = true;
        this.valAudioSpectrumNumBands = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#setAudioSpectrumThreshold(int)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B audioSpectrumThreshold(int value)
    {
        this.hasAudioSpectrumThreshold = true;
        this.valAudioSpectrumThreshold = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#setAutoPlay(boolean)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B autoPlay(boolean value)
    {
        this.hasAutoPlay = true;
        this.valAutoPlay = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#setBalance(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B balance(double value)
    {
        this.hasBalance = true;
        this.valBalance = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#setCycleCount(int)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B cycleCount(int value)
    {
        this.hasCycleCount = true;
        this.valCycleCount = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#setMute(boolean)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B mute(boolean value)
    {
        this.hasMute = true;
        this.valMute = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#setOnEndOfMedia(java.lang.Runnable)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onEndOfMedia(java.lang.Runnable value)
    {
        this.hasOnEndOfMedia = true;
        this.valOnEndOfMedia = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#setOnError(java.lang.Runnable)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onError(java.lang.Runnable value)
    {
        this.hasOnError = true;
        this.valOnError = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#setOnHalted(java.lang.Runnable)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onHalted(java.lang.Runnable value)
    {
        this.hasOnHalted = true;
        this.valOnHalted = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#setOnMarker(javafx.event.EventHandler)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onMarker(javafx.event.EventHandler<javafx.scene.media.MediaMarkerEvent> value)
    {
        this.hasOnMarker = true;
        this.valOnMarker = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#setOnPaused(java.lang.Runnable)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onPaused(java.lang.Runnable value)
    {
        this.hasOnPaused = true;
        this.valOnPaused = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#setOnPlaying(java.lang.Runnable)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onPlaying(java.lang.Runnable value)
    {
        this.hasOnPlaying = true;
        this.valOnPlaying = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#setOnReady(java.lang.Runnable)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onReady(java.lang.Runnable value)
    {
        this.hasOnReady = true;
        this.valOnReady = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#setOnRepeat(java.lang.Runnable)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onRepeat(java.lang.Runnable value)
    {
        this.hasOnRepeat = true;
        this.valOnRepeat = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#setOnStalled(java.lang.Runnable)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onStalled(java.lang.Runnable value)
    {
        this.hasOnStalled = true;
        this.valOnStalled = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#setOnStopped(java.lang.Runnable)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B onStopped(java.lang.Runnable value)
    {
        this.hasOnStopped = true;
        this.valOnStopped = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#setRate(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B rate(double value)
    {
        this.hasRate = true;
        this.valRate = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#setStartTime(javafx.util.Duration)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B startTime(javafx.util.Duration value)
    {
        this.hasStartTime = true;
        this.valStartTime = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#setStopTime(javafx.util.Duration)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B stopTime(javafx.util.Duration value)
    {
        this.hasStopTime = true;
        this.valStopTime = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#setVolume(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B volume(double value)
    {
        this.hasVolume = true;
        this.valVolume = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#audioSpectrumIntervalProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindAudioSpectrumInterval(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1AudioSpectrumInterval = true;
        this.obsrv1AudioSpectrumInterval = source;
        this.bound2AudioSpectrumInterval = false;
        this.obsrv2AudioSpectrumInterval = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#audioSpectrumIntervalProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalAudioSpectrumInterval(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1AudioSpectrumInterval = false;
        this.obsrv1AudioSpectrumInterval = null;
        this.bound2AudioSpectrumInterval = true;
        this.obsrv2AudioSpectrumInterval = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#audioSpectrumListenerProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindAudioSpectrumListener(javafx.beans.value.ObservableValue<? extends javafx.scene.media.AudioSpectrumListener> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1AudioSpectrumListener = true;
        this.obsrv1AudioSpectrumListener = source;
        this.bound2AudioSpectrumListener = false;
        this.obsrv2AudioSpectrumListener = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#audioSpectrumListenerProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalAudioSpectrumListener(javafx.beans.property.Property<javafx.scene.media.AudioSpectrumListener> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1AudioSpectrumListener = false;
        this.obsrv1AudioSpectrumListener = null;
        this.bound2AudioSpectrumListener = true;
        this.obsrv2AudioSpectrumListener = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#audioSpectrumNumBandsProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindAudioSpectrumNumBands(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1AudioSpectrumNumBands = true;
        this.obsrv1AudioSpectrumNumBands = source;
        this.bound2AudioSpectrumNumBands = false;
        this.obsrv2AudioSpectrumNumBands = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#audioSpectrumNumBandsProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalAudioSpectrumNumBands(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1AudioSpectrumNumBands = false;
        this.obsrv1AudioSpectrumNumBands = null;
        this.bound2AudioSpectrumNumBands = true;
        this.obsrv2AudioSpectrumNumBands = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#audioSpectrumThresholdProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindAudioSpectrumThreshold(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1AudioSpectrumThreshold = true;
        this.obsrv1AudioSpectrumThreshold = source;
        this.bound2AudioSpectrumThreshold = false;
        this.obsrv2AudioSpectrumThreshold = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#audioSpectrumThresholdProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalAudioSpectrumThreshold(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1AudioSpectrumThreshold = false;
        this.obsrv1AudioSpectrumThreshold = null;
        this.bound2AudioSpectrumThreshold = true;
        this.obsrv2AudioSpectrumThreshold = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#autoPlayProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindAutoPlay(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1AutoPlay = true;
        this.obsrv1AutoPlay = source;
        this.bound2AutoPlay = false;
        this.obsrv2AutoPlay = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#autoPlayProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalAutoPlay(javafx.beans.property.Property<Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1AutoPlay = false;
        this.obsrv1AutoPlay = null;
        this.bound2AutoPlay = true;
        this.obsrv2AutoPlay = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#balanceProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBalance(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Balance = true;
        this.obsrv1Balance = source;
        this.bound2Balance = false;
        this.obsrv2Balance = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#balanceProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalBalance(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Balance = false;
        this.obsrv1Balance = null;
        this.bound2Balance = true;
        this.obsrv2Balance = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#cycleCountProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindCycleCount(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1CycleCount = true;
        this.obsrv1CycleCount = source;
        this.bound2CycleCount = false;
        this.obsrv2CycleCount = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#cycleCountProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalCycleCount(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1CycleCount = false;
        this.obsrv1CycleCount = null;
        this.bound2CycleCount = true;
        this.obsrv2CycleCount = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#muteProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMute(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Mute = true;
        this.obsrv1Mute = source;
        this.bound2Mute = false;
        this.obsrv2Mute = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#muteProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalMute(javafx.beans.property.Property<Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Mute = false;
        this.obsrv1Mute = null;
        this.bound2Mute = true;
        this.obsrv2Mute = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#onEndOfMediaProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnEndOfMedia(javafx.beans.value.ObservableValue<? extends java.lang.Runnable> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnEndOfMedia = true;
        this.obsrv1OnEndOfMedia = source;
        this.bound2OnEndOfMedia = false;
        this.obsrv2OnEndOfMedia = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#onEndOfMediaProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOnEndOfMedia(javafx.beans.property.Property<java.lang.Runnable> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnEndOfMedia = false;
        this.obsrv1OnEndOfMedia = null;
        this.bound2OnEndOfMedia = true;
        this.obsrv2OnEndOfMedia = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#onErrorProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnError(javafx.beans.value.ObservableValue<? extends java.lang.Runnable> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnError = true;
        this.obsrv1OnError = source;
        this.bound2OnError = false;
        this.obsrv2OnError = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#onErrorProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOnError(javafx.beans.property.Property<java.lang.Runnable> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnError = false;
        this.obsrv1OnError = null;
        this.bound2OnError = true;
        this.obsrv2OnError = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#onHaltedProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnHalted(javafx.beans.value.ObservableValue<? extends java.lang.Runnable> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnHalted = true;
        this.obsrv1OnHalted = source;
        this.bound2OnHalted = false;
        this.obsrv2OnHalted = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#onHaltedProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOnHalted(javafx.beans.property.Property<java.lang.Runnable> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnHalted = false;
        this.obsrv1OnHalted = null;
        this.bound2OnHalted = true;
        this.obsrv2OnHalted = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#onMarkerProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnMarker(javafx.beans.value.ObservableValue<? extends javafx.event.EventHandler<javafx.scene.media.MediaMarkerEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnMarker = true;
        this.obsrv1OnMarker = source;
        this.bound2OnMarker = false;
        this.obsrv2OnMarker = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#onMarkerProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOnMarker(javafx.beans.property.Property<javafx.event.EventHandler<javafx.scene.media.MediaMarkerEvent>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnMarker = false;
        this.obsrv1OnMarker = null;
        this.bound2OnMarker = true;
        this.obsrv2OnMarker = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#onPausedProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnPaused(javafx.beans.value.ObservableValue<? extends java.lang.Runnable> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnPaused = true;
        this.obsrv1OnPaused = source;
        this.bound2OnPaused = false;
        this.obsrv2OnPaused = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#onPausedProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOnPaused(javafx.beans.property.Property<java.lang.Runnable> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnPaused = false;
        this.obsrv1OnPaused = null;
        this.bound2OnPaused = true;
        this.obsrv2OnPaused = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#onPlayingProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnPlaying(javafx.beans.value.ObservableValue<? extends java.lang.Runnable> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnPlaying = true;
        this.obsrv1OnPlaying = source;
        this.bound2OnPlaying = false;
        this.obsrv2OnPlaying = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#onPlayingProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOnPlaying(javafx.beans.property.Property<java.lang.Runnable> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnPlaying = false;
        this.obsrv1OnPlaying = null;
        this.bound2OnPlaying = true;
        this.obsrv2OnPlaying = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#onReadyProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnReady(javafx.beans.value.ObservableValue<? extends java.lang.Runnable> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnReady = true;
        this.obsrv1OnReady = source;
        this.bound2OnReady = false;
        this.obsrv2OnReady = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#onReadyProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOnReady(javafx.beans.property.Property<java.lang.Runnable> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnReady = false;
        this.obsrv1OnReady = null;
        this.bound2OnReady = true;
        this.obsrv2OnReady = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#onRepeatProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnRepeat(javafx.beans.value.ObservableValue<? extends java.lang.Runnable> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnRepeat = true;
        this.obsrv1OnRepeat = source;
        this.bound2OnRepeat = false;
        this.obsrv2OnRepeat = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#onRepeatProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOnRepeat(javafx.beans.property.Property<java.lang.Runnable> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnRepeat = false;
        this.obsrv1OnRepeat = null;
        this.bound2OnRepeat = true;
        this.obsrv2OnRepeat = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#onStalledProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnStalled(javafx.beans.value.ObservableValue<? extends java.lang.Runnable> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnStalled = true;
        this.obsrv1OnStalled = source;
        this.bound2OnStalled = false;
        this.obsrv2OnStalled = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#onStalledProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOnStalled(javafx.beans.property.Property<java.lang.Runnable> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnStalled = false;
        this.obsrv1OnStalled = null;
        this.bound2OnStalled = true;
        this.obsrv2OnStalled = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#onStoppedProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOnStopped(javafx.beans.value.ObservableValue<? extends java.lang.Runnable> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnStopped = true;
        this.obsrv1OnStopped = source;
        this.bound2OnStopped = false;
        this.obsrv2OnStopped = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#onStoppedProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOnStopped(javafx.beans.property.Property<java.lang.Runnable> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1OnStopped = false;
        this.obsrv1OnStopped = null;
        this.bound2OnStopped = true;
        this.obsrv2OnStopped = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#rateProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindRate(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Rate = true;
        this.obsrv1Rate = source;
        this.bound2Rate = false;
        this.obsrv2Rate = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#rateProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalRate(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Rate = false;
        this.obsrv1Rate = null;
        this.bound2Rate = true;
        this.obsrv2Rate = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#startTimeProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindStartTime(javafx.beans.value.ObservableValue<? extends javafx.util.Duration> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1StartTime = true;
        this.obsrv1StartTime = source;
        this.bound2StartTime = false;
        this.obsrv2StartTime = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#startTimeProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalStartTime(javafx.beans.property.Property<javafx.util.Duration> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1StartTime = false;
        this.obsrv1StartTime = null;
        this.bound2StartTime = true;
        this.obsrv2StartTime = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#stopTimeProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindStopTime(javafx.beans.value.ObservableValue<? extends javafx.util.Duration> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1StopTime = true;
        this.obsrv1StopTime = source;
        this.bound2StopTime = false;
        this.obsrv2StopTime = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#stopTimeProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalStopTime(javafx.beans.property.Property<javafx.util.Duration> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1StopTime = false;
        this.obsrv1StopTime = null;
        this.bound2StopTime = true;
        this.obsrv2StopTime = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#volumeProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindVolume(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Volume = true;
        this.obsrv1Volume = source;
        this.bound2Volume = false;
        this.obsrv2Volume = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MediaPlayer#volumeProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalVolume(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Volume = false;
        this.obsrv1Volume = null;
        this.bound2Volume = true;
        this.obsrv2Volume = source;
        return (B) this;
    }

    /**
     * 建構{@link MediaPlayer}物件。
     *
     * @return 新的{@link MediaPlayer}物件實體
     */
    @SuppressWarnings("unchecked")
    public MediaPlayer build(javafx.scene.media.Media arg0)
    {
        MediaPlayer instance = new MediaPlayer(arg0);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
