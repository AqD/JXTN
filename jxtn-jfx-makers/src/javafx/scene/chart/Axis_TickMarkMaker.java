// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.chart;

/**
 * {@link Axis.TickMark}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link Axis.TickMark})
 * @param <B> 建構器本身的型態(需繼承{@link Axis.TickMarkMaker})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class Axis_TickMarkMaker<T extends java.lang.Object, Z extends Axis.TickMark<T>, B extends Axis_TickMarkMaker<T, Z, B>>
        extends jxtn.jfx.makers.AbstractMaker<Z, B>
        implements Axis_TickMarkMakerExt<T, Z, B>
{

    private boolean hasLabel;
    private java.lang.String valLabel;

    private boolean hasPosition;
    private double valPosition;

    private boolean hasTextVisible;
    private boolean valTextVisible;

    private boolean hasValue;
    private T valValue;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasLabel)
            instance.setLabel(this.valLabel);
        if (this.hasPosition)
            instance.setPosition(this.valPosition);
        if (this.hasTextVisible)
            instance.setTextVisible(this.valTextVisible);
        if (this.hasValue)
            instance.setValue(this.valValue);
    }

    /**
     * 設定屬性{@link Axis.TickMark#setLabel(java.lang.String)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B label(java.lang.String value)
    {
        this.hasLabel = true;
        this.valLabel = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Axis.TickMark#setPosition(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B position(double value)
    {
        this.hasPosition = true;
        this.valPosition = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Axis.TickMark#setTextVisible(boolean)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B textVisible(boolean value)
    {
        this.hasTextVisible = true;
        this.valTextVisible = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Axis.TickMark#setValue(T)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B value(T value)
    {
        this.hasValue = true;
        this.valValue = value;
        return (B) this;
    }

    /**
     * 建構{@link Axis.TickMark}物件。
     *
     * @return 新的{@link Axis.TickMark}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public Axis.TickMark<T> build()
    {
        Axis.TickMark<T> instance = new Axis.TickMark<T>();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
