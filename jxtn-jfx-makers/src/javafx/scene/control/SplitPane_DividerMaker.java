// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link SplitPane.Divider}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link SplitPane.Divider})
 * @param <B> 建構器本身的型態(需繼承{@link SplitPane.DividerMaker})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class SplitPane_DividerMaker<Z extends SplitPane.Divider, B extends SplitPane_DividerMaker<Z, B>>
        extends jxtn.jfx.makers.AbstractMaker<Z, B>
        implements SplitPane_DividerMakerExt<Z, B>
{

    private boolean hasPosition;
    private double valPosition;

    private boolean bound1Position;
    private boolean bound2Position;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1Position;
    private javafx.beans.property.Property<Number> obsrv2Position;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasPosition)
            instance.setPosition(this.valPosition);
        if (this.bound1Position)
            instance.positionProperty().bind(this.obsrv1Position);
        if (this.bound2Position)
            instance.positionProperty().bindBidirectional(this.obsrv2Position);
    }

    /**
     * 設定屬性{@link SplitPane.Divider#setPosition(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B position(double value)
    {
        this.hasPosition = true;
        this.valPosition = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link SplitPane.Divider#positionProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindPosition(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Position = true;
        this.obsrv1Position = source;
        this.bound2Position = false;
        this.obsrv2Position = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link SplitPane.Divider#positionProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalPosition(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Position = false;
        this.obsrv1Position = null;
        this.bound2Position = true;
        this.obsrv2Position = source;
        return (B) this;
    }

    /**
     * 建構{@link SplitPane.Divider}物件。
     *
     * @return 新的{@link SplitPane.Divider}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public SplitPane.Divider build()
    {
        SplitPane.Divider instance = new SplitPane.Divider();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
