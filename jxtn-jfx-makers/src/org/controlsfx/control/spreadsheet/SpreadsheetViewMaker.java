// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package org.controlsfx.control.spreadsheet;

/**
 * {@link SpreadsheetView}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version controlsfx-8.40.14.jar
 * @param <Z> 要建構的物件型態(需繼承{@link SpreadsheetView})
 * @param <B> 建構器本身的型態(需繼承{@link SpreadsheetViewMaker})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class SpreadsheetViewMaker<Z extends SpreadsheetView, B extends SpreadsheetViewMaker<Z, B>>
        extends javafx.scene.control.ControlMaker<Z, B>
        implements SpreadsheetViewMakerExt<Z, B>
{

    private boolean hasColumns;
    private java.util.Collection<org.controlsfx.control.spreadsheet.SpreadsheetColumn> valColumns;

    private boolean hasComparator;
    private java.util.Comparator<javafx.collections.ObservableList<org.controlsfx.control.spreadsheet.SpreadsheetCell>> valComparator;

    private boolean hasEditable;
    private boolean valEditable;

    private boolean hasFilteredRow;
    private java.lang.Integer valFilteredRow;

    private boolean hasFixedColumns;
    private java.util.Collection<org.controlsfx.control.spreadsheet.SpreadsheetColumn> valFixedColumns;

    private boolean hasFixedRows;
    private java.util.Collection<java.lang.Integer> valFixedRows;

    private boolean hasFixingColumnsAllowed;
    private boolean valFixingColumnsAllowed;

    private boolean hasFixingRowsAllowed;
    private boolean valFixingRowsAllowed;

    private boolean hasGrid;
    private org.controlsfx.control.spreadsheet.Grid valGrid;

    private boolean hasHBarValue;
    private double valHBarValue;

    private boolean hasHiddenColumns;
    private java.util.BitSet valHiddenColumns;

    private boolean hasHiddenRows;
    private java.util.BitSet valHiddenRows;

    private boolean hasItems;
    private java.util.Collection<javafx.collections.ObservableList<org.controlsfx.control.spreadsheet.SpreadsheetCell>> valItems;

    private boolean hasPlaceholder;
    private javafx.scene.Node valPlaceholder;

    private boolean hasRowHeaderWidth;
    private double valRowHeaderWidth;

    private boolean hasShowColumnHeader;
    private boolean valShowColumnHeader;

    private boolean hasShowRowHeader;
    private boolean valShowRowHeader;

    private boolean hasVBarValue;
    private double valVBarValue;

    private boolean hasZoomFactor;
    private java.lang.Double valZoomFactor;

    private boolean bound1Comparator;
    private boolean bound2Comparator;
    private javafx.beans.value.ObservableValue<? extends java.util.Comparator<? super javafx.collections.ObservableList<org.controlsfx.control.spreadsheet.SpreadsheetCell>>> obsrv1Comparator;
    private javafx.beans.property.Property<java.util.Comparator<? super javafx.collections.ObservableList<org.controlsfx.control.spreadsheet.SpreadsheetCell>>> obsrv2Comparator;

    private boolean bound1Editable;
    private boolean bound2Editable;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrv1Editable;
    private javafx.beans.property.Property<Boolean> obsrv2Editable;

    private boolean bound1HiddenColumns;
    private boolean bound2HiddenColumns;
    private javafx.beans.value.ObservableValue<? extends java.util.BitSet> obsrv1HiddenColumns;
    private javafx.beans.property.Property<java.util.BitSet> obsrv2HiddenColumns;

    private boolean bound1HiddenRows;
    private boolean bound2HiddenRows;
    private javafx.beans.value.ObservableValue<? extends java.util.BitSet> obsrv1HiddenRows;
    private javafx.beans.property.Property<java.util.BitSet> obsrv2HiddenRows;

    private boolean bound1Placeholder;
    private boolean bound2Placeholder;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrv1Placeholder;
    private javafx.beans.property.Property<javafx.scene.Node> obsrv2Placeholder;

    private boolean bound1RowHeaderWidth;
    private boolean bound2RowHeaderWidth;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1RowHeaderWidth;
    private javafx.beans.property.Property<Number> obsrv2RowHeaderWidth;

    private boolean bound1ShowColumnHeader;
    private boolean bound2ShowColumnHeader;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrv1ShowColumnHeader;
    private javafx.beans.property.Property<Boolean> obsrv2ShowColumnHeader;

    private boolean bound1ShowRowHeader;
    private boolean bound2ShowRowHeader;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrv1ShowRowHeader;
    private javafx.beans.property.Property<Boolean> obsrv2ShowRowHeader;

    private boolean bound1ZoomFactor;
    private boolean bound2ZoomFactor;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1ZoomFactor;
    private javafx.beans.property.Property<Number> obsrv2ZoomFactor;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasColumns)
            instance.getColumns().addAll(this.valColumns);
        if (this.hasComparator)
            instance.setComparator(this.valComparator);
        if (this.hasEditable)
            instance.setEditable(this.valEditable);
        if (this.hasFilteredRow)
            instance.setFilteredRow(this.valFilteredRow);
        if (this.hasFixedColumns)
            instance.getFixedColumns().addAll(this.valFixedColumns);
        if (this.hasFixedRows)
            instance.getFixedRows().addAll(this.valFixedRows);
        if (this.hasFixingColumnsAllowed)
            instance.setFixingColumnsAllowed(this.valFixingColumnsAllowed);
        if (this.hasFixingRowsAllowed)
            instance.setFixingRowsAllowed(this.valFixingRowsAllowed);
        if (this.hasGrid)
            instance.setGrid(this.valGrid);
        if (this.hasHBarValue)
            instance.setHBarValue(this.valHBarValue);
        if (this.hasHiddenColumns)
            instance.setHiddenColumns(this.valHiddenColumns);
        if (this.hasHiddenRows)
            instance.setHiddenRows(this.valHiddenRows);
        if (this.hasItems)
            instance.getItems().addAll(this.valItems);
        if (this.hasPlaceholder)
            instance.setPlaceholder(this.valPlaceholder);
        if (this.hasRowHeaderWidth)
            instance.setRowHeaderWidth(this.valRowHeaderWidth);
        if (this.hasShowColumnHeader)
            instance.setShowColumnHeader(this.valShowColumnHeader);
        if (this.hasShowRowHeader)
            instance.setShowRowHeader(this.valShowRowHeader);
        if (this.hasVBarValue)
            instance.setVBarValue(this.valVBarValue);
        if (this.hasZoomFactor)
            instance.setZoomFactor(this.valZoomFactor);
        if (this.bound1Comparator)
            instance.comparatorProperty().bind(this.obsrv1Comparator);
        if (this.bound2Comparator)
            instance.comparatorProperty().bindBidirectional(this.obsrv2Comparator);
        if (this.bound1Editable)
            instance.editableProperty().bind(this.obsrv1Editable);
        if (this.bound2Editable)
            instance.editableProperty().bindBidirectional(this.obsrv2Editable);
        if (this.bound1HiddenColumns)
            instance.hiddenColumnsProperty().bind(this.obsrv1HiddenColumns);
        if (this.bound2HiddenColumns)
            instance.hiddenColumnsProperty().bindBidirectional(this.obsrv2HiddenColumns);
        if (this.bound1HiddenRows)
            instance.hiddenRowsProperty().bind(this.obsrv1HiddenRows);
        if (this.bound2HiddenRows)
            instance.hiddenRowsProperty().bindBidirectional(this.obsrv2HiddenRows);
        if (this.bound1Placeholder)
            instance.placeholderProperty().bind(this.obsrv1Placeholder);
        if (this.bound2Placeholder)
            instance.placeholderProperty().bindBidirectional(this.obsrv2Placeholder);
        if (this.bound1RowHeaderWidth)
            instance.rowHeaderWidthProperty().bind(this.obsrv1RowHeaderWidth);
        if (this.bound2RowHeaderWidth)
            instance.rowHeaderWidthProperty().bindBidirectional(this.obsrv2RowHeaderWidth);
        if (this.bound1ShowColumnHeader)
            instance.showColumnHeaderProperty().bind(this.obsrv1ShowColumnHeader);
        if (this.bound2ShowColumnHeader)
            instance.showColumnHeaderProperty().bindBidirectional(this.obsrv2ShowColumnHeader);
        if (this.bound1ShowRowHeader)
            instance.showRowHeaderProperty().bind(this.obsrv1ShowRowHeader);
        if (this.bound2ShowRowHeader)
            instance.showRowHeaderProperty().bindBidirectional(this.obsrv2ShowRowHeader);
        if (this.bound1ZoomFactor)
            instance.zoomFactorProperty().bind(this.obsrv1ZoomFactor);
        if (this.bound2ZoomFactor)
            instance.zoomFactorProperty().bindBidirectional(this.obsrv2ZoomFactor);
    }

    /**
     * 設定集合屬性{@link SpreadsheetView#getColumns}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     * @deprecated 屬性值並非{@link javafx.collections.ObservableList}
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    public final B columns(java.util.Collection<? extends org.controlsfx.control.spreadsheet.SpreadsheetColumn> value)
    {
        this.hasColumns = true;
        this.valColumns = (java.util.Collection<org.controlsfx.control.spreadsheet.SpreadsheetColumn>) value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link SpreadsheetView#getColumns}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B columns(org.controlsfx.control.spreadsheet.SpreadsheetColumn... value)
    {
        this.hasColumns = true;
        this.valColumns = java.util.Arrays.asList(value);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link SpreadsheetView#getColumns}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B columnsAdd(java.util.Collection<? extends org.controlsfx.control.spreadsheet.SpreadsheetColumn> value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasColumns = true;
        if (this.valColumns == null)
            this.valColumns = new java.util.ArrayList<>(value.size());
        this.valColumns.addAll(value);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link SpreadsheetView#getColumns}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B columnsAdd(org.controlsfx.control.spreadsheet.SpreadsheetColumn... value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasColumns = true;
        if (this.valColumns == null)
            this.valColumns = new java.util.ArrayList<>(value.length);
        this.valColumns.addAll(java.util.Arrays.asList(value));
        return (B) this;
    }

    /**
     * 增加集合屬性{@link SpreadsheetView#getColumns}的內容，排除null項目。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B columnsAddNonNull(java.util.Collection<? extends org.controlsfx.control.spreadsheet.SpreadsheetColumn> value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasColumns = true;
        if (this.valColumns == null)
            this.valColumns = new java.util.ArrayList<>(value.size());
        for (org.controlsfx.control.spreadsheet.SpreadsheetColumn i : value)
            if (i != null)
                this.valColumns.add(i);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link SpreadsheetView#getColumns}的內容，排除null項目。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B columnsAddNonNull(org.controlsfx.control.spreadsheet.SpreadsheetColumn... value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasColumns = true;
        if (this.valColumns == null)
            this.valColumns = new java.util.ArrayList<>(value.length);
        for (org.controlsfx.control.spreadsheet.SpreadsheetColumn i : value)
            if (i != null)
                this.valColumns.add(i);
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#setComparator(java.util.Comparator)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B comparator(java.util.Comparator<javafx.collections.ObservableList<org.controlsfx.control.spreadsheet.SpreadsheetCell>> value)
    {
        this.hasComparator = true;
        this.valComparator = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#setEditable(boolean)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B editable(boolean value)
    {
        this.hasEditable = true;
        this.valEditable = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#setFilteredRow(java.lang.Integer)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B filteredRow(java.lang.Integer value)
    {
        this.hasFilteredRow = true;
        this.valFilteredRow = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link SpreadsheetView#getFixedColumns}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     * @deprecated 屬性值並非{@link javafx.collections.ObservableList}
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    public final B fixedColumns(java.util.Collection<? extends org.controlsfx.control.spreadsheet.SpreadsheetColumn> value)
    {
        this.hasFixedColumns = true;
        this.valFixedColumns = (java.util.Collection<org.controlsfx.control.spreadsheet.SpreadsheetColumn>) value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link SpreadsheetView#getFixedColumns}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B fixedColumns(org.controlsfx.control.spreadsheet.SpreadsheetColumn... value)
    {
        this.hasFixedColumns = true;
        this.valFixedColumns = java.util.Arrays.asList(value);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link SpreadsheetView#getFixedColumns}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B fixedColumnsAdd(java.util.Collection<? extends org.controlsfx.control.spreadsheet.SpreadsheetColumn> value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasFixedColumns = true;
        if (this.valFixedColumns == null)
            this.valFixedColumns = new java.util.ArrayList<>(value.size());
        this.valFixedColumns.addAll(value);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link SpreadsheetView#getFixedColumns}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B fixedColumnsAdd(org.controlsfx.control.spreadsheet.SpreadsheetColumn... value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasFixedColumns = true;
        if (this.valFixedColumns == null)
            this.valFixedColumns = new java.util.ArrayList<>(value.length);
        this.valFixedColumns.addAll(java.util.Arrays.asList(value));
        return (B) this;
    }

    /**
     * 增加集合屬性{@link SpreadsheetView#getFixedColumns}的內容，排除null項目。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B fixedColumnsAddNonNull(java.util.Collection<? extends org.controlsfx.control.spreadsheet.SpreadsheetColumn> value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasFixedColumns = true;
        if (this.valFixedColumns == null)
            this.valFixedColumns = new java.util.ArrayList<>(value.size());
        for (org.controlsfx.control.spreadsheet.SpreadsheetColumn i : value)
            if (i != null)
                this.valFixedColumns.add(i);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link SpreadsheetView#getFixedColumns}的內容，排除null項目。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B fixedColumnsAddNonNull(org.controlsfx.control.spreadsheet.SpreadsheetColumn... value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasFixedColumns = true;
        if (this.valFixedColumns == null)
            this.valFixedColumns = new java.util.ArrayList<>(value.length);
        for (org.controlsfx.control.spreadsheet.SpreadsheetColumn i : value)
            if (i != null)
                this.valFixedColumns.add(i);
        return (B) this;
    }

    /**
     * 設定集合屬性{@link SpreadsheetView#getFixedRows}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     * @deprecated 屬性值並非{@link javafx.collections.ObservableList}
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    public final B fixedRows(java.util.Collection<? extends java.lang.Integer> value)
    {
        this.hasFixedRows = true;
        this.valFixedRows = (java.util.Collection<java.lang.Integer>) value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link SpreadsheetView#getFixedRows}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B fixedRows(java.lang.Integer... value)
    {
        this.hasFixedRows = true;
        this.valFixedRows = java.util.Arrays.asList(value);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link SpreadsheetView#getFixedRows}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B fixedRowsAdd(java.util.Collection<? extends java.lang.Integer> value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasFixedRows = true;
        if (this.valFixedRows == null)
            this.valFixedRows = new java.util.ArrayList<>(value.size());
        this.valFixedRows.addAll(value);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link SpreadsheetView#getFixedRows}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B fixedRowsAdd(java.lang.Integer... value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasFixedRows = true;
        if (this.valFixedRows == null)
            this.valFixedRows = new java.util.ArrayList<>(value.length);
        this.valFixedRows.addAll(java.util.Arrays.asList(value));
        return (B) this;
    }

    /**
     * 增加集合屬性{@link SpreadsheetView#getFixedRows}的內容，排除null項目。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B fixedRowsAddNonNull(java.util.Collection<? extends java.lang.Integer> value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasFixedRows = true;
        if (this.valFixedRows == null)
            this.valFixedRows = new java.util.ArrayList<>(value.size());
        for (java.lang.Integer i : value)
            if (i != null)
                this.valFixedRows.add(i);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link SpreadsheetView#getFixedRows}的內容，排除null項目。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B fixedRowsAddNonNull(java.lang.Integer... value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasFixedRows = true;
        if (this.valFixedRows == null)
            this.valFixedRows = new java.util.ArrayList<>(value.length);
        for (java.lang.Integer i : value)
            if (i != null)
                this.valFixedRows.add(i);
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#setFixingColumnsAllowed(boolean)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B fixingColumnsAllowed(boolean value)
    {
        this.hasFixingColumnsAllowed = true;
        this.valFixingColumnsAllowed = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#setFixingRowsAllowed(boolean)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B fixingRowsAllowed(boolean value)
    {
        this.hasFixingRowsAllowed = true;
        this.valFixingRowsAllowed = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#setGrid(org.controlsfx.control.spreadsheet.Grid)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B grid(org.controlsfx.control.spreadsheet.Grid value)
    {
        this.hasGrid = true;
        this.valGrid = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#setHBarValue(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B hBarValue(double value)
    {
        this.hasHBarValue = true;
        this.valHBarValue = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#setHiddenColumns(java.util.BitSet)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B hiddenColumns(java.util.BitSet value)
    {
        this.hasHiddenColumns = true;
        this.valHiddenColumns = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#setHiddenRows(java.util.BitSet)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B hiddenRows(java.util.BitSet value)
    {
        this.hasHiddenRows = true;
        this.valHiddenRows = value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link SpreadsheetView#getItems}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     * @deprecated 屬性值並非{@link javafx.collections.ObservableList}
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    public final B items(java.util.Collection<? extends javafx.collections.ObservableList<org.controlsfx.control.spreadsheet.SpreadsheetCell>> value)
    {
        this.hasItems = true;
        this.valItems = (java.util.Collection<javafx.collections.ObservableList<org.controlsfx.control.spreadsheet.SpreadsheetCell>>) value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link SpreadsheetView#getItems}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B items(javafx.collections.ObservableList<org.controlsfx.control.spreadsheet.SpreadsheetCell>... value)
    {
        this.hasItems = true;
        this.valItems = java.util.Arrays.asList(value);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link SpreadsheetView#getItems}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B itemsAdd(java.util.Collection<? extends javafx.collections.ObservableList<org.controlsfx.control.spreadsheet.SpreadsheetCell>> value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasItems = true;
        if (this.valItems == null)
            this.valItems = new java.util.ArrayList<>(value.size());
        this.valItems.addAll(value);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link SpreadsheetView#getItems}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B itemsAdd(javafx.collections.ObservableList<org.controlsfx.control.spreadsheet.SpreadsheetCell>... value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasItems = true;
        if (this.valItems == null)
            this.valItems = new java.util.ArrayList<>(value.length);
        this.valItems.addAll(java.util.Arrays.asList(value));
        return (B) this;
    }

    /**
     * 增加集合屬性{@link SpreadsheetView#getItems}的內容，排除null項目。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B itemsAddNonNull(java.util.Collection<? extends javafx.collections.ObservableList<org.controlsfx.control.spreadsheet.SpreadsheetCell>> value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasItems = true;
        if (this.valItems == null)
            this.valItems = new java.util.ArrayList<>(value.size());
        for (javafx.collections.ObservableList<org.controlsfx.control.spreadsheet.SpreadsheetCell> i : value)
            if (i != null)
                this.valItems.add(i);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link SpreadsheetView#getItems}的內容，排除null項目。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B itemsAddNonNull(javafx.collections.ObservableList<org.controlsfx.control.spreadsheet.SpreadsheetCell>... value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasItems = true;
        if (this.valItems == null)
            this.valItems = new java.util.ArrayList<>(value.length);
        for (javafx.collections.ObservableList<org.controlsfx.control.spreadsheet.SpreadsheetCell> i : value)
            if (i != null)
                this.valItems.add(i);
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#setPlaceholder(javafx.scene.Node)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B placeholder(javafx.scene.Node value)
    {
        this.hasPlaceholder = true;
        this.valPlaceholder = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#setRowHeaderWidth(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B rowHeaderWidth(double value)
    {
        this.hasRowHeaderWidth = true;
        this.valRowHeaderWidth = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#setShowColumnHeader(boolean)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B showColumnHeader(boolean value)
    {
        this.hasShowColumnHeader = true;
        this.valShowColumnHeader = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#setShowRowHeader(boolean)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B showRowHeader(boolean value)
    {
        this.hasShowRowHeader = true;
        this.valShowRowHeader = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#setVBarValue(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B vBarValue(double value)
    {
        this.hasVBarValue = true;
        this.valVBarValue = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#setZoomFactor(java.lang.Double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B zoomFactor(java.lang.Double value)
    {
        this.hasZoomFactor = true;
        this.valZoomFactor = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#comparatorProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindComparator(javafx.beans.value.ObservableValue<? extends java.util.Comparator<? super javafx.collections.ObservableList<org.controlsfx.control.spreadsheet.SpreadsheetCell>>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Comparator = true;
        this.obsrv1Comparator = source;
        this.bound2Comparator = false;
        this.obsrv2Comparator = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#comparatorProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalComparator(javafx.beans.property.Property<java.util.Comparator<? super javafx.collections.ObservableList<org.controlsfx.control.spreadsheet.SpreadsheetCell>>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Comparator = false;
        this.obsrv1Comparator = null;
        this.bound2Comparator = true;
        this.obsrv2Comparator = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#editableProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindEditable(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Editable = true;
        this.obsrv1Editable = source;
        this.bound2Editable = false;
        this.obsrv2Editable = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#editableProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalEditable(javafx.beans.property.Property<Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Editable = false;
        this.obsrv1Editable = null;
        this.bound2Editable = true;
        this.obsrv2Editable = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#hiddenColumnsProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindHiddenColumns(javafx.beans.value.ObservableValue<? extends java.util.BitSet> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1HiddenColumns = true;
        this.obsrv1HiddenColumns = source;
        this.bound2HiddenColumns = false;
        this.obsrv2HiddenColumns = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#hiddenColumnsProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalHiddenColumns(javafx.beans.property.Property<java.util.BitSet> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1HiddenColumns = false;
        this.obsrv1HiddenColumns = null;
        this.bound2HiddenColumns = true;
        this.obsrv2HiddenColumns = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#hiddenRowsProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindHiddenRows(javafx.beans.value.ObservableValue<? extends java.util.BitSet> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1HiddenRows = true;
        this.obsrv1HiddenRows = source;
        this.bound2HiddenRows = false;
        this.obsrv2HiddenRows = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#hiddenRowsProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalHiddenRows(javafx.beans.property.Property<java.util.BitSet> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1HiddenRows = false;
        this.obsrv1HiddenRows = null;
        this.bound2HiddenRows = true;
        this.obsrv2HiddenRows = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#placeholderProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindPlaceholder(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Placeholder = true;
        this.obsrv1Placeholder = source;
        this.bound2Placeholder = false;
        this.obsrv2Placeholder = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#placeholderProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalPlaceholder(javafx.beans.property.Property<javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Placeholder = false;
        this.obsrv1Placeholder = null;
        this.bound2Placeholder = true;
        this.obsrv2Placeholder = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#rowHeaderWidthProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindRowHeaderWidth(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1RowHeaderWidth = true;
        this.obsrv1RowHeaderWidth = source;
        this.bound2RowHeaderWidth = false;
        this.obsrv2RowHeaderWidth = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#rowHeaderWidthProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalRowHeaderWidth(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1RowHeaderWidth = false;
        this.obsrv1RowHeaderWidth = null;
        this.bound2RowHeaderWidth = true;
        this.obsrv2RowHeaderWidth = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#showColumnHeaderProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindShowColumnHeader(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ShowColumnHeader = true;
        this.obsrv1ShowColumnHeader = source;
        this.bound2ShowColumnHeader = false;
        this.obsrv2ShowColumnHeader = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#showColumnHeaderProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalShowColumnHeader(javafx.beans.property.Property<Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ShowColumnHeader = false;
        this.obsrv1ShowColumnHeader = null;
        this.bound2ShowColumnHeader = true;
        this.obsrv2ShowColumnHeader = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#showRowHeaderProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindShowRowHeader(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ShowRowHeader = true;
        this.obsrv1ShowRowHeader = source;
        this.bound2ShowRowHeader = false;
        this.obsrv2ShowRowHeader = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#showRowHeaderProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalShowRowHeader(javafx.beans.property.Property<Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ShowRowHeader = false;
        this.obsrv1ShowRowHeader = null;
        this.bound2ShowRowHeader = true;
        this.obsrv2ShowRowHeader = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#zoomFactorProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindZoomFactor(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ZoomFactor = true;
        this.obsrv1ZoomFactor = source;
        this.bound2ZoomFactor = false;
        this.obsrv2ZoomFactor = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link SpreadsheetView#zoomFactorProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalZoomFactor(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ZoomFactor = false;
        this.obsrv1ZoomFactor = null;
        this.bound2ZoomFactor = true;
        this.obsrv2ZoomFactor = source;
        return (B) this;
    }

    /**
     * 建構{@link SpreadsheetView}物件。
     *
     * @return 新的{@link SpreadsheetView}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public SpreadsheetView build()
    {
        SpreadsheetView instance = new SpreadsheetView();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link SpreadsheetView}物件。
     *
     * @return 新的{@link SpreadsheetView}物件實體
     */
    @SuppressWarnings("unchecked")
    public SpreadsheetView build(org.controlsfx.control.spreadsheet.Grid arg0)
    {
        SpreadsheetView instance = new SpreadsheetView(arg0);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
