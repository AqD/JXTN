// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package org.controlsfx.control;

/**
 * {@link WorldMapView}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version controlsfx-8.40.14.jar
 * @param <Z> 要建構的物件型態(需繼承{@link WorldMapView})
 * @param <B> 建構器本身的型態(需繼承{@link WorldMapViewMaker})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class WorldMapViewMaker<Z extends WorldMapView, B extends WorldMapViewMaker<Z, B>>
        extends javafx.scene.control.ControlMaker<Z, B>
        implements WorldMapViewMakerExt<Z, B>
{

    private boolean hasCountries;
    private javafx.collections.ObservableList<org.controlsfx.control.WorldMapView.Country> valCountries;

    private boolean hasCountrySelectionMode;
    private org.controlsfx.control.WorldMapView.SelectionMode valCountrySelectionMode;

    private boolean hasCountryViewFactory;
    private javafx.util.Callback<org.controlsfx.control.WorldMapView.Country, org.controlsfx.control.WorldMapView.CountryView> valCountryViewFactory;

    private boolean hasLocationSelectionMode;
    private org.controlsfx.control.WorldMapView.SelectionMode valLocationSelectionMode;

    private boolean hasLocationViewFactory;
    private javafx.util.Callback<org.controlsfx.control.WorldMapView.Location, javafx.scene.Node> valLocationViewFactory;

    private boolean hasLocations;
    private javafx.collections.ObservableList<org.controlsfx.control.WorldMapView.Location> valLocations;

    private boolean hasSelectedCountries;
    private javafx.collections.ObservableList<org.controlsfx.control.WorldMapView.Country> valSelectedCountries;

    private boolean hasSelectedLocations;
    private javafx.collections.ObservableList<org.controlsfx.control.WorldMapView.Location> valSelectedLocations;

    private boolean hasShowLocations;
    private boolean valShowLocations;

    private boolean hasZoomFactor;
    private double valZoomFactor;

    private boolean bound1Countries;
    private boolean bound2Countries;
    private javafx.beans.value.ObservableValue<? extends org.controlsfx.control.WorldMapView.Country> obsrv1Countries;
    private javafx.beans.property.Property<org.controlsfx.control.WorldMapView.Country> obsrv2Countries;

    private boolean bound1CountrySelectionMode;
    private boolean bound2CountrySelectionMode;
    private javafx.beans.value.ObservableValue<? extends org.controlsfx.control.WorldMapView.SelectionMode> obsrv1CountrySelectionMode;
    private javafx.beans.property.Property<org.controlsfx.control.WorldMapView.SelectionMode> obsrv2CountrySelectionMode;

    private boolean bound1CountryViewFactory;
    private boolean bound2CountryViewFactory;
    private javafx.beans.value.ObservableValue<? extends javafx.util.Callback<org.controlsfx.control.WorldMapView.Country, org.controlsfx.control.WorldMapView.CountryView>> obsrv1CountryViewFactory;
    private javafx.beans.property.Property<javafx.util.Callback<org.controlsfx.control.WorldMapView.Country, org.controlsfx.control.WorldMapView.CountryView>> obsrv2CountryViewFactory;

    private boolean bound1LocationSelectionMode;
    private boolean bound2LocationSelectionMode;
    private javafx.beans.value.ObservableValue<? extends org.controlsfx.control.WorldMapView.SelectionMode> obsrv1LocationSelectionMode;
    private javafx.beans.property.Property<org.controlsfx.control.WorldMapView.SelectionMode> obsrv2LocationSelectionMode;

    private boolean bound1LocationViewFactory;
    private boolean bound2LocationViewFactory;
    private javafx.beans.value.ObservableValue<? extends javafx.util.Callback<org.controlsfx.control.WorldMapView.Location, javafx.scene.Node>> obsrv1LocationViewFactory;
    private javafx.beans.property.Property<javafx.util.Callback<org.controlsfx.control.WorldMapView.Location, javafx.scene.Node>> obsrv2LocationViewFactory;

    private boolean bound1Locations;
    private boolean bound2Locations;
    private javafx.beans.value.ObservableValue<? extends org.controlsfx.control.WorldMapView.Location> obsrv1Locations;
    private javafx.beans.property.Property<org.controlsfx.control.WorldMapView.Location> obsrv2Locations;

    private boolean bound1SelectedCountries;
    private boolean bound2SelectedCountries;
    private javafx.beans.value.ObservableValue<? extends org.controlsfx.control.WorldMapView.Country> obsrv1SelectedCountries;
    private javafx.beans.property.Property<org.controlsfx.control.WorldMapView.Country> obsrv2SelectedCountries;

    private boolean bound1SelectedLocations;
    private boolean bound2SelectedLocations;
    private javafx.beans.value.ObservableValue<? extends org.controlsfx.control.WorldMapView.Location> obsrv1SelectedLocations;
    private javafx.beans.property.Property<org.controlsfx.control.WorldMapView.Location> obsrv2SelectedLocations;

    private boolean bound1ShowLocations;
    private boolean bound2ShowLocations;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrv1ShowLocations;
    private javafx.beans.property.Property<Boolean> obsrv2ShowLocations;

    private boolean bound1ZoomFactor;
    private boolean bound2ZoomFactor;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1ZoomFactor;
    private javafx.beans.property.Property<Number> obsrv2ZoomFactor;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasCountries)
            instance.setCountries(this.valCountries);
        if (this.hasCountrySelectionMode)
            instance.setCountrySelectionMode(this.valCountrySelectionMode);
        if (this.hasCountryViewFactory)
            instance.setCountryViewFactory(this.valCountryViewFactory);
        if (this.hasLocationSelectionMode)
            instance.setLocationSelectionMode(this.valLocationSelectionMode);
        if (this.hasLocationViewFactory)
            instance.setLocationViewFactory(this.valLocationViewFactory);
        if (this.hasLocations)
            instance.setLocations(this.valLocations);
        if (this.hasSelectedCountries)
            instance.setSelectedCountries(this.valSelectedCountries);
        if (this.hasSelectedLocations)
            instance.setSelectedLocations(this.valSelectedLocations);
        if (this.hasShowLocations)
            instance.setShowLocations(this.valShowLocations);
        if (this.hasZoomFactor)
            instance.setZoomFactor(this.valZoomFactor);
        if (this.bound1CountrySelectionMode)
            instance.countrySelectionModeProperty().bind(this.obsrv1CountrySelectionMode);
        if (this.bound2CountrySelectionMode)
            instance.countrySelectionModeProperty().bindBidirectional(this.obsrv2CountrySelectionMode);
        if (this.bound1CountryViewFactory)
            instance.countryViewFactoryProperty().bind(this.obsrv1CountryViewFactory);
        if (this.bound2CountryViewFactory)
            instance.countryViewFactoryProperty().bindBidirectional(this.obsrv2CountryViewFactory);
        if (this.bound1LocationSelectionMode)
            instance.locationSelectionModeProperty().bind(this.obsrv1LocationSelectionMode);
        if (this.bound2LocationSelectionMode)
            instance.locationSelectionModeProperty().bindBidirectional(this.obsrv2LocationSelectionMode);
        if (this.bound1LocationViewFactory)
            instance.locationViewFactoryProperty().bind(this.obsrv1LocationViewFactory);
        if (this.bound2LocationViewFactory)
            instance.locationViewFactoryProperty().bindBidirectional(this.obsrv2LocationViewFactory);
        if (this.bound1ShowLocations)
            instance.showLocationsProperty().bind(this.obsrv1ShowLocations);
        if (this.bound2ShowLocations)
            instance.showLocationsProperty().bindBidirectional(this.obsrv2ShowLocations);
        if (this.bound1ZoomFactor)
            instance.zoomFactorProperty().bind(this.obsrv1ZoomFactor);
        if (this.bound2ZoomFactor)
            instance.zoomFactorProperty().bindBidirectional(this.obsrv2ZoomFactor);
    }

    /**
     * 設定屬性{@link WorldMapView#setCountries(javafx.collections.ObservableList)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B countries(javafx.collections.ObservableList<org.controlsfx.control.WorldMapView.Country> value)
    {
        this.hasCountries = true;
        this.valCountries = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#setCountrySelectionMode(org.controlsfx.control.WorldMapView.SelectionMode)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B countrySelectionMode(org.controlsfx.control.WorldMapView.SelectionMode value)
    {
        this.hasCountrySelectionMode = true;
        this.valCountrySelectionMode = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#setCountryViewFactory(javafx.util.Callback)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B countryViewFactory(javafx.util.Callback<org.controlsfx.control.WorldMapView.Country, org.controlsfx.control.WorldMapView.CountryView> value)
    {
        this.hasCountryViewFactory = true;
        this.valCountryViewFactory = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#setLocationSelectionMode(org.controlsfx.control.WorldMapView.SelectionMode)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B locationSelectionMode(org.controlsfx.control.WorldMapView.SelectionMode value)
    {
        this.hasLocationSelectionMode = true;
        this.valLocationSelectionMode = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#setLocationViewFactory(javafx.util.Callback)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B locationViewFactory(javafx.util.Callback<org.controlsfx.control.WorldMapView.Location, javafx.scene.Node> value)
    {
        this.hasLocationViewFactory = true;
        this.valLocationViewFactory = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#setLocations(javafx.collections.ObservableList)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B locations(javafx.collections.ObservableList<org.controlsfx.control.WorldMapView.Location> value)
    {
        this.hasLocations = true;
        this.valLocations = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#setSelectedCountries(javafx.collections.ObservableList)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B selectedCountries(javafx.collections.ObservableList<org.controlsfx.control.WorldMapView.Country> value)
    {
        this.hasSelectedCountries = true;
        this.valSelectedCountries = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#setSelectedLocations(javafx.collections.ObservableList)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B selectedLocations(javafx.collections.ObservableList<org.controlsfx.control.WorldMapView.Location> value)
    {
        this.hasSelectedLocations = true;
        this.valSelectedLocations = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#setShowLocations(boolean)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B showLocations(boolean value)
    {
        this.hasShowLocations = true;
        this.valShowLocations = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#setZoomFactor(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B zoomFactor(double value)
    {
        this.hasZoomFactor = true;
        this.valZoomFactor = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#countriesProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindCountries(javafx.beans.value.ObservableValue<? extends org.controlsfx.control.WorldMapView.Country> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Countries = true;
        this.obsrv1Countries = source;
        this.bound2Countries = false;
        this.obsrv2Countries = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#countriesProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalCountries(javafx.beans.property.Property<org.controlsfx.control.WorldMapView.Country> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Countries = false;
        this.obsrv1Countries = null;
        this.bound2Countries = true;
        this.obsrv2Countries = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#countrySelectionModeProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindCountrySelectionMode(javafx.beans.value.ObservableValue<? extends org.controlsfx.control.WorldMapView.SelectionMode> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1CountrySelectionMode = true;
        this.obsrv1CountrySelectionMode = source;
        this.bound2CountrySelectionMode = false;
        this.obsrv2CountrySelectionMode = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#countrySelectionModeProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalCountrySelectionMode(javafx.beans.property.Property<org.controlsfx.control.WorldMapView.SelectionMode> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1CountrySelectionMode = false;
        this.obsrv1CountrySelectionMode = null;
        this.bound2CountrySelectionMode = true;
        this.obsrv2CountrySelectionMode = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#countryViewFactoryProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindCountryViewFactory(javafx.beans.value.ObservableValue<? extends javafx.util.Callback<org.controlsfx.control.WorldMapView.Country, org.controlsfx.control.WorldMapView.CountryView>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1CountryViewFactory = true;
        this.obsrv1CountryViewFactory = source;
        this.bound2CountryViewFactory = false;
        this.obsrv2CountryViewFactory = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#countryViewFactoryProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalCountryViewFactory(javafx.beans.property.Property<javafx.util.Callback<org.controlsfx.control.WorldMapView.Country, org.controlsfx.control.WorldMapView.CountryView>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1CountryViewFactory = false;
        this.obsrv1CountryViewFactory = null;
        this.bound2CountryViewFactory = true;
        this.obsrv2CountryViewFactory = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#locationSelectionModeProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindLocationSelectionMode(javafx.beans.value.ObservableValue<? extends org.controlsfx.control.WorldMapView.SelectionMode> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1LocationSelectionMode = true;
        this.obsrv1LocationSelectionMode = source;
        this.bound2LocationSelectionMode = false;
        this.obsrv2LocationSelectionMode = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#locationSelectionModeProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalLocationSelectionMode(javafx.beans.property.Property<org.controlsfx.control.WorldMapView.SelectionMode> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1LocationSelectionMode = false;
        this.obsrv1LocationSelectionMode = null;
        this.bound2LocationSelectionMode = true;
        this.obsrv2LocationSelectionMode = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#locationViewFactoryProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindLocationViewFactory(javafx.beans.value.ObservableValue<? extends javafx.util.Callback<org.controlsfx.control.WorldMapView.Location, javafx.scene.Node>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1LocationViewFactory = true;
        this.obsrv1LocationViewFactory = source;
        this.bound2LocationViewFactory = false;
        this.obsrv2LocationViewFactory = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#locationViewFactoryProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalLocationViewFactory(javafx.beans.property.Property<javafx.util.Callback<org.controlsfx.control.WorldMapView.Location, javafx.scene.Node>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1LocationViewFactory = false;
        this.obsrv1LocationViewFactory = null;
        this.bound2LocationViewFactory = true;
        this.obsrv2LocationViewFactory = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#locationsProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindLocations(javafx.beans.value.ObservableValue<? extends org.controlsfx.control.WorldMapView.Location> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Locations = true;
        this.obsrv1Locations = source;
        this.bound2Locations = false;
        this.obsrv2Locations = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#locationsProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalLocations(javafx.beans.property.Property<org.controlsfx.control.WorldMapView.Location> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Locations = false;
        this.obsrv1Locations = null;
        this.bound2Locations = true;
        this.obsrv2Locations = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#selectedCountriesProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindSelectedCountries(javafx.beans.value.ObservableValue<? extends org.controlsfx.control.WorldMapView.Country> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1SelectedCountries = true;
        this.obsrv1SelectedCountries = source;
        this.bound2SelectedCountries = false;
        this.obsrv2SelectedCountries = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#selectedCountriesProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalSelectedCountries(javafx.beans.property.Property<org.controlsfx.control.WorldMapView.Country> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1SelectedCountries = false;
        this.obsrv1SelectedCountries = null;
        this.bound2SelectedCountries = true;
        this.obsrv2SelectedCountries = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#selectedLocationsProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindSelectedLocations(javafx.beans.value.ObservableValue<? extends org.controlsfx.control.WorldMapView.Location> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1SelectedLocations = true;
        this.obsrv1SelectedLocations = source;
        this.bound2SelectedLocations = false;
        this.obsrv2SelectedLocations = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#selectedLocationsProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalSelectedLocations(javafx.beans.property.Property<org.controlsfx.control.WorldMapView.Location> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1SelectedLocations = false;
        this.obsrv1SelectedLocations = null;
        this.bound2SelectedLocations = true;
        this.obsrv2SelectedLocations = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#showLocationsProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindShowLocations(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ShowLocations = true;
        this.obsrv1ShowLocations = source;
        this.bound2ShowLocations = false;
        this.obsrv2ShowLocations = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#showLocationsProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalShowLocations(javafx.beans.property.Property<Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ShowLocations = false;
        this.obsrv1ShowLocations = null;
        this.bound2ShowLocations = true;
        this.obsrv2ShowLocations = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#zoomFactorProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindZoomFactor(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ZoomFactor = true;
        this.obsrv1ZoomFactor = source;
        this.bound2ZoomFactor = false;
        this.obsrv2ZoomFactor = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link WorldMapView#zoomFactorProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalZoomFactor(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ZoomFactor = false;
        this.obsrv1ZoomFactor = null;
        this.bound2ZoomFactor = true;
        this.obsrv2ZoomFactor = source;
        return (B) this;
    }

    /**
     * 建構{@link WorldMapView}物件。
     *
     * @return 新的{@link WorldMapView}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public WorldMapView build()
    {
        WorldMapView instance = new WorldMapView();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
