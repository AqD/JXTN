// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package org.controlsfx.control;

/**
 * {@link ListSelectionView}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version controlsfx-8.40.14.jar
 * @param <Z> 要建構的物件型態(需繼承{@link ListSelectionView})
 * @param <B> 建構器本身的型態(需繼承{@link ListSelectionViewMaker})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class ListSelectionViewMaker<T extends java.lang.Object, Z extends ListSelectionView<T>, B extends ListSelectionViewMaker<T, Z, B>>
        extends javafx.scene.control.ControlMaker<Z, B>
        implements ListSelectionViewMakerExt<T, Z, B>
{

    private boolean hasCellFactory;
    private javafx.util.Callback<javafx.scene.control.ListView<T>, javafx.scene.control.ListCell<T>> valCellFactory;

    private boolean hasOrientation;
    private javafx.geometry.Orientation valOrientation;

    private boolean hasSourceFooter;
    private javafx.scene.Node valSourceFooter;

    private boolean hasSourceHeader;
    private javafx.scene.Node valSourceHeader;

    private boolean hasSourceItems;
    private javafx.collections.ObservableList<T> valSourceItems;

    private boolean hasTargetFooter;
    private javafx.scene.Node valTargetFooter;

    private boolean hasTargetHeader;
    private javafx.scene.Node valTargetHeader;

    private boolean hasTargetItems;
    private javafx.collections.ObservableList<T> valTargetItems;

    private boolean bound1CellFactory;
    private boolean bound2CellFactory;
    private javafx.beans.value.ObservableValue<? extends javafx.util.Callback<javafx.scene.control.ListView<T>, javafx.scene.control.ListCell<T>>> obsrv1CellFactory;
    private javafx.beans.property.Property<javafx.util.Callback<javafx.scene.control.ListView<T>, javafx.scene.control.ListCell<T>>> obsrv2CellFactory;

    private boolean bound1Orientation;
    private boolean bound2Orientation;
    private javafx.beans.value.ObservableValue<? extends javafx.geometry.Orientation> obsrv1Orientation;
    private javafx.beans.property.Property<javafx.geometry.Orientation> obsrv2Orientation;

    private boolean bound1SourceFooter;
    private boolean bound2SourceFooter;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrv1SourceFooter;
    private javafx.beans.property.Property<javafx.scene.Node> obsrv2SourceFooter;

    private boolean bound1SourceHeader;
    private boolean bound2SourceHeader;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrv1SourceHeader;
    private javafx.beans.property.Property<javafx.scene.Node> obsrv2SourceHeader;

    private boolean bound1SourceItems;
    private boolean bound2SourceItems;
    private javafx.beans.value.ObservableValue<? extends javafx.collections.ObservableList<T>> obsrv1SourceItems;
    private javafx.beans.property.Property<javafx.collections.ObservableList<T>> obsrv2SourceItems;

    private boolean bound1TargetFooter;
    private boolean bound2TargetFooter;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrv1TargetFooter;
    private javafx.beans.property.Property<javafx.scene.Node> obsrv2TargetFooter;

    private boolean bound1TargetHeader;
    private boolean bound2TargetHeader;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrv1TargetHeader;
    private javafx.beans.property.Property<javafx.scene.Node> obsrv2TargetHeader;

    private boolean bound1TargetItems;
    private boolean bound2TargetItems;
    private javafx.beans.value.ObservableValue<? extends javafx.collections.ObservableList<T>> obsrv1TargetItems;
    private javafx.beans.property.Property<javafx.collections.ObservableList<T>> obsrv2TargetItems;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasCellFactory)
            instance.setCellFactory(this.valCellFactory);
        if (this.hasOrientation)
            instance.setOrientation(this.valOrientation);
        if (this.hasSourceFooter)
            instance.setSourceFooter(this.valSourceFooter);
        if (this.hasSourceHeader)
            instance.setSourceHeader(this.valSourceHeader);
        if (this.hasSourceItems)
            instance.setSourceItems(this.valSourceItems);
        if (this.hasTargetFooter)
            instance.setTargetFooter(this.valTargetFooter);
        if (this.hasTargetHeader)
            instance.setTargetHeader(this.valTargetHeader);
        if (this.hasTargetItems)
            instance.setTargetItems(this.valTargetItems);
        if (this.bound1CellFactory)
            instance.cellFactoryProperty().bind(this.obsrv1CellFactory);
        if (this.bound2CellFactory)
            instance.cellFactoryProperty().bindBidirectional(this.obsrv2CellFactory);
        if (this.bound1Orientation)
            instance.orientationProperty().bind(this.obsrv1Orientation);
        if (this.bound2Orientation)
            instance.orientationProperty().bindBidirectional(this.obsrv2Orientation);
        if (this.bound1SourceFooter)
            instance.sourceFooterProperty().bind(this.obsrv1SourceFooter);
        if (this.bound2SourceFooter)
            instance.sourceFooterProperty().bindBidirectional(this.obsrv2SourceFooter);
        if (this.bound1SourceHeader)
            instance.sourceHeaderProperty().bind(this.obsrv1SourceHeader);
        if (this.bound2SourceHeader)
            instance.sourceHeaderProperty().bindBidirectional(this.obsrv2SourceHeader);
        if (this.bound1SourceItems)
            instance.sourceItemsProperty().bind(this.obsrv1SourceItems);
        if (this.bound2SourceItems)
            instance.sourceItemsProperty().bindBidirectional(this.obsrv2SourceItems);
        if (this.bound1TargetFooter)
            instance.targetFooterProperty().bind(this.obsrv1TargetFooter);
        if (this.bound2TargetFooter)
            instance.targetFooterProperty().bindBidirectional(this.obsrv2TargetFooter);
        if (this.bound1TargetHeader)
            instance.targetHeaderProperty().bind(this.obsrv1TargetHeader);
        if (this.bound2TargetHeader)
            instance.targetHeaderProperty().bindBidirectional(this.obsrv2TargetHeader);
        if (this.bound1TargetItems)
            instance.targetItemsProperty().bind(this.obsrv1TargetItems);
        if (this.bound2TargetItems)
            instance.targetItemsProperty().bindBidirectional(this.obsrv2TargetItems);
    }

    /**
     * 設定屬性{@link ListSelectionView#setCellFactory(javafx.util.Callback)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B cellFactory(javafx.util.Callback<javafx.scene.control.ListView<T>, javafx.scene.control.ListCell<T>> value)
    {
        this.hasCellFactory = true;
        this.valCellFactory = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#setOrientation(javafx.geometry.Orientation)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B orientation(javafx.geometry.Orientation value)
    {
        this.hasOrientation = true;
        this.valOrientation = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#setSourceFooter(javafx.scene.Node)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B sourceFooter(javafx.scene.Node value)
    {
        this.hasSourceFooter = true;
        this.valSourceFooter = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#setSourceHeader(javafx.scene.Node)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B sourceHeader(javafx.scene.Node value)
    {
        this.hasSourceHeader = true;
        this.valSourceHeader = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#setSourceItems(javafx.collections.ObservableList)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B sourceItems(javafx.collections.ObservableList<T> value)
    {
        this.hasSourceItems = true;
        this.valSourceItems = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#setTargetFooter(javafx.scene.Node)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B targetFooter(javafx.scene.Node value)
    {
        this.hasTargetFooter = true;
        this.valTargetFooter = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#setTargetHeader(javafx.scene.Node)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B targetHeader(javafx.scene.Node value)
    {
        this.hasTargetHeader = true;
        this.valTargetHeader = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#setTargetItems(javafx.collections.ObservableList)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B targetItems(javafx.collections.ObservableList<T> value)
    {
        this.hasTargetItems = true;
        this.valTargetItems = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#cellFactoryProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindCellFactory(javafx.beans.value.ObservableValue<? extends javafx.util.Callback<javafx.scene.control.ListView<T>, javafx.scene.control.ListCell<T>>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1CellFactory = true;
        this.obsrv1CellFactory = source;
        this.bound2CellFactory = false;
        this.obsrv2CellFactory = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#cellFactoryProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalCellFactory(javafx.beans.property.Property<javafx.util.Callback<javafx.scene.control.ListView<T>, javafx.scene.control.ListCell<T>>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1CellFactory = false;
        this.obsrv1CellFactory = null;
        this.bound2CellFactory = true;
        this.obsrv2CellFactory = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#orientationProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindOrientation(javafx.beans.value.ObservableValue<? extends javafx.geometry.Orientation> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Orientation = true;
        this.obsrv1Orientation = source;
        this.bound2Orientation = false;
        this.obsrv2Orientation = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#orientationProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalOrientation(javafx.beans.property.Property<javafx.geometry.Orientation> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Orientation = false;
        this.obsrv1Orientation = null;
        this.bound2Orientation = true;
        this.obsrv2Orientation = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#sourceFooterProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindSourceFooter(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1SourceFooter = true;
        this.obsrv1SourceFooter = source;
        this.bound2SourceFooter = false;
        this.obsrv2SourceFooter = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#sourceFooterProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalSourceFooter(javafx.beans.property.Property<javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1SourceFooter = false;
        this.obsrv1SourceFooter = null;
        this.bound2SourceFooter = true;
        this.obsrv2SourceFooter = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#sourceHeaderProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindSourceHeader(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1SourceHeader = true;
        this.obsrv1SourceHeader = source;
        this.bound2SourceHeader = false;
        this.obsrv2SourceHeader = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#sourceHeaderProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalSourceHeader(javafx.beans.property.Property<javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1SourceHeader = false;
        this.obsrv1SourceHeader = null;
        this.bound2SourceHeader = true;
        this.obsrv2SourceHeader = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#sourceItemsProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindSourceItems(javafx.beans.value.ObservableValue<? extends javafx.collections.ObservableList<T>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1SourceItems = true;
        this.obsrv1SourceItems = source;
        this.bound2SourceItems = false;
        this.obsrv2SourceItems = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#sourceItemsProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalSourceItems(javafx.beans.property.Property<javafx.collections.ObservableList<T>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1SourceItems = false;
        this.obsrv1SourceItems = null;
        this.bound2SourceItems = true;
        this.obsrv2SourceItems = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#targetFooterProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindTargetFooter(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1TargetFooter = true;
        this.obsrv1TargetFooter = source;
        this.bound2TargetFooter = false;
        this.obsrv2TargetFooter = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#targetFooterProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalTargetFooter(javafx.beans.property.Property<javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1TargetFooter = false;
        this.obsrv1TargetFooter = null;
        this.bound2TargetFooter = true;
        this.obsrv2TargetFooter = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#targetHeaderProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindTargetHeader(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1TargetHeader = true;
        this.obsrv1TargetHeader = source;
        this.bound2TargetHeader = false;
        this.obsrv2TargetHeader = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#targetHeaderProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalTargetHeader(javafx.beans.property.Property<javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1TargetHeader = false;
        this.obsrv1TargetHeader = null;
        this.bound2TargetHeader = true;
        this.obsrv2TargetHeader = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#targetItemsProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindTargetItems(javafx.beans.value.ObservableValue<? extends javafx.collections.ObservableList<T>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1TargetItems = true;
        this.obsrv1TargetItems = source;
        this.bound2TargetItems = false;
        this.obsrv2TargetItems = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link ListSelectionView#targetItemsProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalTargetItems(javafx.beans.property.Property<javafx.collections.ObservableList<T>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1TargetItems = false;
        this.obsrv1TargetItems = null;
        this.bound2TargetItems = true;
        this.obsrv2TargetItems = source;
        return (B) this;
    }

    /**
     * 建構{@link ListSelectionView}物件。
     *
     * @return 新的{@link ListSelectionView}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public ListSelectionView<T> build()
    {
        ListSelectionView<T> instance = new ListSelectionView<T>();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
