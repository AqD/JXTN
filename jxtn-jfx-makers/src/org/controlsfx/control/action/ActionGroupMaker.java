// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package org.controlsfx.control.action;

/**
 * {@link ActionGroup}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version controlsfx-8.40.12.jar
 * @param <Z> 要建構的物件型態(需繼承{@link ActionGroup})
 * @param <B> 建構器本身的型態(需繼承{@link ActionGroupMaker})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class ActionGroupMaker<Z extends ActionGroup, B extends ActionGroupMaker<Z, B>>
        extends org.controlsfx.control.action.ActionMaker<Z, B>
        implements ActionGroupMakerExt<Z, B>
{

    private boolean hasActions;
    private java.util.Collection<org.controlsfx.control.action.Action> valActions;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasActions)
            instance.getActions().addAll(this.valActions);
    }

    /**
     * 設定集合屬性{@link ActionGroup#getActions}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     * @deprecated 屬性值並非{@link javafx.collections.ObservableList}
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    public final B actions(java.util.Collection<? extends org.controlsfx.control.action.Action> value)
    {
        this.hasActions = true;
        this.valActions = (java.util.Collection<org.controlsfx.control.action.Action>) value;
        return (B) this;
    }

    /**
     * 設定集合屬性{@link ActionGroup#getActions}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B actions(org.controlsfx.control.action.Action... value)
    {
        this.hasActions = true;
        this.valActions = java.util.Arrays.asList(value);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link ActionGroup#getActions}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B actionsAdd(java.util.Collection<? extends org.controlsfx.control.action.Action> value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasActions = true;
        if (this.valActions == null)
            this.valActions = new java.util.ArrayList<>(value.size());
        this.valActions.addAll(value);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link ActionGroup#getActions}的內容。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B actionsAdd(org.controlsfx.control.action.Action... value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasActions = true;
        if (this.valActions == null)
            this.valActions = new java.util.ArrayList<>(value.length);
        this.valActions.addAll(java.util.Arrays.asList(value));
        return (B) this;
    }

    /**
     * 增加集合屬性{@link ActionGroup#getActions}的內容，排除null項目。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B actionsAddNonNull(java.util.Collection<? extends org.controlsfx.control.action.Action> value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasActions = true;
        if (this.valActions == null)
            this.valActions = new java.util.ArrayList<>(value.size());
        for (org.controlsfx.control.action.Action i : value)
            if (i != null)
                this.valActions.add(i);
        return (B) this;
    }

    /**
     * 增加集合屬性{@link ActionGroup#getActions}的內容，排除null項目。
     *
     * @param value 新的集合內容
     * @return 目前的建構器(this)
     */
    @SafeVarargs
    @SuppressWarnings("unchecked")
    public final B actionsAddNonNull(org.controlsfx.control.action.Action... value)
    {
        java.util.Objects.requireNonNull(value);
        this.hasActions = true;
        if (this.valActions == null)
            this.valActions = new java.util.ArrayList<>(value.length);
        for (org.controlsfx.control.action.Action i : value)
            if (i != null)
                this.valActions.add(i);
        return (B) this;
    }

    /**
     * 建構{@link ActionGroup}物件。
     *
     * @return 新的{@link ActionGroup}物件實體
     */
    @SuppressWarnings("unchecked")
    public ActionGroup build(java.lang.String arg0, java.util.Collection<org.controlsfx.control.action.Action> arg1)
    {
        ActionGroup instance = new ActionGroup(arg0, arg1);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link ActionGroup}物件。
     *
     * @return 新的{@link ActionGroup}物件實體
     */
    @SuppressWarnings("unchecked")
    public ActionGroup build(java.lang.String arg0, org.controlsfx.control.action.Action[] arg1)
    {
        ActionGroup instance = new ActionGroup(arg0, arg1);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link ActionGroup}物件。
     *
     * @return 新的{@link ActionGroup}物件實體
     */
    @SuppressWarnings("unchecked")
    public ActionGroup build(java.lang.String arg0, javafx.scene.Node arg1, java.util.Collection<org.controlsfx.control.action.Action> arg2)
    {
        ActionGroup instance = new ActionGroup(arg0, arg1, arg2);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link ActionGroup}物件。
     *
     * @return 新的{@link ActionGroup}物件實體
     */
    @SuppressWarnings("unchecked")
    public ActionGroup build(java.lang.String arg0, javafx.scene.Node arg1, org.controlsfx.control.action.Action[] arg2)
    {
        ActionGroup instance = new ActionGroup(arg0, arg1, arg2);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
