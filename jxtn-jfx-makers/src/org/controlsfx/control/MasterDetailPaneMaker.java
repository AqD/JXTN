// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package org.controlsfx.control;

/**
 * {@link MasterDetailPane}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version controlsfx-8.40.14.jar
 * @param <Z> 要建構的物件型態(需繼承{@link MasterDetailPane})
 * @param <B> 建構器本身的型態(需繼承{@link MasterDetailPaneMaker})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class MasterDetailPaneMaker<Z extends MasterDetailPane, B extends MasterDetailPaneMaker<Z, B>>
        extends javafx.scene.control.ControlMaker<Z, B>
        implements MasterDetailPaneMakerExt<Z, B>
{

    private boolean hasAnimated;
    private boolean valAnimated;

    private boolean hasDetailNode;
    private javafx.scene.Node valDetailNode;

    private boolean hasDetailSide;
    private javafx.geometry.Side valDetailSide;

    private boolean hasDividerPosition;
    private double valDividerPosition;

    private boolean hasDividerSizeHint;
    private double valDividerSizeHint;

    private boolean hasMasterNode;
    private javafx.scene.Node valMasterNode;

    private boolean hasShowDetailNode;
    private boolean valShowDetailNode;

    private boolean bound1Animated;
    private boolean bound2Animated;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrv1Animated;
    private javafx.beans.property.Property<Boolean> obsrv2Animated;

    private boolean bound1DetailNode;
    private boolean bound2DetailNode;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrv1DetailNode;
    private javafx.beans.property.Property<javafx.scene.Node> obsrv2DetailNode;

    private boolean bound1DetailSide;
    private boolean bound2DetailSide;
    private javafx.beans.value.ObservableValue<? extends javafx.geometry.Side> obsrv1DetailSide;
    private javafx.beans.property.Property<javafx.geometry.Side> obsrv2DetailSide;

    private boolean bound1DividerPosition;
    private boolean bound2DividerPosition;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1DividerPosition;
    private javafx.beans.property.Property<Number> obsrv2DividerPosition;

    private boolean bound1DividerSizeHint;
    private boolean bound2DividerSizeHint;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1DividerSizeHint;
    private javafx.beans.property.Property<Number> obsrv2DividerSizeHint;

    private boolean bound1MasterNode;
    private boolean bound2MasterNode;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrv1MasterNode;
    private javafx.beans.property.Property<javafx.scene.Node> obsrv2MasterNode;

    private boolean bound1ShowDetailNode;
    private boolean bound2ShowDetailNode;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrv1ShowDetailNode;
    private javafx.beans.property.Property<Boolean> obsrv2ShowDetailNode;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasAnimated)
            instance.setAnimated(this.valAnimated);
        if (this.hasDetailNode)
            instance.setDetailNode(this.valDetailNode);
        if (this.hasDetailSide)
            instance.setDetailSide(this.valDetailSide);
        if (this.hasDividerPosition)
            instance.setDividerPosition(this.valDividerPosition);
        if (this.hasDividerSizeHint)
            instance.setDividerSizeHint(this.valDividerSizeHint);
        if (this.hasMasterNode)
            instance.setMasterNode(this.valMasterNode);
        if (this.hasShowDetailNode)
            instance.setShowDetailNode(this.valShowDetailNode);
        if (this.bound1Animated)
            instance.animatedProperty().bind(this.obsrv1Animated);
        if (this.bound2Animated)
            instance.animatedProperty().bindBidirectional(this.obsrv2Animated);
        if (this.bound1DetailNode)
            instance.detailNodeProperty().bind(this.obsrv1DetailNode);
        if (this.bound2DetailNode)
            instance.detailNodeProperty().bindBidirectional(this.obsrv2DetailNode);
        if (this.bound1DetailSide)
            instance.detailSideProperty().bind(this.obsrv1DetailSide);
        if (this.bound2DetailSide)
            instance.detailSideProperty().bindBidirectional(this.obsrv2DetailSide);
        if (this.bound1DividerPosition)
            instance.dividerPositionProperty().bind(this.obsrv1DividerPosition);
        if (this.bound2DividerPosition)
            instance.dividerPositionProperty().bindBidirectional(this.obsrv2DividerPosition);
        if (this.bound1DividerSizeHint)
            instance.dividerSizeHintProperty().bind(this.obsrv1DividerSizeHint);
        if (this.bound2DividerSizeHint)
            instance.dividerSizeHintProperty().bindBidirectional(this.obsrv2DividerSizeHint);
        if (this.bound1MasterNode)
            instance.masterNodeProperty().bind(this.obsrv1MasterNode);
        if (this.bound2MasterNode)
            instance.masterNodeProperty().bindBidirectional(this.obsrv2MasterNode);
        if (this.bound1ShowDetailNode)
            instance.showDetailNodeProperty().bind(this.obsrv1ShowDetailNode);
        if (this.bound2ShowDetailNode)
            instance.showDetailNodeProperty().bindBidirectional(this.obsrv2ShowDetailNode);
    }

    /**
     * 設定屬性{@link MasterDetailPane#setAnimated(boolean)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B animated(boolean value)
    {
        this.hasAnimated = true;
        this.valAnimated = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MasterDetailPane#setDetailNode(javafx.scene.Node)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B detailNode(javafx.scene.Node value)
    {
        this.hasDetailNode = true;
        this.valDetailNode = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MasterDetailPane#setDetailSide(javafx.geometry.Side)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B detailSide(javafx.geometry.Side value)
    {
        this.hasDetailSide = true;
        this.valDetailSide = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MasterDetailPane#setDividerPosition(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B dividerPosition(double value)
    {
        this.hasDividerPosition = true;
        this.valDividerPosition = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MasterDetailPane#setDividerSizeHint(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B dividerSizeHint(double value)
    {
        this.hasDividerSizeHint = true;
        this.valDividerSizeHint = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MasterDetailPane#setMasterNode(javafx.scene.Node)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B masterNode(javafx.scene.Node value)
    {
        this.hasMasterNode = true;
        this.valMasterNode = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MasterDetailPane#setShowDetailNode(boolean)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B showDetailNode(boolean value)
    {
        this.hasShowDetailNode = true;
        this.valShowDetailNode = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MasterDetailPane#animatedProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindAnimated(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Animated = true;
        this.obsrv1Animated = source;
        this.bound2Animated = false;
        this.obsrv2Animated = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MasterDetailPane#animatedProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalAnimated(javafx.beans.property.Property<Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Animated = false;
        this.obsrv1Animated = null;
        this.bound2Animated = true;
        this.obsrv2Animated = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MasterDetailPane#detailNodeProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindDetailNode(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1DetailNode = true;
        this.obsrv1DetailNode = source;
        this.bound2DetailNode = false;
        this.obsrv2DetailNode = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MasterDetailPane#detailNodeProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalDetailNode(javafx.beans.property.Property<javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1DetailNode = false;
        this.obsrv1DetailNode = null;
        this.bound2DetailNode = true;
        this.obsrv2DetailNode = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MasterDetailPane#detailSideProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindDetailSide(javafx.beans.value.ObservableValue<? extends javafx.geometry.Side> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1DetailSide = true;
        this.obsrv1DetailSide = source;
        this.bound2DetailSide = false;
        this.obsrv2DetailSide = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MasterDetailPane#detailSideProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalDetailSide(javafx.beans.property.Property<javafx.geometry.Side> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1DetailSide = false;
        this.obsrv1DetailSide = null;
        this.bound2DetailSide = true;
        this.obsrv2DetailSide = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MasterDetailPane#dividerPositionProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindDividerPosition(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1DividerPosition = true;
        this.obsrv1DividerPosition = source;
        this.bound2DividerPosition = false;
        this.obsrv2DividerPosition = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MasterDetailPane#dividerPositionProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalDividerPosition(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1DividerPosition = false;
        this.obsrv1DividerPosition = null;
        this.bound2DividerPosition = true;
        this.obsrv2DividerPosition = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MasterDetailPane#dividerSizeHintProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindDividerSizeHint(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1DividerSizeHint = true;
        this.obsrv1DividerSizeHint = source;
        this.bound2DividerSizeHint = false;
        this.obsrv2DividerSizeHint = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MasterDetailPane#dividerSizeHintProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalDividerSizeHint(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1DividerSizeHint = false;
        this.obsrv1DividerSizeHint = null;
        this.bound2DividerSizeHint = true;
        this.obsrv2DividerSizeHint = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MasterDetailPane#masterNodeProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindMasterNode(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1MasterNode = true;
        this.obsrv1MasterNode = source;
        this.bound2MasterNode = false;
        this.obsrv2MasterNode = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MasterDetailPane#masterNodeProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalMasterNode(javafx.beans.property.Property<javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1MasterNode = false;
        this.obsrv1MasterNode = null;
        this.bound2MasterNode = true;
        this.obsrv2MasterNode = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MasterDetailPane#showDetailNodeProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindShowDetailNode(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ShowDetailNode = true;
        this.obsrv1ShowDetailNode = source;
        this.bound2ShowDetailNode = false;
        this.obsrv2ShowDetailNode = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MasterDetailPane#showDetailNodeProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalShowDetailNode(javafx.beans.property.Property<Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ShowDetailNode = false;
        this.obsrv1ShowDetailNode = null;
        this.bound2ShowDetailNode = true;
        this.obsrv2ShowDetailNode = source;
        return (B) this;
    }

    /**
     * 建構{@link MasterDetailPane}物件。
     *
     * @return 新的{@link MasterDetailPane}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public MasterDetailPane build()
    {
        MasterDetailPane instance = new MasterDetailPane();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link MasterDetailPane}物件。
     *
     * @return 新的{@link MasterDetailPane}物件實體
     */
    @SuppressWarnings("unchecked")
    public MasterDetailPane build(javafx.geometry.Side arg0)
    {
        MasterDetailPane instance = new MasterDetailPane(arg0);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link MasterDetailPane}物件。
     *
     * @return 新的{@link MasterDetailPane}物件實體
     */
    @SuppressWarnings("unchecked")
    public MasterDetailPane build(javafx.geometry.Side arg0, boolean arg1)
    {
        MasterDetailPane instance = new MasterDetailPane(arg0, arg1);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link MasterDetailPane}物件。
     *
     * @return 新的{@link MasterDetailPane}物件實體
     */
    @SuppressWarnings("unchecked")
    public MasterDetailPane build(javafx.geometry.Side arg0, javafx.scene.Node arg1, javafx.scene.Node arg2, boolean arg3)
    {
        MasterDetailPane instance = new MasterDetailPane(arg0, arg1, arg2, arg3);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
