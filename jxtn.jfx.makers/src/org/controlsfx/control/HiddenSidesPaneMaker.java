// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package org.controlsfx.control;

/**
 * {@link HiddenSidesPane}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version controlsfx-8.40.11-20151113.010656-84.jar
 * @param <Z> 要建構的物件型態(需繼承{@link HiddenSidesPane})
 * @param <B> 建構器本身的型態(需繼承{@link HiddenSidesPaneMaker})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class HiddenSidesPaneMaker<Z extends HiddenSidesPane, B extends HiddenSidesPaneMaker<Z, B>>
        extends javafx.scene.control.ControlMaker<Z, B>
        implements HiddenSidesPaneMakerExt<Z, B>
{

    private boolean hasAnimationDelay;
    private javafx.util.Duration valAnimationDelay;

    private boolean hasAnimationDuration;
    private javafx.util.Duration valAnimationDuration;

    private boolean hasBottom;
    private javafx.scene.Node valBottom;

    private boolean hasContent;
    private javafx.scene.Node valContent;

    private boolean hasLeft;
    private javafx.scene.Node valLeft;

    private boolean hasPinnedSide;
    private javafx.geometry.Side valPinnedSide;

    private boolean hasRight;
    private javafx.scene.Node valRight;

    private boolean hasTop;
    private javafx.scene.Node valTop;

    private boolean hasTriggerDistance;
    private double valTriggerDistance;

    private boolean bound1AnimationDelay;
    private boolean bound2AnimationDelay;
    private javafx.beans.value.ObservableValue<? extends javafx.util.Duration> obsrv1AnimationDelay;
    private javafx.beans.property.Property<javafx.util.Duration> obsrv2AnimationDelay;

    private boolean bound1AnimationDuration;
    private boolean bound2AnimationDuration;
    private javafx.beans.value.ObservableValue<? extends javafx.util.Duration> obsrv1AnimationDuration;
    private javafx.beans.property.Property<javafx.util.Duration> obsrv2AnimationDuration;

    private boolean bound1Bottom;
    private boolean bound2Bottom;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrv1Bottom;
    private javafx.beans.property.Property<javafx.scene.Node> obsrv2Bottom;

    private boolean bound1Content;
    private boolean bound2Content;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrv1Content;
    private javafx.beans.property.Property<javafx.scene.Node> obsrv2Content;

    private boolean bound1Left;
    private boolean bound2Left;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrv1Left;
    private javafx.beans.property.Property<javafx.scene.Node> obsrv2Left;

    private boolean bound1PinnedSide;
    private boolean bound2PinnedSide;
    private javafx.beans.value.ObservableValue<? extends javafx.geometry.Side> obsrv1PinnedSide;
    private javafx.beans.property.Property<javafx.geometry.Side> obsrv2PinnedSide;

    private boolean bound1Right;
    private boolean bound2Right;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrv1Right;
    private javafx.beans.property.Property<javafx.scene.Node> obsrv2Right;

    private boolean bound1Top;
    private boolean bound2Top;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrv1Top;
    private javafx.beans.property.Property<javafx.scene.Node> obsrv2Top;

    private boolean bound1TriggerDistance;
    private boolean bound2TriggerDistance;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1TriggerDistance;
    private javafx.beans.property.Property<Number> obsrv2TriggerDistance;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasAnimationDelay)
            instance.setAnimationDelay(this.valAnimationDelay);
        if (this.hasAnimationDuration)
            instance.setAnimationDuration(this.valAnimationDuration);
        if (this.hasBottom)
            instance.setBottom(this.valBottom);
        if (this.hasContent)
            instance.setContent(this.valContent);
        if (this.hasLeft)
            instance.setLeft(this.valLeft);
        if (this.hasPinnedSide)
            instance.setPinnedSide(this.valPinnedSide);
        if (this.hasRight)
            instance.setRight(this.valRight);
        if (this.hasTop)
            instance.setTop(this.valTop);
        if (this.hasTriggerDistance)
            instance.setTriggerDistance(this.valTriggerDistance);
        if (this.bound1AnimationDelay)
            instance.animationDelayProperty().bind(this.obsrv1AnimationDelay);
        if (this.bound2AnimationDelay)
            instance.animationDelayProperty().bindBidirectional(this.obsrv2AnimationDelay);
        if (this.bound1AnimationDuration)
            instance.animationDurationProperty().bind(this.obsrv1AnimationDuration);
        if (this.bound2AnimationDuration)
            instance.animationDurationProperty().bindBidirectional(this.obsrv2AnimationDuration);
        if (this.bound1Bottom)
            instance.bottomProperty().bind(this.obsrv1Bottom);
        if (this.bound2Bottom)
            instance.bottomProperty().bindBidirectional(this.obsrv2Bottom);
        if (this.bound1Content)
            instance.contentProperty().bind(this.obsrv1Content);
        if (this.bound2Content)
            instance.contentProperty().bindBidirectional(this.obsrv2Content);
        if (this.bound1Left)
            instance.leftProperty().bind(this.obsrv1Left);
        if (this.bound2Left)
            instance.leftProperty().bindBidirectional(this.obsrv2Left);
        if (this.bound1PinnedSide)
            instance.pinnedSideProperty().bind(this.obsrv1PinnedSide);
        if (this.bound2PinnedSide)
            instance.pinnedSideProperty().bindBidirectional(this.obsrv2PinnedSide);
        if (this.bound1Right)
            instance.rightProperty().bind(this.obsrv1Right);
        if (this.bound2Right)
            instance.rightProperty().bindBidirectional(this.obsrv2Right);
        if (this.bound1Top)
            instance.topProperty().bind(this.obsrv1Top);
        if (this.bound2Top)
            instance.topProperty().bindBidirectional(this.obsrv2Top);
        if (this.bound1TriggerDistance)
            instance.triggerDistanceProperty().bind(this.obsrv1TriggerDistance);
        if (this.bound2TriggerDistance)
            instance.triggerDistanceProperty().bindBidirectional(this.obsrv2TriggerDistance);
    }

    /**
     * 設定屬性{@link HiddenSidesPane#setAnimationDelay(javafx.util.Duration)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B animationDelay(javafx.util.Duration value)
    {
        this.hasAnimationDelay = true;
        this.valAnimationDelay = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#setAnimationDuration(javafx.util.Duration)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B animationDuration(javafx.util.Duration value)
    {
        this.hasAnimationDuration = true;
        this.valAnimationDuration = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#setBottom(javafx.scene.Node)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B bottom(javafx.scene.Node value)
    {
        this.hasBottom = true;
        this.valBottom = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#setContent(javafx.scene.Node)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B content(javafx.scene.Node value)
    {
        this.hasContent = true;
        this.valContent = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#setLeft(javafx.scene.Node)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B left(javafx.scene.Node value)
    {
        this.hasLeft = true;
        this.valLeft = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#setPinnedSide(javafx.geometry.Side)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B pinnedSide(javafx.geometry.Side value)
    {
        this.hasPinnedSide = true;
        this.valPinnedSide = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#setRight(javafx.scene.Node)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B right(javafx.scene.Node value)
    {
        this.hasRight = true;
        this.valRight = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#setTop(javafx.scene.Node)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B top(javafx.scene.Node value)
    {
        this.hasTop = true;
        this.valTop = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#setTriggerDistance(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B triggerDistance(double value)
    {
        this.hasTriggerDistance = true;
        this.valTriggerDistance = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#animationDelayProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindAnimationDelay(javafx.beans.value.ObservableValue<? extends javafx.util.Duration> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1AnimationDelay = true;
        this.obsrv1AnimationDelay = source;
        this.bound2AnimationDelay = false;
        this.obsrv2AnimationDelay = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#animationDelayProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalAnimationDelay(javafx.beans.property.Property<javafx.util.Duration> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1AnimationDelay = false;
        this.obsrv1AnimationDelay = null;
        this.bound2AnimationDelay = true;
        this.obsrv2AnimationDelay = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#animationDurationProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindAnimationDuration(javafx.beans.value.ObservableValue<? extends javafx.util.Duration> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1AnimationDuration = true;
        this.obsrv1AnimationDuration = source;
        this.bound2AnimationDuration = false;
        this.obsrv2AnimationDuration = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#animationDurationProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalAnimationDuration(javafx.beans.property.Property<javafx.util.Duration> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1AnimationDuration = false;
        this.obsrv1AnimationDuration = null;
        this.bound2AnimationDuration = true;
        this.obsrv2AnimationDuration = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#bottomProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBottom(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Bottom = true;
        this.obsrv1Bottom = source;
        this.bound2Bottom = false;
        this.obsrv2Bottom = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#bottomProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalBottom(javafx.beans.property.Property<javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Bottom = false;
        this.obsrv1Bottom = null;
        this.bound2Bottom = true;
        this.obsrv2Bottom = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#contentProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindContent(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Content = true;
        this.obsrv1Content = source;
        this.bound2Content = false;
        this.obsrv2Content = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#contentProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalContent(javafx.beans.property.Property<javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Content = false;
        this.obsrv1Content = null;
        this.bound2Content = true;
        this.obsrv2Content = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#leftProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindLeft(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Left = true;
        this.obsrv1Left = source;
        this.bound2Left = false;
        this.obsrv2Left = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#leftProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalLeft(javafx.beans.property.Property<javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Left = false;
        this.obsrv1Left = null;
        this.bound2Left = true;
        this.obsrv2Left = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#pinnedSideProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindPinnedSide(javafx.beans.value.ObservableValue<? extends javafx.geometry.Side> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1PinnedSide = true;
        this.obsrv1PinnedSide = source;
        this.bound2PinnedSide = false;
        this.obsrv2PinnedSide = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#pinnedSideProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalPinnedSide(javafx.beans.property.Property<javafx.geometry.Side> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1PinnedSide = false;
        this.obsrv1PinnedSide = null;
        this.bound2PinnedSide = true;
        this.obsrv2PinnedSide = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#rightProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindRight(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Right = true;
        this.obsrv1Right = source;
        this.bound2Right = false;
        this.obsrv2Right = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#rightProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalRight(javafx.beans.property.Property<javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Right = false;
        this.obsrv1Right = null;
        this.bound2Right = true;
        this.obsrv2Right = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#topProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindTop(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Top = true;
        this.obsrv1Top = source;
        this.bound2Top = false;
        this.obsrv2Top = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#topProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalTop(javafx.beans.property.Property<javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Top = false;
        this.obsrv1Top = null;
        this.bound2Top = true;
        this.obsrv2Top = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#triggerDistanceProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindTriggerDistance(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1TriggerDistance = true;
        this.obsrv1TriggerDistance = source;
        this.bound2TriggerDistance = false;
        this.obsrv2TriggerDistance = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link HiddenSidesPane#triggerDistanceProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalTriggerDistance(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1TriggerDistance = false;
        this.obsrv1TriggerDistance = null;
        this.bound2TriggerDistance = true;
        this.obsrv2TriggerDistance = source;
        return (B) this;
    }

    /**
     * 建構{@link HiddenSidesPane}物件。
     *
     * @return 新的{@link HiddenSidesPane}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public HiddenSidesPane build()
    {
        HiddenSidesPane instance = new HiddenSidesPane();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link HiddenSidesPane}物件。
     *
     * @return 新的{@link HiddenSidesPane}物件實體
     */
    @SuppressWarnings("unchecked")
    public HiddenSidesPane build(javafx.scene.Node arg0, javafx.scene.Node arg1, javafx.scene.Node arg2, javafx.scene.Node arg3, javafx.scene.Node arg4)
    {
        HiddenSidesPane instance = new HiddenSidesPane(arg0, arg1, arg2, arg3, arg4);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
