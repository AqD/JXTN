// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package org.controlsfx.control;

/**
 * {@link MaskerPane}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version controlsfx-8.40.11-20151113.010656-84.jar
 * @param <Z> 要建構的物件型態(需繼承{@link MaskerPane})
 * @param <B> 建構器本身的型態(需繼承{@link MaskerPaneMaker})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class MaskerPaneMaker<Z extends MaskerPane, B extends MaskerPaneMaker<Z, B>>
        extends javafx.scene.control.ControlMaker<Z, B>
        implements MaskerPaneMakerExt<Z, B>
{

    private boolean hasProgress;
    private double valProgress;

    private boolean hasProgressNode;
    private javafx.scene.Node valProgressNode;

    private boolean hasProgressVisible;
    private boolean valProgressVisible;

    private boolean hasText;
    private java.lang.String valText;

    private boolean bound1ProgressNode;
    private boolean bound2ProgressNode;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrv1ProgressNode;
    private javafx.beans.property.Property<javafx.scene.Node> obsrv2ProgressNode;

    private boolean bound1Progress;
    private boolean bound2Progress;
    private javafx.beans.value.ObservableValue<? extends Number> obsrv1Progress;
    private javafx.beans.property.Property<Number> obsrv2Progress;

    private boolean bound1ProgressVisible;
    private boolean bound2ProgressVisible;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrv1ProgressVisible;
    private javafx.beans.property.Property<Boolean> obsrv2ProgressVisible;

    private boolean bound1Text;
    private boolean bound2Text;
    private javafx.beans.value.ObservableValue<? extends String> obsrv1Text;
    private javafx.beans.property.Property<String> obsrv2Text;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasProgress)
            instance.setProgress(this.valProgress);
        if (this.hasProgressNode)
            instance.setProgressNode(this.valProgressNode);
        if (this.hasProgressVisible)
            instance.setProgressVisible(this.valProgressVisible);
        if (this.hasText)
            instance.setText(this.valText);
        if (this.bound1ProgressNode)
            instance.progressNodeProperty().bind(this.obsrv1ProgressNode);
        if (this.bound2ProgressNode)
            instance.progressNodeProperty().bindBidirectional(this.obsrv2ProgressNode);
        if (this.bound1Progress)
            instance.progressProperty().bind(this.obsrv1Progress);
        if (this.bound2Progress)
            instance.progressProperty().bindBidirectional(this.obsrv2Progress);
        if (this.bound1ProgressVisible)
            instance.progressVisibleProperty().bind(this.obsrv1ProgressVisible);
        if (this.bound2ProgressVisible)
            instance.progressVisibleProperty().bindBidirectional(this.obsrv2ProgressVisible);
        if (this.bound1Text)
            instance.textProperty().bind(this.obsrv1Text);
        if (this.bound2Text)
            instance.textProperty().bindBidirectional(this.obsrv2Text);
    }

    /**
     * 設定屬性{@link MaskerPane#setProgress(double)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B progress(double value)
    {
        this.hasProgress = true;
        this.valProgress = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MaskerPane#setProgressNode(javafx.scene.Node)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B progressNode(javafx.scene.Node value)
    {
        this.hasProgressNode = true;
        this.valProgressNode = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MaskerPane#setProgressVisible(boolean)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B progressVisible(boolean value)
    {
        this.hasProgressVisible = true;
        this.valProgressVisible = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MaskerPane#setText(java.lang.String)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B text(java.lang.String value)
    {
        this.hasText = true;
        this.valText = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link MaskerPane#progressNodeProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindProgressNode(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ProgressNode = true;
        this.obsrv1ProgressNode = source;
        this.bound2ProgressNode = false;
        this.obsrv2ProgressNode = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MaskerPane#progressNodeProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalProgressNode(javafx.beans.property.Property<javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ProgressNode = false;
        this.obsrv1ProgressNode = null;
        this.bound2ProgressNode = true;
        this.obsrv2ProgressNode = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MaskerPane#progressProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindProgress(javafx.beans.value.ObservableValue<? extends Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Progress = true;
        this.obsrv1Progress = source;
        this.bound2Progress = false;
        this.obsrv2Progress = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MaskerPane#progressProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalProgress(javafx.beans.property.Property<Number> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Progress = false;
        this.obsrv1Progress = null;
        this.bound2Progress = true;
        this.obsrv2Progress = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MaskerPane#progressVisibleProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindProgressVisible(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ProgressVisible = true;
        this.obsrv1ProgressVisible = source;
        this.bound2ProgressVisible = false;
        this.obsrv2ProgressVisible = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MaskerPane#progressVisibleProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalProgressVisible(javafx.beans.property.Property<Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ProgressVisible = false;
        this.obsrv1ProgressVisible = null;
        this.bound2ProgressVisible = true;
        this.obsrv2ProgressVisible = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link MaskerPane#textProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindText(javafx.beans.value.ObservableValue<? extends String> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Text = true;
        this.obsrv1Text = source;
        this.bound2Text = false;
        this.obsrv2Text = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link MaskerPane#textProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalText(javafx.beans.property.Property<String> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Text = false;
        this.obsrv1Text = null;
        this.bound2Text = true;
        this.obsrv2Text = source;
        return (B) this;
    }

    /**
     * 建構{@link MaskerPane}物件。
     *
     * @return 新的{@link MaskerPane}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public MaskerPane build()
    {
        MaskerPane instance = new MaskerPane();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
