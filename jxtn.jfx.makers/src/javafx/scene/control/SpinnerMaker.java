// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link Spinner}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link Spinner})
 * @param <B> 建構器本身的型態(需繼承{@link SpinnerMaker})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class SpinnerMaker<T extends java.lang.Object, Z extends Spinner<T>, B extends SpinnerMaker<T, Z, B>>
        extends javafx.scene.control.ControlMaker<Z, B>
        implements SpinnerMakerExt<T, Z, B>
{

    private boolean hasEditable;
    private boolean valEditable;

    private boolean hasValueFactory;
    private javafx.scene.control.SpinnerValueFactory<T> valValueFactory;

    private boolean bound1Editable;
    private boolean bound2Editable;
    private javafx.beans.value.ObservableValue<? extends Boolean> obsrv1Editable;
    private javafx.beans.property.Property<Boolean> obsrv2Editable;

    private boolean bound1ValueFactory;
    private boolean bound2ValueFactory;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.control.SpinnerValueFactory<T>> obsrv1ValueFactory;
    private javafx.beans.property.Property<javafx.scene.control.SpinnerValueFactory<T>> obsrv2ValueFactory;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasEditable)
            instance.setEditable(this.valEditable);
        if (this.hasValueFactory)
            instance.setValueFactory(this.valValueFactory);
        if (this.bound1Editable)
            instance.editableProperty().bind(this.obsrv1Editable);
        if (this.bound2Editable)
            instance.editableProperty().bindBidirectional(this.obsrv2Editable);
        if (this.bound1ValueFactory)
            instance.valueFactoryProperty().bind(this.obsrv1ValueFactory);
        if (this.bound2ValueFactory)
            instance.valueFactoryProperty().bindBidirectional(this.obsrv2ValueFactory);
    }

    /**
     * 設定屬性{@link Spinner#setEditable(boolean)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B editable(boolean value)
    {
        this.hasEditable = true;
        this.valEditable = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Spinner#setValueFactory(javafx.scene.control.SpinnerValueFactory)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B valueFactory(javafx.scene.control.SpinnerValueFactory<T> value)
    {
        this.hasValueFactory = true;
        this.valValueFactory = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link Spinner#editableProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindEditable(javafx.beans.value.ObservableValue<? extends Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Editable = true;
        this.obsrv1Editable = source;
        this.bound2Editable = false;
        this.obsrv2Editable = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link Spinner#editableProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalEditable(javafx.beans.property.Property<Boolean> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Editable = false;
        this.obsrv1Editable = null;
        this.bound2Editable = true;
        this.obsrv2Editable = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link Spinner#valueFactoryProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindValueFactory(javafx.beans.value.ObservableValue<? extends javafx.scene.control.SpinnerValueFactory<T>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ValueFactory = true;
        this.obsrv1ValueFactory = source;
        this.bound2ValueFactory = false;
        this.obsrv2ValueFactory = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link Spinner#valueFactoryProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalValueFactory(javafx.beans.property.Property<javafx.scene.control.SpinnerValueFactory<T>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1ValueFactory = false;
        this.obsrv1ValueFactory = null;
        this.bound2ValueFactory = true;
        this.obsrv2ValueFactory = source;
        return (B) this;
    }

    /**
     * 建構{@link Spinner}物件。
     *
     * @return 新的{@link Spinner}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public Spinner<T> build()
    {
        Spinner<T> instance = new Spinner<T>();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link Spinner}物件。
     *
     * @return 新的{@link Spinner}物件實體
     */
    @SuppressWarnings("unchecked")
    public Spinner<T> build(javafx.collections.ObservableList<T> arg0)
    {
        Spinner<T> instance = new Spinner<T>(arg0);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link Spinner}物件。
     *
     * @return 新的{@link Spinner}物件實體
     */
    @SuppressWarnings("unchecked")
    public Spinner<T> build(javafx.scene.control.SpinnerValueFactory<T> arg0)
    {
        Spinner<T> instance = new Spinner<T>(arg0);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link Spinner}物件。
     *
     * @return 新的{@link Spinner}物件實體
     */
    @SuppressWarnings("unchecked")
    public Spinner<T> build(double arg0, double arg1, double arg2)
    {
        Spinner<T> instance = new Spinner<T>(arg0, arg1, arg2);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link Spinner}物件。
     *
     * @return 新的{@link Spinner}物件實體
     */
    @SuppressWarnings("unchecked")
    public Spinner<T> build(int arg0, int arg1, int arg2)
    {
        Spinner<T> instance = new Spinner<T>(arg0, arg1, arg2);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link Spinner}物件。
     *
     * @return 新的{@link Spinner}物件實體
     */
    @SuppressWarnings("unchecked")
    public Spinner<T> build(double arg0, double arg1, double arg2, double arg3)
    {
        Spinner<T> instance = new Spinner<T>(arg0, arg1, arg2, arg3);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link Spinner}物件。
     *
     * @return 新的{@link Spinner}物件實體
     */
    @SuppressWarnings("unchecked")
    public Spinner<T> build(int arg0, int arg1, int arg2, int arg3)
    {
        Spinner<T> instance = new Spinner<T>(arg0, arg1, arg2, arg3);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
