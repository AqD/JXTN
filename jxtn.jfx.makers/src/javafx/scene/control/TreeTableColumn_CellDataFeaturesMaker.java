// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.control;

/**
 * {@link TreeTableColumn.CellDataFeatures}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link TreeTableColumn.CellDataFeatures})
 * @param <B> 建構器本身的型態(需繼承{@link TreeTableColumn.CellDataFeaturesMaker})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class TreeTableColumn_CellDataFeaturesMaker<S extends java.lang.Object, T extends java.lang.Object, Z extends TreeTableColumn.CellDataFeatures<S, T>, B extends TreeTableColumn_CellDataFeaturesMaker<S, T, Z, B>>
        extends jxtn.jfx.makers.AbstractMaker<Z, B>
        implements TreeTableColumn_CellDataFeaturesMakerExt<S, T, Z, B>
{

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
    }

    /**
     * 建構{@link TreeTableColumn.CellDataFeatures}物件。
     *
     * @return 新的{@link TreeTableColumn.CellDataFeatures}物件實體
     */
    @SuppressWarnings("unchecked")
    public TreeTableColumn.CellDataFeatures<S, T> build(javafx.scene.control.TreeTableView<S> arg0, javafx.scene.control.TreeTableColumn<S, T> arg1, javafx.scene.control.TreeItem<S> arg2)
    {
        TreeTableColumn.CellDataFeatures<S, T> instance = new TreeTableColumn.CellDataFeatures<S, T>(arg0, arg1, arg2);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
