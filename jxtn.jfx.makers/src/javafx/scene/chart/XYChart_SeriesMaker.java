// @formatter:off
/*
 * Unlicensed, generated by javafx.ftl
 */

package javafx.scene.chart;

/**
 * {@link XYChart.Series}建構器。
 *
 * @author JarReflectionDataLoader-1.0.0
 * @version jfxrt.jar
 * @param <Z> 要建構的物件型態(需繼承{@link XYChart.Series})
 * @param <B> 建構器本身的型態(需繼承{@link XYChart.SeriesMaker})
 */
@javax.annotation.Generated("Generated by javafx.ftl")
@SuppressWarnings("all")
public class XYChart_SeriesMaker<X extends java.lang.Object, Y extends java.lang.Object, Z extends XYChart.Series<X, Y>, B extends XYChart_SeriesMaker<X, Y, Z, B>>
        extends jxtn.jfx.makers.AbstractMaker<Z, B>
        implements XYChart_SeriesMakerExt<X, Y, Z, B>
{

    private boolean hasData;
    private javafx.collections.ObservableList<javafx.scene.chart.XYChart.Data<X, Y>> valData;

    private boolean hasName;
    private java.lang.String valName;

    private boolean hasNode;
    private javafx.scene.Node valNode;

    private boolean bound1Data;
    private boolean bound2Data;
    private javafx.beans.value.ObservableValue<? extends javafx.collections.ObservableList<javafx.scene.chart.XYChart.Data<X, Y>>> obsrv1Data;
    private javafx.beans.property.Property<javafx.collections.ObservableList<javafx.scene.chart.XYChart.Data<X, Y>>> obsrv2Data;

    private boolean bound1Name;
    private boolean bound2Name;
    private javafx.beans.value.ObservableValue<? extends String> obsrv1Name;
    private javafx.beans.property.Property<String> obsrv2Name;

    private boolean bound1Node;
    private boolean bound2Node;
    private javafx.beans.value.ObservableValue<? extends javafx.scene.Node> obsrv1Node;
    private javafx.beans.property.Property<javafx.scene.Node> obsrv2Node;

    @Override
    public void applyTo(Z instance)
    {
        super.applyTo(instance);
        if (this.hasData)
            instance.setData(this.valData);
        if (this.hasName)
            instance.setName(this.valName);
        if (this.hasNode)
            instance.setNode(this.valNode);
        if (this.bound1Data)
            instance.dataProperty().bind(this.obsrv1Data);
        if (this.bound2Data)
            instance.dataProperty().bindBidirectional(this.obsrv2Data);
        if (this.bound1Name)
            instance.nameProperty().bind(this.obsrv1Name);
        if (this.bound2Name)
            instance.nameProperty().bindBidirectional(this.obsrv2Name);
        if (this.bound1Node)
            instance.nodeProperty().bind(this.obsrv1Node);
        if (this.bound2Node)
            instance.nodeProperty().bindBidirectional(this.obsrv2Node);
    }

    /**
     * 設定屬性{@link XYChart.Series#setData(javafx.collections.ObservableList)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B data(javafx.collections.ObservableList<javafx.scene.chart.XYChart.Data<X, Y>> value)
    {
        this.hasData = true;
        this.valData = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link XYChart.Series#setName(java.lang.String)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B name(java.lang.String value)
    {
        this.hasName = true;
        this.valName = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link XYChart.Series#setNode(javafx.scene.Node)}。
     *
     * @param value 新的屬性值
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public B node(javafx.scene.Node value)
    {
        this.hasNode = true;
        this.valNode = value;
        return (B) this;
    }

    /**
     * 設定屬性{@link XYChart.Series#dataProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindData(javafx.beans.value.ObservableValue<? extends javafx.collections.ObservableList<javafx.scene.chart.XYChart.Data<X, Y>>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Data = true;
        this.obsrv1Data = source;
        this.bound2Data = false;
        this.obsrv2Data = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link XYChart.Series#dataProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalData(javafx.beans.property.Property<javafx.collections.ObservableList<javafx.scene.chart.XYChart.Data<X, Y>>> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Data = false;
        this.obsrv1Data = null;
        this.bound2Data = true;
        this.obsrv2Data = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link XYChart.Series#nameProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindName(javafx.beans.value.ObservableValue<? extends String> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Name = true;
        this.obsrv1Name = source;
        this.bound2Name = false;
        this.obsrv2Name = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link XYChart.Series#nameProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalName(javafx.beans.property.Property<String> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Name = false;
        this.obsrv1Name = null;
        this.bound2Name = true;
        this.obsrv2Name = source;
        return (B) this;
    }

    /**
     * 設定屬性{@link XYChart.Series#nodeProperty}的連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindNode(javafx.beans.value.ObservableValue<? extends javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Node = true;
        this.obsrv1Node = source;
        this.bound2Node = false;
        this.obsrv2Node = null;
        return (B) this;
    }

    /**
     * 設定屬性{@link XYChart.Series#nodeProperty}的雙向連結。
     *
     * @param value 新的屬性連結(單向)
     * @return 目前的建構器(this)
     */
    @SuppressWarnings("unchecked")
    public final B bindBidirectionalNode(javafx.beans.property.Property<javafx.scene.Node> source)
    {
        java.util.Objects.requireNonNull(source);
        this.bound1Node = false;
        this.obsrv1Node = null;
        this.bound2Node = true;
        this.obsrv2Node = source;
        return (B) this;
    }

    /**
     * 建構{@link XYChart.Series}物件。
     *
     * @return 新的{@link XYChart.Series}物件實體
     */
    @Override
    @SuppressWarnings("unchecked")
    public XYChart.Series<X, Y> build()
    {
        XYChart.Series<X, Y> instance = new XYChart.Series<X, Y>();
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link XYChart.Series}物件。
     *
     * @return 新的{@link XYChart.Series}物件實體
     */
    @SuppressWarnings("unchecked")
    public XYChart.Series<X, Y> build(javafx.collections.ObservableList<javafx.scene.chart.XYChart.Data<X, Y>> arg0)
    {
        XYChart.Series<X, Y> instance = new XYChart.Series<X, Y>(arg0);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }

    /**
     * 建構{@link XYChart.Series}物件。
     *
     * @return 新的{@link XYChart.Series}物件實體
     */
    @SuppressWarnings("unchecked")
    public XYChart.Series<X, Y> build(java.lang.String arg0, javafx.collections.ObservableList<javafx.scene.chart.XYChart.Data<X, Y>> arg1)
    {
        XYChart.Series<X, Y> instance = new XYChart.Series<X, Y>(arg0, arg1);
        this.applyTo((Z) instance);
        this.doAfterBuild((Z) instance);
        return instance;
    }
}
